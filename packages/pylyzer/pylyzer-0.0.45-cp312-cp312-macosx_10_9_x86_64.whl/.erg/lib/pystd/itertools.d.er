.Count = 'count': ClassType
.Count <: Iterable Int
.Count.
    __call__: (start: Int, step: Int) -> .Count

.Cycle = 'cycle': ClassType
.Cycle.
    __call__: |T|(iterable: Iterable T) -> Iterable T

.Repeat = 'repeat': ClassType
.Repeat.
    __call__: |T|(value: T, times := Nat) -> Iterable T

.Accumulate = 'accumulate': ClassType
.Accumulate.
    __call__: |T|(iterable: Iterable(T), func := (T, T) -> T) -> Iterable T

.Chain = 'chain': ClassType
.Chain.
    __call__: |T|(*iterables: Iterable T) -> Iterable T

.Compress = 'compress': ClassType
.Compress.
    __call__: |T|(data: Iterable(T), selectors: Iterable Bool) -> Iterable T

.DropWhile = 'dropwhile': ClassType
.DropWhile.
    __call__: |T|(predicate: (T) -> Bool, iterable: Iterable T) -> Iterable T

.FilterFalse = 'filterfalse': ClassType
.FilterFalse.
    __call__: |T|(predicate: (T) -> Bool, iterable: Iterable T) -> Iterable T

.GroupBy = 'groupby': ClassType
.GroupBy.
    __call__: |T, K|(iterable: Iterable(T), key := (T) -> K) -> Iterable((K, Iterable(T)))

.Islice = 'islice': ClassType
.Islice.
    __call__: |T|(iterable: Iterable(T), start := Int, stop := Int, step := Int) -> Iterable T

.Pairwise = 'pairwise': ClassType
.Pairwise.
    __call__: |T|(iterable: Iterable(T)) -> Iterable((T, T))

# .Startmap = 'startmap': ClassType
# .Startmap.
#     __call__: |T|(function: (T) -> T, iterable: Iterable T) -> Iterable T

.Takewhile = 'takewhile': ClassType
.Takewhile.
    __call__: |T|(predicate: (T) -> Bool, iterable: Iterable T) -> Iterable T

.Tee = 'tee': ClassType
.Tee.
    __call__: |T|(iterable: Iterable(T), n := Nat) -> [Iterable(T); _]

.ZipLongest = 'zip_longest': ClassType
.ZipLongest.
    __call__: |T|(*iterables: Iterable(T), fillvalue := T) -> Iterable [T; _]

.Product = 'product': ClassType
.Product.
    __call__: |T|(*iterables: Iterable(T), repeat := Nat) -> Iterable [T; _]

.Permutations = 'permutations': ClassType
.Permutations.
    __call__: |T|(iterable: Iterable(T), r := Nat) -> Iterable [T; _]

.Combinations = 'combinations': ClassType
.Combinations.
    __call__: |T|(iterable: Iterable(T), r := Nat) -> Iterable [T; _]

.CombinationsWithReplacement = 'combinations_with_replacement': ClassType
.CombinationsWithReplacement.
    __call__: |T|(iterable: Iterable(T), r := Nat) -> Iterable [T; _]
