# coding: utf-8

"""
    OpenBuckets API

    The OpenBuckets web-based tool is a powerful utility that allows users to quickly locate open buckets in cloud storage systems through a simple query. In addition, it provides a convenient way to search for various file types across these open buckets, making it an essential tool for security professionals, researchers, and anyone interested in discovering exposed data. This Postman collection aims to showcase the capabilities of OpenBuckets by providing a set of API requests that demonstrate how to leverage its features. By following this collection, you'll learn how to utilize OpenBuckets to identify open buckets and search for specific file types within them.

    The version of the OpenAPI document: 1.0.0
    Contact: support@openbuckets.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from openbuckets.models.file_search_results import FileSearchResults

from openbuckets.api_client import ApiClient
from openbuckets.api_response import ApiResponse
from openbuckets.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def search_files(self, keywords : Annotated[Optional[StrictStr], Field(description="multiple keywords.\"-\" denotes stop keywords")] = None, order : Annotated[Optional[StrictStr], Field(description="the sorting field for the search results (e.g., \"size\", \"lastModified\")")] = None, direction : Annotated[Optional[StrictStr], Field(description="the sorting direction for the search results (e.g., \"desc\" for descending)")] = None, field_to_search : Annotated[Optional[StrictStr], Field(description="taken into consideration if you provide any of the allowed values, \"cloudProvider\",\"fileExtension\",\"fileName\",\"fileUrl\",\"fullPath\"")] = None, full_path : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="include the full path in the search results (1 for true, 0 for false)")] = None, extensions : Annotated[Optional[StrictStr], Field(description="comma-separated list of file extensions to include (e.g., \"pdf,env\")")] = None, last_modified_from : Annotated[Optional[StrictStr], Field(description="UNIX timestamp for the starting date of the last modification range")] = None, last_modified_to : Annotated[Optional[StrictStr], Field(description="UNIX timestamp for the ending date of the last modification rang")] = None, size_from : Annotated[Optional[StrictStr], Field(description="minimum file size in bytes")] = None, size_to : Annotated[Optional[StrictStr], Field(description="maximum file size in bytes")] = None, start : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="starting index for pagination")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="number of search results to return per page, based on your role.  If you send a value more than the allowed limit, we set it to the allowed limit.")] = None, exclude_buckets : Annotated[Optional[StrictStr], Field(description="comma-separated list of bucket IDs to exclude from the search")] = None, buckets : Annotated[Optional[StrictStr], Field(description="filter search results to specific bucket IDs")] = None, stop_extensions : Annotated[Optional[StrictStr], Field(description="comma-separated list of file extensions to exclude with or without \".\" (e.g., sql, .sql)")] = None, **kwargs) -> FileSearchResults:  # noqa: E501
        """Search Files  # noqa: E501

        This request allows you to perform a highly specific search for files within the OpenBuckets database using advanced filters. You can narrow down the search based on various criteria such as keywords, order, size, date range, file extensions, and more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_files(keywords, order, direction, field_to_search, full_path, extensions, last_modified_from, last_modified_to, size_from, size_to, start, limit, exclude_buckets, buckets, stop_extensions, async_req=True)
        >>> result = thread.get()

        :param keywords: multiple keywords.\"-\" denotes stop keywords
        :type keywords: str
        :param order: the sorting field for the search results (e.g., \"size\", \"lastModified\")
        :type order: str
        :param direction: the sorting direction for the search results (e.g., \"desc\" for descending)
        :type direction: str
        :param field_to_search: taken into consideration if you provide any of the allowed values, \"cloudProvider\",\"fileExtension\",\"fileName\",\"fileUrl\",\"fullPath\"
        :type field_to_search: str
        :param full_path: include the full path in the search results (1 for true, 0 for false)
        :type full_path: float
        :param extensions: comma-separated list of file extensions to include (e.g., \"pdf,env\")
        :type extensions: str
        :param last_modified_from: UNIX timestamp for the starting date of the last modification range
        :type last_modified_from: str
        :param last_modified_to: UNIX timestamp for the ending date of the last modification rang
        :type last_modified_to: str
        :param size_from: minimum file size in bytes
        :type size_from: str
        :param size_to: maximum file size in bytes
        :type size_to: str
        :param start: starting index for pagination
        :type start: float
        :param limit: number of search results to return per page, based on your role.  If you send a value more than the allowed limit, we set it to the allowed limit.
        :type limit: float
        :param exclude_buckets: comma-separated list of bucket IDs to exclude from the search
        :type exclude_buckets: str
        :param buckets: filter search results to specific bucket IDs
        :type buckets: str
        :param stop_extensions: comma-separated list of file extensions to exclude with or without \".\" (e.g., sql, .sql)
        :type stop_extensions: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FileSearchResults
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the search_files_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.search_files_with_http_info(keywords, order, direction, field_to_search, full_path, extensions, last_modified_from, last_modified_to, size_from, size_to, start, limit, exclude_buckets, buckets, stop_extensions, **kwargs)  # noqa: E501

    @validate_arguments
    def search_files_with_http_info(self, keywords : Annotated[Optional[StrictStr], Field(description="multiple keywords.\"-\" denotes stop keywords")] = None, order : Annotated[Optional[StrictStr], Field(description="the sorting field for the search results (e.g., \"size\", \"lastModified\")")] = None, direction : Annotated[Optional[StrictStr], Field(description="the sorting direction for the search results (e.g., \"desc\" for descending)")] = None, field_to_search : Annotated[Optional[StrictStr], Field(description="taken into consideration if you provide any of the allowed values, \"cloudProvider\",\"fileExtension\",\"fileName\",\"fileUrl\",\"fullPath\"")] = None, full_path : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="include the full path in the search results (1 for true, 0 for false)")] = None, extensions : Annotated[Optional[StrictStr], Field(description="comma-separated list of file extensions to include (e.g., \"pdf,env\")")] = None, last_modified_from : Annotated[Optional[StrictStr], Field(description="UNIX timestamp for the starting date of the last modification range")] = None, last_modified_to : Annotated[Optional[StrictStr], Field(description="UNIX timestamp for the ending date of the last modification rang")] = None, size_from : Annotated[Optional[StrictStr], Field(description="minimum file size in bytes")] = None, size_to : Annotated[Optional[StrictStr], Field(description="maximum file size in bytes")] = None, start : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="starting index for pagination")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="number of search results to return per page, based on your role.  If you send a value more than the allowed limit, we set it to the allowed limit.")] = None, exclude_buckets : Annotated[Optional[StrictStr], Field(description="comma-separated list of bucket IDs to exclude from the search")] = None, buckets : Annotated[Optional[StrictStr], Field(description="filter search results to specific bucket IDs")] = None, stop_extensions : Annotated[Optional[StrictStr], Field(description="comma-separated list of file extensions to exclude with or without \".\" (e.g., sql, .sql)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search Files  # noqa: E501

        This request allows you to perform a highly specific search for files within the OpenBuckets database using advanced filters. You can narrow down the search based on various criteria such as keywords, order, size, date range, file extensions, and more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_files_with_http_info(keywords, order, direction, field_to_search, full_path, extensions, last_modified_from, last_modified_to, size_from, size_to, start, limit, exclude_buckets, buckets, stop_extensions, async_req=True)
        >>> result = thread.get()

        :param keywords: multiple keywords.\"-\" denotes stop keywords
        :type keywords: str
        :param order: the sorting field for the search results (e.g., \"size\", \"lastModified\")
        :type order: str
        :param direction: the sorting direction for the search results (e.g., \"desc\" for descending)
        :type direction: str
        :param field_to_search: taken into consideration if you provide any of the allowed values, \"cloudProvider\",\"fileExtension\",\"fileName\",\"fileUrl\",\"fullPath\"
        :type field_to_search: str
        :param full_path: include the full path in the search results (1 for true, 0 for false)
        :type full_path: float
        :param extensions: comma-separated list of file extensions to include (e.g., \"pdf,env\")
        :type extensions: str
        :param last_modified_from: UNIX timestamp for the starting date of the last modification range
        :type last_modified_from: str
        :param last_modified_to: UNIX timestamp for the ending date of the last modification rang
        :type last_modified_to: str
        :param size_from: minimum file size in bytes
        :type size_from: str
        :param size_to: maximum file size in bytes
        :type size_to: str
        :param start: starting index for pagination
        :type start: float
        :param limit: number of search results to return per page, based on your role.  If you send a value more than the allowed limit, we set it to the allowed limit.
        :type limit: float
        :param exclude_buckets: comma-separated list of bucket IDs to exclude from the search
        :type exclude_buckets: str
        :param buckets: filter search results to specific bucket IDs
        :type buckets: str
        :param stop_extensions: comma-separated list of file extensions to exclude with or without \".\" (e.g., sql, .sql)
        :type stop_extensions: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FileSearchResults, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'keywords',
            'order',
            'direction',
            'field_to_search',
            'full_path',
            'extensions',
            'last_modified_from',
            'last_modified_to',
            'size_from',
            'size_to',
            'start',
            'limit',
            'exclude_buckets',
            'buckets',
            'stop_extensions'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_files" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('keywords') is not None:  # noqa: E501
            _query_params.append(('keywords', _params['keywords']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('direction') is not None:  # noqa: E501
            _query_params.append(('direction', _params['direction']))

        if _params.get('field_to_search') is not None:  # noqa: E501
            _query_params.append(('field-to-search', _params['field_to_search']))

        if _params.get('full_path') is not None:  # noqa: E501
            _query_params.append(('full-path', _params['full_path']))

        if _params.get('extensions') is not None:  # noqa: E501
            _query_params.append(('extensions', _params['extensions']))

        if _params.get('last_modified_from') is not None:  # noqa: E501
            _query_params.append(('last-modified-from', _params['last_modified_from']))

        if _params.get('last_modified_to') is not None:  # noqa: E501
            _query_params.append(('last-modified-to', _params['last_modified_to']))

        if _params.get('size_from') is not None:  # noqa: E501
            _query_params.append(('size-from', _params['size_from']))

        if _params.get('size_to') is not None:  # noqa: E501
            _query_params.append(('size-to', _params['size_to']))

        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('exclude_buckets') is not None:  # noqa: E501
            _query_params.append(('exclude-buckets', _params['exclude_buckets']))

        if _params.get('buckets') is not None:  # noqa: E501
            _query_params.append(('buckets', _params['buckets']))

        if _params.get('stop_extensions') is not None:  # noqa: E501
            _query_params.append(('stop-extensions', _params['stop_extensions']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "FileSearchResults",
        }

        return self.api_client.call_api(
            '/api/v2/files', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
