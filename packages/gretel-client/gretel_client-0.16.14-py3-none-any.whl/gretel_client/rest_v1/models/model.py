# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from datetime import datetime
from inspect import getfullargspec
from typing import Dict, Optional

from pydantic import BaseModel, Field, StrictStr


class Model(BaseModel):
    """
    Model
    """

    id: StrictStr = Field(
        ..., description="The id of the model. Model id's are prefixed with `m_`."
    )
    name: StrictStr = Field(..., description="The name of the model.")
    project_id: StrictStr = Field(
        ..., description="Parent project id. Permissions are scoped by project access."
    )
    description: Optional[StrictStr] = Field(None, description="Model description.")
    tags: Optional[Dict[str, StrictStr]] = Field(
        None, description="Tags by name by ModelRun id."
    )
    created_by: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties = [
        "id",
        "name",
        "project_id",
        "description",
        "tags",
        "created_by",
        "created_at",
        "updated_at",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "created_by",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Model.parse_obj(obj)

        _obj = Model.parse_obj(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "project_id": obj.get("project_id"),
                "description": obj.get("description"),
                "tags": obj.get("tags"),
                "created_by": obj.get("created_by"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
