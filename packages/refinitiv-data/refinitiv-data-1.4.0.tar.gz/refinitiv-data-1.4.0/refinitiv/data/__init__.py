__all__ = (
    "close_session",
    "content",
    "dates_and_calendars",
    "delivery",
    "discovery",
    "eikon",
    "errors",
    "get_config",
    "get_data",
    "get_history",
    "load_config",
    "news",
    "open_pricing_stream",
    "open_session",
    "OpenState",
    "PricingStream",
    "session",
    "usage_collection",
)

"""
    refinitiv-data is a Python library to access Refinitiv Data Platform with Python.
"""

# _version.py file is generated by setuptools_scm on build
try:
    from ._version import __version__
except ImportError:
    __version__ = "0.0.0"

from typing import TYPE_CHECKING as _TYPE_CHECKING

from ._configure import get_config, load_config
from ._open_state import OpenState
from . import delivery, session, content, errors, usage_collection, discovery
from ._access_layer.session import open_session, close_session
from ._access_layer.get_data_func import get_data
from ._access_layer.get_history_func import get_history
from ._access_layer.get_stream import PricingStream, open_pricing_stream
from ._access_layer import dates_and_calendars, news

from ._tools import lazy_attach as _lazy_attach

if _TYPE_CHECKING:
    from . import eikon

import warnings as _warnings

_warnings.formatwarning = (
    lambda message, category, filename, lineno, line=None: f"{filename}:{lineno}:{category.__name__}: {message}\n"
)

__getattr__, __dir__, __all__ = _lazy_attach(
    __name__,
    submodules={
        "close_session",
        "content",
        "dates_and_calendars",
        "delivery",
        "discovery",
        "eikon",
        "errors",
        "get_config",
        "get_data",
        "get_history",
        "load_config",
        "news",
        "open_pricing_stream",
        "open_session",
        "OpenState",
        "PricingStream",
        "session",
        "usage_collection",
    },
)
