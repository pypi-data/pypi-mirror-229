# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ApiExtensionDestinationArgs',
    'ApiExtensionTriggerArgs',
    'AttributeGroupAttributeArgs',
    'CartDiscountCustomArgs',
    'CartDiscountTargetArgs',
    'CartDiscountValueArgs',
    'CartDiscountValueMoneyArgs',
    'CategoryAssetArgs',
    'CategoryAssetSourceArgs',
    'CategoryAssetSourceDimensionsArgs',
    'CategoryCustomArgs',
    'ChannelAddressArgs',
    'ChannelCustomArgs',
    'ChannelGeolocationArgs',
    'CustomerGroupCustomArgs',
    'DiscountCodeCustomArgs',
    'ProductDiscountValueArgs',
    'ProductDiscountValueMoneyArgs',
    'ProductTypeAttributeArgs',
    'ProductTypeAttributeTypeArgs',
    'ProductTypeAttributeTypeElementType2Args',
    'ProductTypeAttributeTypeElementType2LocalizedValueArgs',
    'ProductTypeAttributeTypeElementType2ValueArgs',
    'ProductTypeAttributeTypeLocalizedValueArgs',
    'ProductTypeAttributeTypeValueArgs',
    'ProjectSettingsCartsArgs',
    'ProjectSettingsExternalOauthArgs',
    'ProjectSettingsMessagesArgs',
    'ProjectSettingsShippingRateCartClassificationValueArgs',
    'ShippingMethodCustomArgs',
    'ShippingZoneLocationArgs',
    'ShippingZoneRateFreeAboveArgs',
    'ShippingZoneRatePriceArgs',
    'ShippingZoneRateShippingRatePriceTierArgs',
    'ShippingZoneRateShippingRatePriceTierPriceArgs',
    'ShippingZoneRateShippingRatePriceTierPriceFunctionArgs',
    'StoreCustomArgs',
    'SubscriptionChangeArgs',
    'SubscriptionDestinationArgs',
    'SubscriptionFormatArgs',
    'SubscriptionMessageArgs',
    'TaxCategoryRateSubRateArgs',
    'TypeFieldArgs',
    'TypeFieldTypeArgs',
    'TypeFieldTypeElementType2Args',
    'TypeFieldTypeElementType2LocalizedValueArgs',
    'TypeFieldTypeElementType2ValueArgs',
    'TypeFieldTypeLocalizedValueArgs',
    'TypeFieldTypeValueArgs',
]

@pulumi.input_type
class ApiExtensionDestinationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_secret: Optional[pulumi.Input[str]] = None,
                 arn: Optional[pulumi.Input[str]] = None,
                 authorization_header: Optional[pulumi.Input[str]] = None,
                 azure_authentication: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_secret is not None:
            pulumi.set(__self__, "access_secret", access_secret)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if authorization_header is not None:
            pulumi.set(__self__, "authorization_header", authorization_header)
        if azure_authentication is not None:
            pulumi.set(__self__, "azure_authentication", azure_authentication)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_secret")

    @access_secret.setter
    def access_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_secret", value)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="authorizationHeader")
    def authorization_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_header")

    @authorization_header.setter
    def authorization_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_header", value)

    @property
    @pulumi.getter(name="azureAuthentication")
    def azure_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_authentication")

    @azure_authentication.setter
    def azure_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_authentication", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ApiExtensionTriggerArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource_type_id: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resource_type_id", resource_type_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="resourceTypeId")
    def resource_type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type_id")

    @resource_type_id.setter
    def resource_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type_id", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)


@pulumi.input_type
class AttributeGroupAttributeArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CartDiscountCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class CartDiscountTargetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 discounted_quantity: Optional[pulumi.Input[int]] = None,
                 max_occurrence: Optional[pulumi.Input[int]] = None,
                 predicate: Optional[pulumi.Input[str]] = None,
                 selection_mode: Optional[pulumi.Input[str]] = None,
                 trigger_quantity: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if discounted_quantity is not None:
            pulumi.set(__self__, "discounted_quantity", discounted_quantity)
        if max_occurrence is not None:
            pulumi.set(__self__, "max_occurrence", max_occurrence)
        if predicate is not None:
            pulumi.set(__self__, "predicate", predicate)
        if selection_mode is not None:
            pulumi.set(__self__, "selection_mode", selection_mode)
        if trigger_quantity is not None:
            pulumi.set(__self__, "trigger_quantity", trigger_quantity)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="discountedQuantity")
    def discounted_quantity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "discounted_quantity")

    @discounted_quantity.setter
    def discounted_quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discounted_quantity", value)

    @property
    @pulumi.getter(name="maxOccurrence")
    def max_occurrence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_occurrence")

    @max_occurrence.setter
    def max_occurrence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_occurrence", value)

    @property
    @pulumi.getter
    def predicate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predicate", value)

    @property
    @pulumi.getter(name="selectionMode")
    def selection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selection_mode")

    @selection_mode.setter
    def selection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selection_mode", value)

    @property
    @pulumi.getter(name="triggerQuantity")
    def trigger_quantity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trigger_quantity")

    @trigger_quantity.setter
    def trigger_quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_quantity", value)


@pulumi.input_type
class CartDiscountValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 distribution_channel_id: Optional[pulumi.Input[str]] = None,
                 monies: Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]] = None,
                 permyriad: Optional[pulumi.Input[int]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 supply_channel_id: Optional[pulumi.Input[str]] = None,
                 variant_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if distribution_channel_id is not None:
            pulumi.set(__self__, "distribution_channel_id", distribution_channel_id)
        if monies is not None:
            pulumi.set(__self__, "monies", monies)
        if permyriad is not None:
            pulumi.set(__self__, "permyriad", permyriad)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if supply_channel_id is not None:
            pulumi.set(__self__, "supply_channel_id", supply_channel_id)
        if variant_id is not None:
            pulumi.set(__self__, "variant_id", variant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="distributionChannelId")
    def distribution_channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribution_channel_id")

    @distribution_channel_id.setter
    def distribution_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribution_channel_id", value)

    @property
    @pulumi.getter
    def monies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]]:
        return pulumi.get(self, "monies")

    @monies.setter
    def monies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]]):
        pulumi.set(self, "monies", value)

    @property
    @pulumi.getter
    def permyriad(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "permyriad")

    @permyriad.setter
    def permyriad(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "permyriad", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="supplyChannelId")
    def supply_channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "supply_channel_id")

    @supply_channel_id.setter
    def supply_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supply_channel_id", value)

    @property
    @pulumi.getter(name="variantId")
    def variant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "variant_id")

    @variant_id.setter
    def variant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "variant_id", value)


@pulumi.input_type
class CartDiscountValueMoneyArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class CategoryAssetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Mapping[str, Any]],
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetSourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetSourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class CategoryAssetSourceArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input['CategoryAssetSourceDimensionsArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "uri", uri)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input['CategoryAssetSourceDimensionsArgs']]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input['CategoryAssetSourceDimensionsArgs']]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CategoryAssetSourceDimensionsArgs:
    def __init__(__self__, *,
                 h: pulumi.Input[int],
                 w: pulumi.Input[int]):
        pulumi.set(__self__, "h", h)
        pulumi.set(__self__, "w", w)

    @property
    @pulumi.getter
    def h(self) -> pulumi.Input[int]:
        return pulumi.get(self, "h")

    @h.setter
    def h(self, value: pulumi.Input[int]):
        pulumi.set(self, "h", value)

    @property
    @pulumi.getter
    def w(self) -> pulumi.Input[int]:
        return pulumi.get(self, "w")

    @w.setter
    def w(self, value: pulumi.Input[int]):
        pulumi.set(self, "w", value)


@pulumi.input_type
class CategoryCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ChannelAddressArgs:
    def __init__(__self__, *,
                 country: pulumi.Input[str],
                 additional_address_info: Optional[pulumi.Input[str]] = None,
                 additional_street_info: Optional[pulumi.Input[str]] = None,
                 apartment: Optional[pulumi.Input[str]] = None,
                 building: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 department: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 fax: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 mobile: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None,
                 po_box: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 salutation: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 street_name: Optional[pulumi.Input[str]] = None,
                 street_number: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "country", country)
        if additional_address_info is not None:
            pulumi.set(__self__, "additional_address_info", additional_address_info)
        if additional_street_info is not None:
            pulumi.set(__self__, "additional_street_info", additional_street_info)
        if apartment is not None:
            pulumi.set(__self__, "apartment", apartment)
        if building is not None:
            pulumi.set(__self__, "building", building)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if fax is not None:
            pulumi.set(__self__, "fax", fax)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if po_box is not None:
            pulumi.set(__self__, "po_box", po_box)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if salutation is not None:
            pulumi.set(__self__, "salutation", salutation)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="additionalAddressInfo")
    def additional_address_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_address_info")

    @additional_address_info.setter
    def additional_address_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_address_info", value)

    @property
    @pulumi.getter(name="additionalStreetInfo")
    def additional_street_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_street_info")

    @additional_street_info.setter
    def additional_street_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_street_info", value)

    @property
    @pulumi.getter
    def apartment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apartment")

    @apartment.setter
    def apartment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apartment", value)

    @property
    @pulumi.getter
    def building(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "building")

    @building.setter
    def building(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "building", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def fax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fax")

    @fax.setter
    def fax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fax", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def mobile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mobile")

    @mobile.setter
    def mobile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "po_box")

    @po_box.setter
    def po_box(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "po_box", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def salutation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "salutation")

    @salutation.setter
    def salutation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "salutation", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_name")

    @street_name.setter
    def street_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_name", value)

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_number")

    @street_number.setter
    def street_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_number", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ChannelCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ChannelGeolocationArgs:
    def __init__(__self__, *,
                 coordinates: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(__self__, "coordinates", coordinates)

    @property
    @pulumi.getter
    def coordinates(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "coordinates")

    @coordinates.setter
    def coordinates(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "coordinates", value)


@pulumi.input_type
class CustomerGroupCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class DiscountCodeCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ProductDiscountValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 monies: Optional[pulumi.Input[Sequence[pulumi.Input['ProductDiscountValueMoneyArgs']]]] = None,
                 permyriad: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if monies is not None:
            pulumi.set(__self__, "monies", monies)
        if permyriad is not None:
            pulumi.set(__self__, "permyriad", permyriad)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def monies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductDiscountValueMoneyArgs']]]]:
        return pulumi.get(self, "monies")

    @monies.setter
    def monies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductDiscountValueMoneyArgs']]]]):
        pulumi.set(self, "monies", value)

    @property
    @pulumi.getter
    def permyriad(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "permyriad")

    @permyriad.setter
    def permyriad(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "permyriad", value)


@pulumi.input_type
class ProductDiscountValueMoneyArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str],
                 fraction_digits: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)
        if fraction_digits is not None:
            pulumi.set(__self__, "fraction_digits", fraction_digits)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)

    @property
    @pulumi.getter(name="fractionDigits")
    def fraction_digits(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fraction_digits")

    @fraction_digits.setter
    def fraction_digits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fraction_digits", value)


@pulumi.input_type
class ProductTypeAttributeArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[Mapping[str, Any]],
                 name: pulumi.Input[str],
                 type: pulumi.Input['ProductTypeAttributeTypeArgs'],
                 constraint: Optional[pulumi.Input[str]] = None,
                 input_hint: Optional[pulumi.Input[str]] = None,
                 input_tip: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 searchable: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if input_hint is not None:
            pulumi.set(__self__, "input_hint", input_hint)
        if input_tip is not None:
            pulumi.set(__self__, "input_tip", input_tip)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ProductTypeAttributeTypeArgs']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ProductTypeAttributeTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def constraint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "constraint")

    @constraint.setter
    def constraint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "constraint", value)

    @property
    @pulumi.getter(name="inputHint")
    def input_hint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_hint")

    @input_hint.setter
    def input_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_hint", value)

    @property
    @pulumi.getter(name="inputTip")
    def input_tip(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "input_tip")

    @input_tip.setter
    def input_tip(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "input_tip", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "searchable", value)


@pulumi.input_type
class ProductTypeAttributeTypeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 element_type2: Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']] = None,
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 type_reference: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeValueArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if element_type2 is not None:
            pulumi.set(__self__, "element_type2", element_type2)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if type_reference is not None:
            pulumi.set(__self__, "type_reference", type_reference)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ElementType2")
    def element_type2(self) -> Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']]:
        return pulumi.get(self, "element_type2")

    @element_type2.setter
    def element_type2(self, value: Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']]):
        pulumi.set(self, "element_type2", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter(name="typeReference")
    def type_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_reference")

    @type_reference.setter
    def type_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_reference", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2Args:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 type_reference: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2ValueArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if type_reference is not None:
            pulumi.set(__self__, "type_reference", type_reference)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter(name="typeReference")
    def type_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_reference")

    @type_reference.setter
    def type_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_reference", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2ValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2ValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2LocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2ValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProductTypeAttributeTypeLocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProductTypeAttributeTypeValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProjectSettingsCartsArgs:
    def __init__(__self__, *,
                 country_tax_rate_fallback_enabled: Optional[pulumi.Input[bool]] = None,
                 delete_days_after_last_modification: Optional[pulumi.Input[int]] = None):
        if country_tax_rate_fallback_enabled is not None:
            pulumi.set(__self__, "country_tax_rate_fallback_enabled", country_tax_rate_fallback_enabled)
        if delete_days_after_last_modification is not None:
            pulumi.set(__self__, "delete_days_after_last_modification", delete_days_after_last_modification)

    @property
    @pulumi.getter(name="countryTaxRateFallbackEnabled")
    def country_tax_rate_fallback_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "country_tax_rate_fallback_enabled")

    @country_tax_rate_fallback_enabled.setter
    def country_tax_rate_fallback_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "country_tax_rate_fallback_enabled", value)

    @property
    @pulumi.getter(name="deleteDaysAfterLastModification")
    def delete_days_after_last_modification(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delete_days_after_last_modification")

    @delete_days_after_last_modification.setter
    def delete_days_after_last_modification(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_days_after_last_modification", value)


@pulumi.input_type
class ProjectSettingsExternalOauthArgs:
    def __init__(__self__, *,
                 authorization_header: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if authorization_header is not None:
            pulumi.set(__self__, "authorization_header", authorization_header)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authorizationHeader")
    def authorization_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_header")

    @authorization_header.setter
    def authorization_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_header", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProjectSettingsMessagesArgs:
    def __init__(__self__, *,
                 delete_days_after_creation: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if delete_days_after_creation is not None:
            pulumi.set(__self__, "delete_days_after_creation", delete_days_after_creation)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="deleteDaysAfterCreation")
    def delete_days_after_creation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delete_days_after_creation")

    @delete_days_after_creation.setter
    def delete_days_after_creation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_days_after_creation", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ProjectSettingsShippingRateCartClassificationValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ShippingMethodCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ShippingZoneLocationArgs:
    def __init__(__self__, *,
                 country: pulumi.Input[str],
                 state: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "country", country)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ShippingZoneRateFreeAboveArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRatePriceArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 minimum_cent_amount: Optional[pulumi.Input[int]] = None,
                 price: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']] = None,
                 price_function: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceFunctionArgs']] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if minimum_cent_amount is not None:
            pulumi.set(__self__, "minimum_cent_amount", minimum_cent_amount)
        if price is not None:
            pulumi.set(__self__, "price", price)
        if price_function is not None:
            pulumi.set(__self__, "price_function", price_function)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="minimumCentAmount")
    def minimum_cent_amount(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_cent_amount")

    @minimum_cent_amount.setter
    def minimum_cent_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_cent_amount", value)

    @property
    @pulumi.getter
    def price(self) -> Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']]:
        return pulumi.get(self, "price")

    @price.setter
    def price(self, value: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']]):
        pulumi.set(self, "price", value)

    @property
    @pulumi.getter(name="priceFunction")
    def price_function(self) -> Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceFunctionArgs']]:
        return pulumi.get(self, "price_function")

    @price_function.setter
    def price_function(self, value: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceFunctionArgs']]):
        pulumi.set(self, "price_function", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierPriceArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierPriceFunctionArgs:
    def __init__(__self__, *,
                 currency_code: pulumi.Input[str],
                 function: pulumi.Input[str]):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "function", function)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)


@pulumi.input_type
class StoreCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class SubscriptionChangeArgs:
    def __init__(__self__, *,
                 resource_type_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "resource_type_ids", resource_type_ids)

    @property
    @pulumi.getter(name="resourceTypeIds")
    def resource_type_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "resource_type_ids")

    @resource_type_ids.setter
    def resource_type_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_type_ids", value)


@pulumi.input_type
class SubscriptionDestinationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_secret: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 queue_url: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_arn: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_secret is not None:
            pulumi.set(__self__, "access_secret", access_secret)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if queue_url is not None:
            pulumi.set(__self__, "queue_url", queue_url)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_arn is not None:
            pulumi.set(__self__, "topic_arn", topic_arn)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_secret")

    @access_secret.setter
    def access_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_secret", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_url")

    @queue_url.setter
    def queue_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_url", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class SubscriptionFormatArgs:
    def __init__(__self__, *,
                 cloud_events_version: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cloud_events_version is not None:
            pulumi.set(__self__, "cloud_events_version", cloud_events_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cloudEventsVersion")
    def cloud_events_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_events_version")

    @cloud_events_version.setter
    def cloud_events_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_events_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SubscriptionMessageArgs:
    def __init__(__self__, *,
                 resource_type_id: pulumi.Input[str],
                 types: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "resource_type_id", resource_type_id)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter(name="resourceTypeId")
    def resource_type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type_id")

    @resource_type_id.setter
    def resource_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type_id", value)

    @property
    @pulumi.getter
    def types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class TaxCategoryRateSubRateArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[float],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[float]:
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[float]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TypeFieldArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[Mapping[str, Any]],
                 name: pulumi.Input[str],
                 type: pulumi.Input['TypeFieldTypeArgs'],
                 input_hint: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if input_hint is not None:
            pulumi.set(__self__, "input_hint", input_hint)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TypeFieldTypeArgs']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TypeFieldTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="inputHint")
    def input_hint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_hint")

    @input_hint.setter
    def input_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_hint", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class TypeFieldTypeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 element_type2: Optional[pulumi.Input['TypeFieldTypeElementType2Args']] = None,
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeValueArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if element_type2 is not None:
            pulumi.set(__self__, "element_type2", element_type2)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ElementType2")
    def element_type2(self) -> Optional[pulumi.Input['TypeFieldTypeElementType2Args']]:
        return pulumi.get(self, "element_type2")

    @element_type2.setter
    def element_type2(self, value: Optional[pulumi.Input['TypeFieldTypeElementType2Args']]):
        pulumi.set(self, "element_type2", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TypeFieldTypeElementType2Args:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2ValueArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2ValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2ValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TypeFieldTypeElementType2LocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TypeFieldTypeElementType2ValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TypeFieldTypeLocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TypeFieldTypeValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


