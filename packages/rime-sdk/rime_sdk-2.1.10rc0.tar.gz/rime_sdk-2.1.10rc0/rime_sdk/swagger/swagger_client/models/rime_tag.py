# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeTag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'creation_time': 'datetime',
        'num_projects': 'str'
    }

    attribute_map = {
        'name': 'name',
        'creation_time': 'creationTime',
        'num_projects': 'numProjects'
    }

    def __init__(self, name=None, creation_time=None, num_projects=None):  # noqa: E501
        """RimeTag - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._creation_time = None
        self._num_projects = None
        self.discriminator = None
        self.name = name
        if creation_time is not None:
            self.creation_time = creation_time
        if num_projects is not None:
            self.num_projects = num_projects

    @property
    def name(self):
        """Gets the name of this RimeTag.  # noqa: E501

        Name of the Tag.  # noqa: E501

        :return: The name of this RimeTag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeTag.

        Name of the Tag.  # noqa: E501

        :param name: The name of this RimeTag.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def creation_time(self):
        """Gets the creation_time of this RimeTag.  # noqa: E501

        Creation time of the Workspace.  # noqa: E501

        :return: The creation_time of this RimeTag.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this RimeTag.

        Creation time of the Workspace.  # noqa: E501

        :param creation_time: The creation_time of this RimeTag.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def num_projects(self):
        """Gets the num_projects of this RimeTag.  # noqa: E501

        Number of Projects associated with the Workspace.  # noqa: E501

        :return: The num_projects of this RimeTag.  # noqa: E501
        :rtype: str
        """
        return self._num_projects

    @num_projects.setter
    def num_projects(self, num_projects):
        """Sets the num_projects of this RimeTag.

        Number of Projects associated with the Workspace.  # noqa: E501

        :param num_projects: The num_projects of this RimeTag.  # noqa: E501
        :type: str
        """

        self._num_projects = num_projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeTag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
