# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .compensation_pay_frequency import CompensationPayFrequency
from .compensation_pay_period import CompensationPayPeriod
from .compensation_type import CompensationType


class Compensation(pydantic.BaseModel):
    name: typing.Optional[str]
    type: typing.Optional[CompensationType]
    pay_period: typing.Optional[CompensationPayPeriod]
    pay_frequency: typing.Optional[CompensationPayFrequency]
    currency: typing.Optional[str]
    value: typing.Optional[str]
    min_value: typing.Optional[str]
    max_value: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
