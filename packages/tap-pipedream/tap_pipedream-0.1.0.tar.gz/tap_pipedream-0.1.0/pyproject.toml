[tool.poetry]
name = "tap-pipedream"
version = "0.1.0"
description = "`tap-pipedream` is a Singer tap for Pipedream, built with the Meltano SDK for Singer Taps."
license = "Apache-2.0"
authors = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
maintainers = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
readme = "README.md"
homepage = "https://github.com/edgarrmondragon/tap-pipedream"
repository = "https://github.com/edgarrmondragon/tap-pipedream"
documentation = "https://github.com/edgarrmondragon/tap-pipedream#readme"
keywords = [
  "ELT",
  "singer.io",
  "Pipedream",
]

[tool.poetry.dependencies]
python = "<3.12,>=3.8"
singer-sdk = "~=0.31.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"

[tool.isort]
profile = "black"
multi_line_output = 3 # Vertical Hanging Indent
use_parentheses = true
include_trailing_comma = true
src_paths = "tap_pipedream"
known_first_party = "tap_pipedream"
add_imports = [
  "from __future__ import annotations",
]

[tool.pytest.ini_options]
addopts = "-vvv"

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["backoff.*"]

[build-system]
build-backend = "poetry_dynamic_versioning.backend"
requires = [
  "poetry-core>=1",
  "poetry-dynamic-versioning",
]

[tool.poetry.scripts]
# CLI declaration
"tap-pipedream" = "tap_pipedream.tap:TapPipedream.cli"

[tool.poetry-dynamic-versioning]
enable = false
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}
    {%- endif -%}
"""
metadata = true
style = "pep440"
vcs = "git"

[tool.ruff]
ignore = [
  "ANN101", # missing-type-self
  "DJ", # flake8-django
]
line-length = 88
select = ["ALL"]
src = ["tap_pipedream", "tests"]
target-version = "py38"
unfixable = [
  "ERA001",  # commented-out-code
]

[tool.ruff.per-file-ignores]
"noxfile.py" = ["ANN"]
"tests/*" = [
  "ANN201", # missing-return-type-public-function
  "S101", # assert
  "SLF001", # private-member-access
]

[tool.ruff.isort]
known-first-party = ["tap_pipedream"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.pydocstyle]
convention = "google"
