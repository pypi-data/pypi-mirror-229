# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from .....core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.not_implemented_error import NotImplementedError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...types.candidate_email import CandidateEmail
from ...types.candidate_result import CandidateResult
from ...types.candidates_paginated import CandidatesPaginated
from ...types.note_result import NoteResult
from ...types.notes_paginated import NotesPaginated

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CandidatesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def ats_candidates_list(
        self,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> CandidatesPaginated:
        """
        Parameters:
            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "unified/ats/candidates"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidatesPaginated, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def ats_candidate_post(
        self,
        *,
        name: str,
        first_name: str,
        last_name: str,
        emails: typing.List[CandidateEmail],
        phone: typing.Optional[str] = OMIT,
        company: typing.Optional[str] = OMIT,
        title: str,
        application_ids: typing.Optional[typing.List[str]] = OMIT,
    ) -> CandidateResult:
        """
        Parameters:
            - name: str.

            - first_name: str.

            - last_name: str.

            - emails: typing.List[CandidateEmail].

            - phone: typing.Optional[str].

            - company: typing.Optional[str].

            - title: str.

            - application_ids: typing.Optional[typing.List[str]].
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "first_name": first_name,
            "last_name": last_name,
            "emails": emails,
            "title": title,
        }
        if phone is not OMIT:
            _request["phone"] = phone
        if company is not OMIT:
            _request["company"] = company
        if application_ids is not OMIT:
            _request["application_ids"] = application_ids
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "unified/ats/candidates"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidateResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def ats_candidates_get(
        self,
        id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> CandidateResult:
        """
        Parameters:
            - id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidateResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def ats_candidate_patch(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        emails: typing.Optional[typing.List[CandidateEmail]] = OMIT,
        phone: typing.Optional[str] = OMIT,
        company: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        application_ids: typing.Optional[typing.List[str]] = OMIT,
    ) -> CandidateResult:
        """
        Parameters:
            - id: str.

            - name: typing.Optional[str].

            - first_name: typing.Optional[str].

            - last_name: typing.Optional[str].

            - emails: typing.Optional[typing.List[CandidateEmail]].

            - phone: typing.Optional[str].

            - company: typing.Optional[str].

            - title: typing.Optional[str].

            - application_ids: typing.Optional[typing.List[str]].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if first_name is not OMIT:
            _request["first_name"] = first_name
        if last_name is not OMIT:
            _request["last_name"] = last_name
        if emails is not OMIT:
            _request["emails"] = emails
        if phone is not OMIT:
            _request["phone"] = phone
        if company is not OMIT:
            _request["company"] = company
        if title is not OMIT:
            _request["title"] = title
        if application_ids is not OMIT:
            _request["application_ids"] = application_ids
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidateResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def notes_list(
        self,
        id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> NotesPaginated:
        """
        Parameters:
            - id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}/notes"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NotesPaginated, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def notes_get(
        self,
        id: str,
        sub_resource_id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> NoteResult:
        """
        Parameters:
            - id: str.

            - sub_resource_id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}/notes/{sub_resource_id}"
            ),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoteResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCandidatesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def ats_candidates_list(
        self,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> CandidatesPaginated:
        """
        Parameters:
            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "unified/ats/candidates"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidatesPaginated, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def ats_candidate_post(
        self,
        *,
        name: str,
        first_name: str,
        last_name: str,
        emails: typing.List[CandidateEmail],
        phone: typing.Optional[str] = OMIT,
        company: typing.Optional[str] = OMIT,
        title: str,
        application_ids: typing.Optional[typing.List[str]] = OMIT,
    ) -> CandidateResult:
        """
        Parameters:
            - name: str.

            - first_name: str.

            - last_name: str.

            - emails: typing.List[CandidateEmail].

            - phone: typing.Optional[str].

            - company: typing.Optional[str].

            - title: str.

            - application_ids: typing.Optional[typing.List[str]].
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "first_name": first_name,
            "last_name": last_name,
            "emails": emails,
            "title": title,
        }
        if phone is not OMIT:
            _request["phone"] = phone
        if company is not OMIT:
            _request["company"] = company
        if application_ids is not OMIT:
            _request["application_ids"] = application_ids
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "unified/ats/candidates"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidateResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def ats_candidates_get(
        self,
        id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> CandidateResult:
        """
        Parameters:
            - id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidateResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def ats_candidate_patch(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        emails: typing.Optional[typing.List[CandidateEmail]] = OMIT,
        phone: typing.Optional[str] = OMIT,
        company: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        application_ids: typing.Optional[typing.List[str]] = OMIT,
    ) -> CandidateResult:
        """
        Parameters:
            - id: str.

            - name: typing.Optional[str].

            - first_name: typing.Optional[str].

            - last_name: typing.Optional[str].

            - emails: typing.Optional[typing.List[CandidateEmail]].

            - phone: typing.Optional[str].

            - company: typing.Optional[str].

            - title: typing.Optional[str].

            - application_ids: typing.Optional[typing.List[str]].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if first_name is not OMIT:
            _request["first_name"] = first_name
        if last_name is not OMIT:
            _request["last_name"] = last_name
        if emails is not OMIT:
            _request["emails"] = emails
        if phone is not OMIT:
            _request["phone"] = phone
        if company is not OMIT:
            _request["company"] = company
        if title is not OMIT:
            _request["title"] = title
        if application_ids is not OMIT:
            _request["application_ids"] = application_ids
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CandidateResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def notes_list(
        self,
        id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> NotesPaginated:
        """
        Parameters:
            - id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}/notes"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NotesPaginated, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def notes_get(
        self,
        id: str,
        sub_resource_id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
    ) -> NoteResult:
        """
        Parameters:
            - id: str.

            - sub_resource_id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"unified/ats/candidates/{id}/notes/{sub_resource_id}"
            ),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoteResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
