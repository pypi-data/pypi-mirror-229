# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['IDENTITY_SYNONYMS', 'register', 'register_synonyms', 'pollute_globals', 'isany', 'passable', 'IdentityWarning',
           'identity']

# %% ../nbs/00_core.ipynb 4
from typing import (Any, Tuple, Optional)
import warnings

# %% ../nbs/00_core.ipynb 7
def register(registry: dict, name: Optional[str] = None) -> callable:
    '''Register an alias for a function
    
    Parameters
    ----------
    name : str, default: `func.__name__`
        The name of the callable to register. Defaults to the decorated function.

    Returns
    -------
    callable
        The decorated function
    '''
    def decorator(func: callable) -> callable:
        nonlocal name
        name = name or func.__name__
        registry[name] = func
        return func
    return decorator

# %% ../nbs/00_core.ipynb 9
def register_synonyms(registry: dict, synonyms: Optional[set] = None) -> callable:
    '''Register a set of synonyms for a function
    
    Parameters
    ----------
    synonyms : Optional[set]
        The synonyms of the function to register

    Returns
    -------
    callable
        The function to be decorated
    '''    
    def decorator(func: callable) -> callable:
        nonlocal synonyms
        synonyms = synonyms or {func.__name__}
        for syn in synonyms:
            register(registry=registry, name=syn)(func)        
        return func
    return decorator

# %% ../nbs/00_core.ipynb 11
def pollute_globals(synonyms: set, __globals: Optional[dict] = None) -> callable:
    '''Register a set of synonyms for a function to globals()
    
    Parameters
    ----------
    synonyms : set
        The synonyms of the function to register

    Returns
    -------
    callable
        The decorated function
    '''    
    if __globals is None: __globals = globals()
    def decorator(func: callable) -> callable:   
        register_synonyms(registry=__globals, synonyms=synonyms)(func)        
        return func
    return decorator

# %% ../nbs/00_core.ipynb 13
@pollute_globals({'anyq', 'notnone', 'isthing', 'something', 'isanything',})
def isany(x, *args, **kwargs) -> bool:
    '''Returns whether or not x is not None.
    
    Parameters
    ----------
    *args : tuple, optional
        Any number of arguments, all of which are returned.        
    **kwargs : dict, optional
        Extra arguments, all of which are returned.

    Notes
    -----
    This function is useful for testing purposes.
    It also is handy as a default callable for methods which require a callable.

    Returns
    -------
    flag : bool
        Whether or not x is not None.

    Examples
    --------
    >>> isany(1)
    >>> True
    '''
    return x != None

# %% ../nbs/00_core.ipynb 15
def passable(*args, **kwargs) -> (Tuple[Any, ...], dict):
    '''Returns all arguments and keyword arguments passed to it as they are.
    
    Parameters
    ----------
    *args : tuple, optional
        Any number of arguments, all of which are returned.        
    **kwargs : dict, optional
        Extra arguments, all of which are returned.

    Notes
    -----
    This function is useful for testing purposes.
    It also is handy as a default callable for methods which require a callable.

    Returns
    -------
    *args : Tuple[Any, ...]
    kwargs : dict

    Examples
    --------
    >>> *args, kwargs = passable(1,2,3, a=2)
    >>> args, kwargs
    >>> ([1, 2, 3], {'a': 2})
    '''
    return *args, kwargs

# %% ../nbs/00_core.ipynb 18
IDENTITY_SYNONYMS = {
    'noc', 'echo', 'iden', 'idfn', 
    'nada', 'noop', 'nodo', 'same',
    'nomod', 'idfunc', 'nocall', 'mirror',
    'reflect', 'giveback', 'keepsame', 'donothing'
}

# %% ../nbs/00_core.ipynb 20
class IdentityWarning(UserWarning):
    '''A warning to be raised when an identity function is called with arguments.'''
    source: Optional[str] = None
    stacklevel: int = 3

    def __init__(self, *args, **kwargs):
        super().__init__(*args)
        
        self.warn = kwargs.get('warn', False)
    
        self.has_args = bool(args)
        self.has_kwds = bool(kwargs)
        self.n_args = len(args)
        self.n_kwds = len(kwargs)

    def makemsg(self) -> str:
        msg = ''
        if self.has_args:
            msg += f'The identity function does not expect args but recieved `{self.n_args}` *args.'

        if self.has_kwds:
            if self.has_args: 
                msg += ' '
            msg += f'The identity function does not expect kwargs but recieved `{self.n_kwds}` **kwargs.'
        return msg

    @property
    def dowarn(self):
        return self.warn and (self.has_args or self.has_kwds)

    def __call__(self):
        cls = type(self)
        if self.dowarn: 
            message = self.makemsg()
            warnings.warn(message, cls, stacklevel=cls.stacklevel, source=cls.source)
        return self    

# %% ../nbs/00_core.ipynb 22
@pollute_globals(IDENTITY_SYNONYMS)
def identity(x: Any, *args, **kwargs) -> Any:
    '''Identity function
    
    Parameters
    ----------
    x : Any
        Any object

    Other Parameters
    ----------------
    *args : tuple, optional
        Any number of arguments, all of which are ignored.        
    **kwargs : dict, optional
        Extra arguments, all of which are ignored.
    
    Returns
    -------
    Any

    Notes
    -----
    This function is useful for testing purposes.
    It also is handy as a default callable for methods which require a callable.

    See Also
    --------
    noc : Alias for identity (No Callable)
    echo : Alias for identity
    iden : Alias for identity
    idfn : Alias for identity (IDentity FuNction)
    nada : Alias for identity
    noop : Alias for identity (NO OPeration)
    nodo : Alias for identity (NO DO)
    same : Alias for identity
    nomod : Alias for identity (NO MODification)
    idfunc : Alias for identity (IDentity FUNCtion)
    nocall : Alias for identity (NO CALLable)
    mirror : Alias for identity 
    reflect : Alias for identity
    giveback : Alias for identity
    keepsame : Alias for identity
    donothing : Alias for identity
    
    Examples
    --------
    >>> identity(1)
    1
    >>> identity('a')
    'a'
    >>> identity([1,2,3])
    [1, 2, 3]
    '''
    IdentityWarning(*args, **kwargs)()
    return x
