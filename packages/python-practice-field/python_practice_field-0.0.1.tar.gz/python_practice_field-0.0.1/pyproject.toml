[tool.poetry]
name = "python-practice-field"
version = "0.0.1"
description = ""
authors = ["alexnazarv <alexnazarv@gmail.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "~3.10"
fastapi = "^0.101.0"
uvicorn = {extras = ["standard"], version = "0.23.2"}

[tool.poetry.group.dev.dependencies]
flake8 = "^6.1.0"
isort = "^5.12.0"
wemake-python-styleguide = "^0.18.0"

[tool.poetry.group.semantic_release.dependencies]
python-semantic-release = "^8.0.8"

[tool.poetry.group.mypy.dependencies]
mypy = "1.5.1"

[tool.poetry.group.test.dependencies]
httpx = "^0.24.1"
pre-commit = "3.4.0"
pytest = "7.4.0"
pytest-cov = "4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-ra",
]
minversion = "6.0"
testpaths = ["tests"]
console_output_style = "progress"
faulthandler_timeout=1

[tool.mypy]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
no_implicit_reexport = true
local_partial_types = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
explicit_package_bases = true
disallow_untyped_defs = true
exclude = "tests/"

[tool.isort]
py_version = 310
line_length = 120
profile = "wemake"
extend_skip = [".md"]
skip_glob = [".github/*"]
extend_skip_glob = ["Dockerfile"]
skip_gitignore = true
src_paths = ["app", "tests"]

[tool.coverage]
    [tool.coverage.report]
    show_missing = true
    exclude_lines = [
        # Have to re-enable the standard pragma
        'pragma: no cover',

        # Don't complain about missing debug-only code:
        'def __repr__',
        'if self\.debug',

        # Don't complain if tests don't hit defensive assertion code:
        'raise AssertionError',
        'raise NotImplementedError',

        # Don't complain if non-runnable code isn't run:
        'if 0:',
        'if __name__ == .__main__.:',
        'if TYPE_CHECKING:',
    ]
    omit = [
        'env/*',
        'venv/*',
        '.venv/*',
        '*/virtualenv/*',
        '*/virtualenvs/*',
        '*/tests/*'
    ]

[tool.semantic_release]
assets = []
version_toml = ["pyproject.toml:tool.poetry.version"]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.prerelease]
match = "(prerelease|dev)"
prerelease_token = "rc"
prerelease = true

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
