# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class JobPostingEmploymentType(str, enum.Enum):
    PERMANENT = "permanent"
    CONTRACTOR = "contractor"
    INTERN = "intern"
    APPRENTICE = "apprentice"
    FREELANCE = "freelance"
    TEMPORARY = "temporary"
    SEASONAL = "seasonal"
    VOLUNTEER = "volunteer"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        permanent: typing.Callable[[], T_Result],
        contractor: typing.Callable[[], T_Result],
        intern: typing.Callable[[], T_Result],
        apprentice: typing.Callable[[], T_Result],
        freelance: typing.Callable[[], T_Result],
        temporary: typing.Callable[[], T_Result],
        seasonal: typing.Callable[[], T_Result],
        volunteer: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is JobPostingEmploymentType.PERMANENT:
            return permanent()
        if self is JobPostingEmploymentType.CONTRACTOR:
            return contractor()
        if self is JobPostingEmploymentType.INTERN:
            return intern()
        if self is JobPostingEmploymentType.APPRENTICE:
            return apprentice()
        if self is JobPostingEmploymentType.FREELANCE:
            return freelance()
        if self is JobPostingEmploymentType.TEMPORARY:
            return temporary()
        if self is JobPostingEmploymentType.SEASONAL:
            return seasonal()
        if self is JobPostingEmploymentType.VOLUNTEER:
            return volunteer()
        if self is JobPostingEmploymentType.UNMAPPED_VALUE:
            return unmapped_value()
