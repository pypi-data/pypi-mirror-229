# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class JobStatusEnumValue(str, enum.Enum):
    PUBLISHED = "published"
    DRAFT = "draft"
    PENDING = "pending"
    INTERNAL = "internal"
    ARCHIVED = "archived"
    CLOSED = "closed"
    OPEN = "open"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        published: typing.Callable[[], T_Result],
        draft: typing.Callable[[], T_Result],
        pending: typing.Callable[[], T_Result],
        internal: typing.Callable[[], T_Result],
        archived: typing.Callable[[], T_Result],
        closed: typing.Callable[[], T_Result],
        open: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is JobStatusEnumValue.PUBLISHED:
            return published()
        if self is JobStatusEnumValue.DRAFT:
            return draft()
        if self is JobStatusEnumValue.PENDING:
            return pending()
        if self is JobStatusEnumValue.INTERNAL:
            return internal()
        if self is JobStatusEnumValue.ARCHIVED:
            return archived()
        if self is JobStatusEnumValue.CLOSED:
            return closed()
        if self is JobStatusEnumValue.OPEN:
            return open()
        if self is JobStatusEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
