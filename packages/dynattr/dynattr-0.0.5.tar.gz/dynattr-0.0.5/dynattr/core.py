# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['ClassAttributeError', 'DynamicAttributeError', 'DynamicAttributesMixin']

# %% ../nbs/00_core.ipynb 4
from atyp import ClsBool, AnyQ, StrQ, CallQ, DictQ, ClsCallQ, ClsListQ, ListQ
from typing import Callable

# %% ../nbs/00_core.ipynb 5
from ispec import kwsadd
from ispec.dec import optclsattr

# %% ../nbs/00_core.ipynb 7
class ClassAttributeError(AttributeError):
    '''Exception for non-existent class attributes.'''
    def __init__(self, cls: type, attr: StrQ = None):
        msg = f'{cls.__name__} does not have a class variable named {attr}'
        super().__init__(msg)

class DynamicAttributeError(AttributeError):
    '''Exception for invalid dynamic attributes.'''
    def __init__(self, cls: type, attr: StrQ = None):
        msg = (
            f'The dynamic attribute specified by `{cls.__name__}.{attr}`'
            f'is `None`, expected a string.'
        )
        super().__init__(msg)

# %% ../nbs/00_core.ipynb 9
class DynamicAttributesMixin:
    '''Mixin for dynamic attribute management.
    
    Attributes
    ----------
    dynattrs : list
        List of dynamic attributes to check.
    raisedynerr : bool, default: False
        Whether to raise an error if dynamic attributes are not found.
    totypename : Callable, default: None
        Function to convert an attribute name to its class name e.g. `attr` -> `ATTR`.
    toinstname : Callable, default: None
        Function to convert an attribute name to its instance name e.g. `attr` -> `_attr`.
    '''
    # List of dynamic attributes to check
    dynattrs: ClsListQ = []
    # Whether to raise an error if dynamic attribtues are not found
    raisedynerr: ClsBool = False
    # The function to convert an attribute name to it's instance name e.g. `attr` -> `ATTR`
    totypename: ClsCallQ = None
    # The function to convert an attribute name to it's instance name e.g. `attr` -> `_attr`
    toinstname: ClsCallQ = None
    
    
    def check_dynattr_err(self, dattr: StrQ = None) -> None:
        '''Check if dynamic attribute is valid.
        
        Parameters
        ----------
        dattr : str, None
            Dynamic attribute name to check.
            
        Raises
        ------
        DynamicAttributeError
            If the attribute is invalid and `raisedynerr` is True.
        '''
        name = getattr(self, (dattr or ''), None)
        if name is None and type(self).raisedynerr:
            raise DynamicAttributeError(type(self), dattr)
            

    def getattrname(self, dattr: str) -> StrQ:
        '''
        Get the name of the dynamic attribute.
        
        Parameters
        ----------
        dattr : str
            The name of the dynamic attribute.
            
        Returns
        -------
        name : str, None
            The name of the dynamic attribute.
        '''
        self.check_dynattr_err(dattr)
        return getattr(self, dattr, None)
        
    def getdynattr(self, dattr: str, default: AnyQ = None) -> StrQ:
        '''get dynamic attribute'''
        attr = self.getattrname(dattr)
        return getattr(self, attr, default) if attr else default

    def setdynattr(self, dattr: str, val: AnyQ = None):
        '''set dynamic attribute'''
        attr = self.getattrname(dattr)
        if attr is None: return
        setattr(self, attr, val)

    def setdynattrs(self, dattrs: ListQ = None, **kwargs):
        dattrs = dattrs or type(self).dynattrs
        for dattr in dattrs:
            aname = self.getattrname(dattr)
            value = kwargs.get(aname, None) or self.getdynattr(dattr, None)
            self.setdynattr(dattr, value)

    @classmethod
    def kwsadd(kws: DictQ = None, **kwargs) -> dict:    
        '''add missing kwargs to `kws`'''
        return kwsadd(kws, **kwargs)

    @classmethod
    def givedynattr(cls, dattr: str, default: AnyQ = None, **kwargs):
        aname = kwargs.get(dattr, getattr(cls, dattr))
        kwargs[aname] = kwargs.get(aname, default)
        return kwargs
    
    @classmethod
    def givedynattrs(cls, dattrs: ListQ = None, **kwargs):
        dattrs = dattrs or cls.dynattrs
        for dattr in dattrs:
            kwargs = cls.givedynattr(dattr, **kwargs)
        return kwargs

    @classmethod
    def getclsattr(cls, attr: str, default: AnyQ = None):
        '''get class attribute'''
        if not hasattr(cls, attr):
            raise ClassAttributeError(cls, attr)
        return getattr(cls, attr, default)
    
    @classmethod
    def setclsattr(cls, attr: str, val: AnyQ = None):
        '''set class attribute'''
        if not hasattr(cls, attr): return
        setattr(cls, attr, val)        

    @optclsattr('toinstname')
    @optclsattr('totypename')
    def getinstclsattr(self, attr: str, toinstname: CallQ = None, totypename: CallQ = None) -> AnyQ:
        '''getattr for instance and class attributes that share the same name'''        
        instattr, typeattr = f'{attr}', f'{attr}'
        if isinstance(toinstname, Callable): 
            instattr = toinstname(attr)
        if isinstance(totypename, Callable): 
            typeattr = totypename(attr)        
        return getattr(self, instattr, self.getclsattr(typeattr))
