# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from inspect import getfullargspec
from typing import List

from pydantic import BaseModel, conlist

from gretel_client.rest_v1.models.artifact import Artifact


class SearchArtifactsResponse(BaseModel):
    """
    SearchArtifactsResponse
    """

    artifacts: conlist(Artifact) = ...
    __properties = ["artifacts"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchArtifactsResponse:
        """Create an instance of SearchArtifactsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["artifacts"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchArtifactsResponse:
        """Create an instance of SearchArtifactsResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SearchArtifactsResponse.parse_obj(obj)

        _obj = SearchArtifactsResponse.parse_obj(
            {
                "artifacts": [
                    Artifact.from_dict(_item) for _item in obj.get("artifacts")
                ]
                if obj.get("artifacts") is not None
                else None
            }
        )
        return _obj
