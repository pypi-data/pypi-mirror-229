"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Address(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADDRESS_LINE1_FIELD_NUMBER: builtins.int
    ADDRESS_LINE2_FIELD_NUMBER: builtins.int
    SUBURB_FIELD_NUMBER: builtins.int
    CITY_FIELD_NUMBER: builtins.int
    PROVINCE_FIELD_NUMBER: builtins.int
    POSTAL_CODE_FIELD_NUMBER: builtins.int
    COUNTRY_FIELD_NUMBER: builtins.int
    LATITUDE_FIELD_NUMBER: builtins.int
    LONGITUDE_FIELD_NUMBER: builtins.int
    address_line1: builtins.str
    address_line2: builtins.str
    suburb: builtins.str
    city: builtins.str
    province: builtins.str
    postal_code: builtins.str
    country: builtins.str
    latitude: builtins.float
    """The latitude in degrees. It must be in the range [-90.0, +90.0]."""
    longitude: builtins.float
    """The longitude in degrees. It must be in the range [-180.0, +180.0]."""
    def __init__(
        self,
        *,
        address_line1: builtins.str = ...,
        address_line2: builtins.str | None = ...,
        suburb: builtins.str = ...,
        city: builtins.str = ...,
        province: builtins.str | None = ...,
        postal_code: builtins.str | None = ...,
        country: builtins.str = ...,
        latitude: builtins.float | None = ...,
        longitude: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_address_line2", b"_address_line2", "_latitude", b"_latitude", "_longitude", b"_longitude", "_postal_code", b"_postal_code", "_province", b"_province", "address_line2", b"address_line2", "latitude", b"latitude", "longitude", b"longitude", "postal_code", b"postal_code", "province", b"province"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_address_line2", b"_address_line2", "_latitude", b"_latitude", "_longitude", b"_longitude", "_postal_code", b"_postal_code", "_province", b"_province", "address_line1", b"address_line1", "address_line2", b"address_line2", "city", b"city", "country", b"country", "latitude", b"latitude", "longitude", b"longitude", "postal_code", b"postal_code", "province", b"province", "suburb", b"suburb"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_address_line2", b"_address_line2"]) -> typing_extensions.Literal["address_line2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_latitude", b"_latitude"]) -> typing_extensions.Literal["latitude"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_longitude", b"_longitude"]) -> typing_extensions.Literal["longitude"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_postal_code", b"_postal_code"]) -> typing_extensions.Literal["postal_code"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_province", b"_province"]) -> typing_extensions.Literal["province"] | None: ...

global___Address = Address
