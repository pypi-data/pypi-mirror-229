# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class InterviewStatusEnumValue(str, enum.Enum):
    SCHEDULED = "scheduled"
    COMPLETED = "completed"
    CANCELLED = "cancelled"
    PENDING_FEEDBACK = "pending_feedback"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        scheduled: typing.Callable[[], T_Result],
        completed: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
        pending_feedback: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is InterviewStatusEnumValue.SCHEDULED:
            return scheduled()
        if self is InterviewStatusEnumValue.COMPLETED:
            return completed()
        if self is InterviewStatusEnumValue.CANCELLED:
            return cancelled()
        if self is InterviewStatusEnumValue.PENDING_FEEDBACK:
            return pending_feedback()
        if self is InterviewStatusEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
