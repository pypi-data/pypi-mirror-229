# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .country_code_enum import CountryCodeEnum
from .location_type_enum import LocationTypeEnum


class Location(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description="The unique ID of the location")
    employee_id: typing.Optional[str] = pydantic.Field(description="The employee ID")
    name: typing.Optional[str] = pydantic.Field(description="The name of the location")
    phone_number: typing.Optional[str] = pydantic.Field(description="The phone number of the location")
    street_1: typing.Optional[str] = pydantic.Field(description="The first line of the address")
    street_2: typing.Optional[str] = pydantic.Field(description="The second line of the address")
    city: typing.Optional[str] = pydantic.Field(description="The city where the location is situated")
    state: typing.Optional[str] = pydantic.Field(description="The state where the location is situated")
    zip_code: typing.Optional[str] = pydantic.Field(description="The ZIP code/Postal code of the location")
    country: typing.Optional[CountryCodeEnum] = pydantic.Field(description="The country code")
    location_type: typing.Optional[LocationTypeEnum] = pydantic.Field(description="The location type")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
