# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .employee_custom_field_type_enum import EmployeeCustomFieldTypeEnum


class EmployeeCustomFields(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(
        description="The unique identifier for the custom field, which defaults to the name property if the ID is not accessible."
    )
    name: typing.Optional[str] = pydantic.Field(description="The name of the custom field.")
    description: typing.Optional[str] = pydantic.Field(description="The description of the custom field.")
    type: typing.Optional[EmployeeCustomFieldTypeEnum] = pydantic.Field(description="The type of the custom field.")
    value: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="The value associated with the custom field."
    )
    value_id: typing.Optional[str] = pydantic.Field(
        description="The unique identifier for the value of the custom field."
    )
    options: typing.Optional[typing.List[str]] = pydantic.Field(
        description="An array of possible options for the custom field."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
