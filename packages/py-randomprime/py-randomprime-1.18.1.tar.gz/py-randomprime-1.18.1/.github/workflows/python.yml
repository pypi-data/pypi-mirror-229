name: Python Package

on:
  pull_request:
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'macos-12'
          - 'windows-latest'

    runs-on: ${{ matrix.os }}
    name: Wheel for ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
            
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: powerpc-unknown-linux-gnu
          override: true
     
      - uses: Swatinem/rust-cache@v2
      
      - name: Install Python packages
        run: python -m pip install --upgrade build cibuildwheel==2.2.0a1

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD: 'cp37-*'
          CIBW_SKIP: '*-win32'

      - name: build sdist
        run: python -m build --sdist
        if: ${{ matrix.os == 'macos-12' }}

      - name: Check if there are changes
        run: git diff --exit-code

      - name: Store the packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist

  linux-build:
    runs-on: ubuntu-latest
    container: ghcr.io/pyca/cryptography-manylinux2014:x86_64
    name: Wheel for Linux
    env:
      RUSTUP_HOME: /root/.rustup

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Avoid issues with Git's solution for CVE-2022-24765 breaking setuptools-scm
        run: git config --global --add safe.directory $(pwd)

      - run: rustup target add --toolchain stable powerpc-unknown-linux-gnu
      - uses: Swatinem/rust-cache@v2
      - run: /opt/python/cp37-cp37m/bin/python -m venv .venv
     
      - name: Update pip
        run: .venv/bin/python -m pip install --upgrade pip

      - name: Install Python packages
        run: .venv/bin/python -m pip install --upgrade build auditwheel

      - name: build wheel
        run: .venv/bin/python -m build --wheel

      - name: multilinux stuff
        run: |
          .venv/bin/python -m auditwheel repair --plat manylinux2014_x86_64 dist/*-linux_x86_64.whl -w dist
          rm dist/*-linux_x86_64.whl

      - name: Check if there are changes
        run: git diff --exit-code

      - name: Store the packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist

  test:
    needs:
      - build
      - linux-build
      
    runs-on: ${{ matrix.os.image }}
    name: ${{ matrix.os.name }} - Test Python ${{ matrix.python }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - {name: 'macOS', image: 'macos-latest', wheel: 'macosx_*'}
          - {name: 'Windows', image: 'windows-latest', wheel: 'win_amd64'}
          - {name: 'Linux', image: 'ubuntu-latest', wheel: 'manylinux_2_17_x86_64.manylinux2014_x86_64'}
        python:

          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
            
      - name: Install Python packages
        run: python -m pip install --upgrade pip pytest

      - name: install built wheel
        run: python -m pip install dist/*-${{ matrix.os.wheel }}.whl
        shell: bash

      - name: test
        run: python -m pytest
        working-directory: test

  pypi:
    runs-on: 'ubuntu-latest'
    needs:
      - test

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish ðŸ“¦ to TestPyPI
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.testpypi_password }}
          repository_url: https://test.pypi.org/legacy/
      
      - name: Publish ðŸ“¦ to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_password }}
