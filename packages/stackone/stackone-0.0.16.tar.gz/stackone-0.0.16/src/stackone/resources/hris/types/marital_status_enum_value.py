# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class MaritalStatusEnumValue(str, enum.Enum):
    SINGLE = "single"
    MARRIED = "married"
    COMMON_LAW = "common_law"
    DIVORCED = "divorced"
    WIDOWED = "widowed"
    DOMESTIC_PARTNERSHIP = "domestic_partnership"
    SEPARATED = "separated"
    OTHER = "other"
    NOT_DISCLOSED = "not_disclosed"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        single: typing.Callable[[], T_Result],
        married: typing.Callable[[], T_Result],
        common_law: typing.Callable[[], T_Result],
        divorced: typing.Callable[[], T_Result],
        widowed: typing.Callable[[], T_Result],
        domestic_partnership: typing.Callable[[], T_Result],
        separated: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
        not_disclosed: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is MaritalStatusEnumValue.SINGLE:
            return single()
        if self is MaritalStatusEnumValue.MARRIED:
            return married()
        if self is MaritalStatusEnumValue.COMMON_LAW:
            return common_law()
        if self is MaritalStatusEnumValue.DIVORCED:
            return divorced()
        if self is MaritalStatusEnumValue.WIDOWED:
            return widowed()
        if self is MaritalStatusEnumValue.DOMESTIC_PARTNERSHIP:
            return domestic_partnership()
        if self is MaritalStatusEnumValue.SEPARATED:
            return separated()
        if self is MaritalStatusEnumValue.OTHER:
            return other()
        if self is MaritalStatusEnumValue.NOT_DISCLOSED:
            return not_disclosed()
        if self is MaritalStatusEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
