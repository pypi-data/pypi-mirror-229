# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CompensationType(str, enum.Enum):
    SALARY = "salary"
    HOURLY = "hourly"
    COMMISSION = "commission"
    BONUS = "bonus"
    EQUITY = "equity"
    OTHER = "other"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        salary: typing.Callable[[], T_Result],
        hourly: typing.Callable[[], T_Result],
        commission: typing.Callable[[], T_Result],
        bonus: typing.Callable[[], T_Result],
        equity: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CompensationType.SALARY:
            return salary()
        if self is CompensationType.HOURLY:
            return hourly()
        if self is CompensationType.COMMISSION:
            return commission()
        if self is CompensationType.BONUS:
            return bonus()
        if self is CompensationType.EQUITY:
            return equity()
        if self is CompensationType.OTHER:
            return other()
        if self is CompensationType.UNMAPPED_VALUE:
            return unmapped_value()
