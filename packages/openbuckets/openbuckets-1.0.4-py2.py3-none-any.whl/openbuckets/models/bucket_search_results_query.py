# coding: utf-8

"""
    OpenBuckets API

    The OpenBuckets web-based tool is a powerful utility that allows users to quickly locate open buckets in cloud storage systems through a simple query. In addition, it provides a convenient way to search for various file types across these open buckets, making it an essential tool for security professionals, researchers, and anyone interested in discovering exposed data. This Postman collection aims to showcase the capabilities of OpenBuckets by providing a set of API requests that demonstrate how to leverage its features. By following this collection, you'll learn how to utilize OpenBuckets to identify open buckets and search for specific file types within them.

    The version of the OpenAPI document: 1.0.0
    Contact: support@openbuckets.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class BucketSearchResultsQuery(BaseModel):
    """
    The query parameters used for the search.
    """
    direction: Optional[StrictStr] = Field(None, description="The sort direction.")
    exact: Optional[StrictBool] = Field(None, description="Whether the search is an exact match.")
    keywords: Optional[StrictStr] = Field(None, description="The keywords used for the search.")
    limit: Optional[StrictInt] = Field(None, description="The maximum number of results to return.")
    order: Optional[StrictStr] = Field(None, description="The field by which to order the results.")
    start: Optional[StrictInt] = Field(None, description="The starting index for the results.")
    type: Optional[StrictStr] = Field(None, description="The type of cloud provider.")
    __properties = ["direction", "exact", "keywords", "limit", "order", "start", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BucketSearchResultsQuery:
        """Create an instance of BucketSearchResultsQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BucketSearchResultsQuery:
        """Create an instance of BucketSearchResultsQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BucketSearchResultsQuery.parse_obj(obj)

        _obj = BucketSearchResultsQuery.parse_obj({
            "direction": obj.get("direction"),
            "exact": obj.get("exact"),
            "keywords": obj.get("keywords"),
            "limit": obj.get("limit"),
            "order": obj.get("order"),
            "start": obj.get("start"),
            "type": obj.get("type")
        })
        return _obj


