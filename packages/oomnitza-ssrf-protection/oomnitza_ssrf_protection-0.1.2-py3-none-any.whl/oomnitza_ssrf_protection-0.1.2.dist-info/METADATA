Metadata-Version: 2.1
Name: oomnitza-ssrf-protection
Version: 0.1.2
Summary: Contains reusable logic to apply Oomnitza ssrf protection.
Home-page: https://bitbucket.org/oomnitza/oomnitza-ssrf-protection
Author: Oomnitza, Andrei Liauchuk and others
Author-email: andrei.liauchuk@oomnitza.com
License: MIT
Keywords: oomnitza
Platform: unix
Platform: linux
Platform: osx
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiodns ==3.0.0
Requires-Dist: pycares ==4.2.2
Provides-Extra: tests
Requires-Dist: pytest >=3 ; extra == 'tests'
Requires-Dist: pytest-lazy-fixture >=0.6.3 ; extra == 'tests'
Requires-Dist: pytest-cov >=2 ; extra == 'tests'
Requires-Dist: pytest-aiohttp >=0.3.0 ; extra == 'tests'

# Oomnitza SSRF Protection

Package contains reusable logic to apply Oomnitza SSRF protection.

### Overview

The SSRF Protector library is a Python library designed to protect
against Server-Side Request Forgery (SSRF) attacks. 
SecuritySSRFProtection class provides a check_url method that allows you to validate URLs
and ensure they do not point to sensitive or internal resources.

### Installation
You can install the SSRF Protector library using pip:
```
pip install oomnitza-ssrf-protection
```

### Usage
To use the SSRF Protector library, follow the steps below:

Import the SecuritySSRFProtection class from the library and
call the check_url method with the URL you want to validate:

``` python
url = "https://example.com"
result = await SecuritySSRFProtection().check_url(url)
```

SecuritySSRFProtection class also supports synchronous version of check_url method

``` python
url = "https://example.com"
result = SecuritySSRFProtection().sync_check_url(url)
```

It's also possible to pass whitelist of URLs to SecuritySSRFProtection

``` python
url_to_check = "https://example.com"
allowed_urls=["http://127.0.0.1", "http://169.254.1.194"]

result = await SecuritySSRFProtection(
    allowed_urls=allowed_urls
).check_url(url_to_check)
```

The check_url method will raise SSRFProtectionError if the URL is potentially
dangerous (e.g., pointing to internal resources).


### Development

Install package with or without test dependencies.

``` shell
python3 -m venv .venv
source .venv/bin/activate
pip install oomnitza-ssrf-protection
pip install -e '.[tests]'
```

Feel free to write additional tests to cover the new changes and run test
suite.


### Distribution

Build and upload the package to the PyPi repository.

Upload package to testpypi 

```shell
python3 -m build
python3 -m twine upload --repository testpypi dist/*
```

Upload package to pypi 


```shell
python3 -m build
python3 -m twine upload dist/*
```
