# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from datetime import datetime
from inspect import getfullargspec

from pydantic import BaseModel, StrictStr, validator

from gretel_client.rest_v1.models.event_component import EventComponent


class ActivityEvent(BaseModel):
    """
    ActivityEvent
    """

    occured_at: datetime = ...
    subject: EventComponent = ...
    predicate: StrictStr = ...
    object: EventComponent = ...
    status: StrictStr = ...
    __properties = ["occured_at", "subject", "predicate", "object", "status"]

    @validator("predicate")
    def predicate_validate_enum(cls, v):
        if v not in ("PREDICATE_CREATED_AT"):
            raise ValueError("must be one of enum values ('PREDICATE_CREATED_AT')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ActivityEvent:
        """Create an instance of ActivityEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict["subject"] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict["object"] = self.object.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ActivityEvent:
        """Create an instance of ActivityEvent from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ActivityEvent.parse_obj(obj)

        _obj = ActivityEvent.parse_obj(
            {
                "occured_at": obj.get("occured_at"),
                "subject": EventComponent.from_dict(obj.get("subject"))
                if obj.get("subject") is not None
                else None,
                "predicate": obj.get("predicate"),
                "object": EventComponent.from_dict(obj.get("object"))
                if obj.get("object") is not None
                else None,
                "status": obj.get("status"),
            }
        )
        return _obj
