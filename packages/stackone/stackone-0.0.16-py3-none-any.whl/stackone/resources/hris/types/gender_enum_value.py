# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class GenderEnumValue(str, enum.Enum):
    MALE = "male"
    FEMALE = "female"
    NON_BINARY = "non_binary"
    OTHER = "other"
    NOT_DISCLOSED = "not_disclosed"
    DIVERSE = "diverse"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        male: typing.Callable[[], T_Result],
        female: typing.Callable[[], T_Result],
        non_binary: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
        not_disclosed: typing.Callable[[], T_Result],
        diverse: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is GenderEnumValue.MALE:
            return male()
        if self is GenderEnumValue.FEMALE:
            return female()
        if self is GenderEnumValue.NON_BINARY:
            return non_binary()
        if self is GenderEnumValue.OTHER:
            return other()
        if self is GenderEnumValue.NOT_DISCLOSED:
            return not_disclosed()
        if self is GenderEnumValue.DIVERSE:
            return diverse()
        if self is GenderEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
