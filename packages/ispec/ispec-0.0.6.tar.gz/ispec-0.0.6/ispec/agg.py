# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_agg.ipynb.

# %% auto 0
__all__ = ['logclslvl', 'aggattrs']

# %% ../nbs/09_agg.ipynb 4
import inspect, string
from typing import Type, Tuple, Union

# %% ../nbs/09_agg.ipynb 5
from .types import (AttrLvl, isint, isdict)
from .utils import (kwsadd)
from .ann import (getannkws)

# %% ../nbs/09_agg.ipynb 7
def logclslvl(cls: AttrLvl, lvl: AttrLvl, isobj: bool = False, verbose: bool = False):
    tabs = '\t' * lvl
    sobj = 'isobj = $isobj --> continue' if isobj else '$isobj'
    tmpl = string.Template(f'$tabs lvl = $lvl\t cls = $cls\t {sobj}')
    sout = tmpl.substitute(tabs=tabs, lvl=lvl, cls=cls.__name__, isobj=isobj or '')
    if verbose: print(sout)
    if verbose and cls is object:
        print(f'{tabs} \t\t is object --> continue')
        

# %% ../nbs/09_agg.ipynb 8
def aggattrs(
    obj, 
    lvl: AttrLvl, 
    agg: bool = True, 
    return_cls: bool = False,
    return_arr: bool = False,
    verbose: bool = False,
    getkwsfunc: callable = getannkws
) -> Union[dict, Tuple[dict, Type]]:
    kwarr, adict = list(), dict()     
    for curlvl, curcls in enumerate(inspect.getmro(obj)):                
        logclslvl(curcls, curlvl, isobj=curcls is object, verbose=verbose)
        if curcls is object: continue
        
        clslvl = curlvl if isint(lvl) else curcls
        curkws = getkwsfunc(curcls)
        
        # If we've gone too far i.e. curlvl >= lvl or curcls is no longer a subclass
        if clslvl == lvl:
            kwarr.extend(kw for kw in curkws if kw not in kwarr)            
            if isdict(curkws):
                adict = kwsadd(adict, **curkws)
            break
        
        # Otherwise, add the keywords to the result        
        kwarr.extend(kw for kw in curkws if kw not in kwarr)
        if isdict(curkws):
            adict = kwsadd(adict, **curkws)
    
    if return_arr and isdict(curkws):
        curkws = list(curkws.keys())
    
    kwarr = sorted(kwarr if agg else curkws)
    if adict: 
        if agg:            
            adict = {**adict, **{k: v for k,v in curkws.items() if k not in adict}}            
        else:
            adict = curkws.copy()

    result = kwarr if return_arr else adict        
    return (result, curcls) if return_cls else result
