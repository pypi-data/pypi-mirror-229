# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from inspect import getfullargspec

from pydantic import BaseModel, StrictStr

from gretel_client.rest_v1.models.artifact import Artifact


class CreateArtifactResponse(BaseModel):
    """
    CreateArtifactResponse
    """

    artifact: Artifact = ...
    url: StrictStr = ...
    __properties = ["artifact", "url"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateArtifactResponse:
        """Create an instance of CreateArtifactResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of artifact
        if self.artifact:
            _dict["artifact"] = self.artifact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateArtifactResponse:
        """Create an instance of CreateArtifactResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateArtifactResponse.parse_obj(obj)

        _obj = CreateArtifactResponse.parse_obj(
            {
                "artifact": Artifact.from_dict(obj.get("artifact"))
                if obj.get("artifact") is not None
                else None,
                "url": obj.get("url"),
            }
        )
        return _obj
