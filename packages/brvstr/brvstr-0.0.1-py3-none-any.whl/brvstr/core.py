# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['brvstr']

# %% ../nbs/00_core.ipynb 4
from typing import Iterable, Optional
from atyp import (
    AnyQ, BoolQ, FloatQ, StrLikeQ,    
    ClsStrQ, ClsBool, ClsFloat,
)

from indoc import indoc
from fuzstr import fuzstr
from nymstr import nymstr

# %% ../nbs/00_core.ipynb 6
@indoc
class brvstr(nymstr):    
    '''brvstr (Abbreviated String Class) extends the nymstr type to handle abbreviations.

    Parameters
    ----------
    name : str
        The canonical name of the string.

    abrv : str
        The abbreviation of the string.

    icase : bool, default: False
        Whether to ignore case when matching, by default False.

    ispace : bool, default: False
        Whether to ignore spaces when matching, by default False.

    iunder : bool, default: False
        Whether to ignore underscores when matching, by default False.
        
    cutoff : float, default: 1
        The cutoff for fuzzy matching, by default 1.

    itemattr : ClsStrQ, default: 'syns'
        The attribute which holds the item being named, by default 'syns'.

    fullrepr : ClsBool, default:  False
        Whether or not to show the full representation, by default False.

    Attributes
    ----------
    canon : str
        The canonical name of the string.

    known : set
        The set of known names (canon included).

    raw : str
        The raw string.

    snake : str
        The snake-cased string.

    item : str
        The item which was named. In this case it is the abbreviation.

    aspec : list | tuple | dict, default: ('icase', 'ispace', 'iunder', 'cutoff', 'itemattr', 'fullrepr', )
        The attribute specification. Must be either an iterable of strings 
        or a dictionary of `str: Any`. Defaults to an empty tuple.
    
    dspec : list | tuple | dict, default: ('itemattr', )
        The dynamic attribute specification. Must be either an iterable of strings 
        or a dictionary of `str: str`. Defaults to an empty tuple.

    specs: {('aspec', ), ('aspec', 'dspec', ), ('aspec', 'dspec), (), }, default: (Spec.aspec.value, Spec.dspec.value)
        The attribute specifications to use.
        
    __readonly__ : tuple, default: (Spec.aspec.value, Spec.dspec.value)
        Attributes that cannot be set.

    Methods
    -------
    iscanon(other: str) -> bool:
        Check if `other` is the instance's canonical name.
        
    isknown(other: str, extra: SetQ = None) -> bool:
        Check if the fuzzified `other` matches any of the known (and extra) strings.

    isabrv(other: str) -> bool:
        Check if other is either the name or the abbreviation of the instance.

    isitem(other: AnyQ) -> bool:
        Check if `other` is the instance's item.

    tostr() -> str:
        Convert the instance to a string.

    prep(s: StrLikeQ = None) -> str:
        Prepare a string by applying case and space insensitivity rules.

    find(strseq: Iterable[StrLike], **kwargs) -> List[str]:
        Find the closest matches (same-ish) in the provided sequence using fuzzy matching.

    iseq(other: str) -> bool:
        Check if the provided string is an alias of this entity using fuzzy matching.

    __eq__(other):
        Check if the provided value is an alias of this entity using fuzzy matching.

    __str__():
        Return the raw string.

    __hash__():
        Return the hash of the raw string.

    __setattr__(name, value):
        Set the class attribute if it's not read-only.

    getattrkeys(spec: str, dyn: bool = False) -> tuple[str, ...]:
        Return attribute keys stored in `spec`.

    getattrvals(self, spec: str, dyn: bool = False) -> tuple[Any, ...]:
        Return default attribute values stored in `spec`.
    
    skeys() -> tuple[str, ...]:
        Return all attribute keys stored for each spec stored in `specs`.

    svals() -> tuple[str, ...]:
        Return default attribute values stored for each spec stored in `specs`.
    
    getattrs(**kwargs):
        Get instance parameters with optional overrides.
        
    makesame(*args, **kwargs):
        Call class constructor with the same attributes as the current instance.
    
    isinst(other):
        Check if the provided value is an instance of this class.
        
    sameattrs(other):
        Check if the provided value is an instance of this class with the same attributes.
        
    diffattrs(other):
        Check if the provided value is an instance of this class with different attributes.

    getattrname(dattr: str) -> str:
        Get the name of the dynamic attribute.
    
    getdattr(dattr: str, default: Any = None) -> Any:
        Get the value of the dynamic attribute.

    setdattr(dattr: str, value: Any = None):
        Set the value of the dynamic attribute.

    update_attrname(dattr: str, **kwargs):
        Update the name of the dynamic attribute.
    
    update_dattrval(aname: str, **kwargs):
        Update the value of the dynamic attribute.
    
    update_dattr(dattr: str, **kwargs):
        Update the name and value of the dynamic attribute.

    update_aspec(**kwargs):
        Update the attribute specification.

    update_dspec(**kwargs):
        Update the dynamic attribute specification.

    update_specs(**kwargs):
        Update the specifications in `specs` e.g. `aspec` and / or `dspec`.

    getclsattr(attr: str, default: Any = None) -> Any:
        Get the value of the class attribute.

    setclsattr(attr: str, val: Any = None):
        Set the value of the class attribute.

    copy():
        Return a shallow copy of the instance.
    
    deepcopy():
        Return a deep copy of the instance.

    __contains__(syn: str):
        Check if a synonym is in the set.
    
    __len__():
        Return the number of synonyms in the set (canon included).
    
    __str__():
        Return the string for the canonical name.

    __iter__():
        Return an iterator over the set.
    
    __repr__():
        Return a string representation of the object.
    ''' 
    icase:  ClsBool  = True # Whether to ignore case when matching
    ispace: ClsBool  = True # Whether to ignore spaces when matching
    iunder: ClsBool  = True # Whether to ignore underscores when matching
    cutoff: ClsFloat = 0.8  # The cutoff for fuzzy matching
    
    itemattr: ClsStrQ = 'abrv'
    fullrepr: ClsBool = False

    aspec = ('icase', 'ispace', 'iunder', 'cutoff', 'itemattr', 'fullrepr', )
    dspec = ('itemattr', )

    def __new__(
        cls, name: str, abrv: str ='',
        icase:  BoolQ  = True,       # Case insensitive
        ispace: BoolQ  = True,       # Space insensitive
        iunder: BoolQ  = True,       # Underscore insensitive
        cutoff: FloatQ = 0.8,        # Fuzzy cutoff
        itemattr: StrLikeQ = 'abrv', # Dynamic item attribute
        fullrepr: BoolQ = True,      # Full representation
        *args, **kwargs
    ):
        # Put all variables in a dictionary for easy access        
        kwargs.update(
            icase=icase, ispace=ispace, iunder=iunder, cutoff=cutoff,
            itemattr=itemattr, fullrepr=fullrepr,
        )
        kwargs[itemattr] = abrv
        obj = super().__new__(cls, name, **kwargs)
        return obj
    
    def __init__(
        self, name: str, abrv: str ='',
        icase:  BoolQ   = True,      # Case insensitive
        ispace: BoolQ   = True,      # Space insensitive
        iunder: BoolQ   = True,      # Underscore insensitive
        cutoff: FloatQ  = 0.8,       # Fuzzy cutoff
        itemattr: StrLikeQ = 'abrv', # Dynamic item attribute
        fullrepr: BoolQ = True,      # Full representation
        *args, **kwargs
    ):
        # Put all variables in a dictionary for easy access        
        kwargs.update(
            icase=icase, ispace=ispace, iunder=iunder, cutoff=cutoff,
            itemattr=itemattr, fullrepr=fullrepr,
        )
        kwargs[itemattr] = abrv
        super().__init__(name, **kwargs)

    def __hash__(self):
        return super().__hash__()
    
    @property
    def known(self) -> set: 
        return {self.canon, self.item}
    
    def isabrv(self, other: str) -> bool:
        '''Check if other is a synonym of the instance.'''
        return self.isknown(other)
        
    def isname(self, other: str) -> bool:
        '''Check if `other` is the instance's name'''
        return any(other == name for name in self.known)
    
    def isitem(self, other: AnyQ) -> bool:
        '''Check if `other` is the instance's item'''        
        if isinstance(other, type(self)) or hasattr(other, 'known'):
            return any(oitem in self for oitem in other.known)
        return self.item == other

    def __eq__(self, other):
        '''Check equality based on elements in the set.'''
        if isinstance(other, (type(self))):
            return self.iscanon(other.canon) and self.isitem(other)
        return other in self

    def __contains__(self, item):
        '''Check if a synonym is in the set'''
        return self.isabrv(item) 
    
    def __len__(self):
        return 2

    def __str__(self):
        '''Return the canonical name.'''
        return self.canon
    
    def __iter__(self):
        '''Iterate through the set'''
        return iter(self.known)
    
    def __repr__(self):
        '''Return a string representation of the object.'''
        if not self.fullrepr:
            return super().__str__()
        return f'{self.canon} ({self.abrv})' if self.abrv else f'{self.canon}'
