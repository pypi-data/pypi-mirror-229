'''
# CloudWatch Golden Signals Dashboard AWS CDK Construct

Create Amazon CloudWatch Dashboards for monitoring CloudWatch Metrics of AWS Resources partitioned in golden signals. *Latency, Traffic, Errors, Saturation*

You can create tag based CloudWatch dashbord solution out of the box using this construct! [Here](https://github.com/cdklabs/cdk-golden-signals-dashboard/tree/main/dashboard-images) are some screen captures of CloudWatch dashboards created using this cdk construct.

# Supported Resource Types

* AWS::DynamoDB::Table
* AWS::Lambda::Function
* AWS::RDS::DBInstance
* AWS::SNS::Topic
* AWS::AutoScaling::AutoScalingGroup

# Usage

<summary>Including in a CDK application</summary>

```python
# Example automatically generated from non-compiling source. May contain errors.
from aws_cdk import App, Stack, StackProps
from constructs import Construct
from golden_signals_dashboard import GoldenSignalDashboard


class MyStack(Stack):
    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):
        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)
        GoldenSignalDashboard(self, "dynamodbDashboard",
            resource_type="AWS::DynamoDB::Table",
            dashboard_name="myGSDashboard",
            resource_dimensions=[{"resource_region": "us-east-1", "resources": ["Table1", "Table2"]}],
            create_alarms=True
        )
app = App()
MyStack(app, "golden-signals-sample-app-dev")
app.synth()
```

# Contributing

See [CONTRIBUTING](./CONTRIBUTING.md) for more information.

# License Summary

This project is licensed under the Apache-2.0 License. See the [LICENSE](LICENSE) file for our project's licensing.
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from typeguard import check_type

from ._jsii import *

import aws_cdk as _aws_cdk_ceddda9d
import constructs as _constructs_77d1e7e8


@jsii.data_type(
    jsii_type="cdk-golden-signals-dashboard.CdkGSDashboardResourceProps",
    jsii_struct_bases=[_aws_cdk_ceddda9d.ResourceProps],
    name_mapping={
        "account": "account",
        "environment_from_arn": "environmentFromArn",
        "physical_name": "physicalName",
        "region": "region",
        "resource_region": "resourceRegion",
        "resources": "resources",
    },
)
class CdkGSDashboardResourceProps(_aws_cdk_ceddda9d.ResourceProps):
    def __init__(
        self,
        *,
        account: typing.Optional[builtins.str] = None,
        environment_from_arn: typing.Optional[builtins.str] = None,
        physical_name: typing.Optional[builtins.str] = None,
        region: typing.Optional[builtins.str] = None,
        resource_region: builtins.str,
        resources: typing.Sequence[builtins.str],
    ) -> None:
        '''
        :param account: The AWS account ID this resource belongs to. Default: - the resource is in the same account as the stack it belongs to
        :param environment_from_arn: ARN to deduce region and account from. The ARN is parsed and the account and region are taken from the ARN. This should be used for imported resources. Cannot be supplied together with either ``account`` or ``region``. Default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        :param physical_name: The value passed in by users to the physical name prop of the resource. - ``undefined`` implies that a physical name will be allocated by CloudFormation during deployment. - a concrete value implies a specific physical name - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation. Default: - The physical name will be allocated by CloudFormation at deployment time
        :param region: The AWS region this resource belongs to. Default: - the resource is in the same region as the stack it belongs to
        :param resource_region: 
        :param resources: 

        :stability: experimental
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41fbdb23cbc073abb58960738f81ac9566eca41a7fed8b2b85e352c1ddbacbd5)
            check_type(argname="argument account", value=account, expected_type=type_hints["account"])
            check_type(argname="argument environment_from_arn", value=environment_from_arn, expected_type=type_hints["environment_from_arn"])
            check_type(argname="argument physical_name", value=physical_name, expected_type=type_hints["physical_name"])
            check_type(argname="argument region", value=region, expected_type=type_hints["region"])
            check_type(argname="argument resource_region", value=resource_region, expected_type=type_hints["resource_region"])
            check_type(argname="argument resources", value=resources, expected_type=type_hints["resources"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "resource_region": resource_region,
            "resources": resources,
        }
        if account is not None:
            self._values["account"] = account
        if environment_from_arn is not None:
            self._values["environment_from_arn"] = environment_from_arn
        if physical_name is not None:
            self._values["physical_name"] = physical_name
        if region is not None:
            self._values["region"] = region

    @builtins.property
    def account(self) -> typing.Optional[builtins.str]:
        '''The AWS account ID this resource belongs to.

        :default: - the resource is in the same account as the stack it belongs to
        '''
        result = self._values.get("account")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def environment_from_arn(self) -> typing.Optional[builtins.str]:
        '''ARN to deduce region and account from.

        The ARN is parsed and the account and region are taken from the ARN.
        This should be used for imported resources.

        Cannot be supplied together with either ``account`` or ``region``.

        :default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        '''
        result = self._values.get("environment_from_arn")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def physical_name(self) -> typing.Optional[builtins.str]:
        '''The value passed in by users to the physical name prop of the resource.

        - ``undefined`` implies that a physical name will be allocated by
          CloudFormation during deployment.
        - a concrete value implies a specific physical name
        - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated
          by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation.

        :default: - The physical name will be allocated by CloudFormation at deployment time
        '''
        result = self._values.get("physical_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def region(self) -> typing.Optional[builtins.str]:
        '''The AWS region this resource belongs to.

        :default: - the resource is in the same region as the stack it belongs to
        '''
        result = self._values.get("region")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def resource_region(self) -> builtins.str:
        '''
        :stability: experimental
        '''
        result = self._values.get("resource_region")
        assert result is not None, "Required property 'resource_region' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def resources(self) -> typing.List[builtins.str]:
        '''
        :stability: experimental
        '''
        result = self._values.get("resources")
        assert result is not None, "Required property 'resources' is missing"
        return typing.cast(typing.List[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CdkGSDashboardResourceProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="cdk-golden-signals-dashboard.CdkGoldenSignalDashboardProps",
    jsii_struct_bases=[_aws_cdk_ceddda9d.ResourceProps],
    name_mapping={
        "account": "account",
        "environment_from_arn": "environmentFromArn",
        "physical_name": "physicalName",
        "region": "region",
        "dashboard_name": "dashboardName",
        "resource_dimensions": "resourceDimensions",
        "resource_type": "resourceType",
        "create_alarms": "createAlarms",
        "create_empty_dashboard": "createEmptyDashboard",
        "show_insights_metrics": "showInsightsMetrics",
    },
)
class CdkGoldenSignalDashboardProps(_aws_cdk_ceddda9d.ResourceProps):
    def __init__(
        self,
        *,
        account: typing.Optional[builtins.str] = None,
        environment_from_arn: typing.Optional[builtins.str] = None,
        physical_name: typing.Optional[builtins.str] = None,
        region: typing.Optional[builtins.str] = None,
        dashboard_name: builtins.str,
        resource_dimensions: typing.Sequence[typing.Union[CdkGSDashboardResourceProps, typing.Dict[builtins.str, typing.Any]]],
        resource_type: builtins.str,
        create_alarms: typing.Optional[builtins.bool] = None,
        create_empty_dashboard: typing.Optional[builtins.bool] = None,
        show_insights_metrics: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''
        :param account: The AWS account ID this resource belongs to. Default: - the resource is in the same account as the stack it belongs to
        :param environment_from_arn: ARN to deduce region and account from. The ARN is parsed and the account and region are taken from the ARN. This should be used for imported resources. Cannot be supplied together with either ``account`` or ``region``. Default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        :param physical_name: The value passed in by users to the physical name prop of the resource. - ``undefined`` implies that a physical name will be allocated by CloudFormation during deployment. - a concrete value implies a specific physical name - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation. Default: - The physical name will be allocated by CloudFormation at deployment time
        :param region: The AWS region this resource belongs to. Default: - the resource is in the same region as the stack it belongs to
        :param dashboard_name: 
        :param resource_dimensions: 
        :param resource_type: 
        :param create_alarms: (experimental) If you want to create reasonable CloudWatch Alarms for the resources. Default: false
        :param create_empty_dashboard: (experimental) If you want to create dashboards with no live AWS resources. Default: false
        :param show_insights_metrics: (experimental) If you want to see insights metrics for the resources on dashboard. Currently only lambda insights metrices are supported. Default: true

        :stability: experimental
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fff4acfd8c96d594a50ea266ece22d379ddc6fbcb3a2912e75600c93fdc0eb29)
            check_type(argname="argument account", value=account, expected_type=type_hints["account"])
            check_type(argname="argument environment_from_arn", value=environment_from_arn, expected_type=type_hints["environment_from_arn"])
            check_type(argname="argument physical_name", value=physical_name, expected_type=type_hints["physical_name"])
            check_type(argname="argument region", value=region, expected_type=type_hints["region"])
            check_type(argname="argument dashboard_name", value=dashboard_name, expected_type=type_hints["dashboard_name"])
            check_type(argname="argument resource_dimensions", value=resource_dimensions, expected_type=type_hints["resource_dimensions"])
            check_type(argname="argument resource_type", value=resource_type, expected_type=type_hints["resource_type"])
            check_type(argname="argument create_alarms", value=create_alarms, expected_type=type_hints["create_alarms"])
            check_type(argname="argument create_empty_dashboard", value=create_empty_dashboard, expected_type=type_hints["create_empty_dashboard"])
            check_type(argname="argument show_insights_metrics", value=show_insights_metrics, expected_type=type_hints["show_insights_metrics"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "dashboard_name": dashboard_name,
            "resource_dimensions": resource_dimensions,
            "resource_type": resource_type,
        }
        if account is not None:
            self._values["account"] = account
        if environment_from_arn is not None:
            self._values["environment_from_arn"] = environment_from_arn
        if physical_name is not None:
            self._values["physical_name"] = physical_name
        if region is not None:
            self._values["region"] = region
        if create_alarms is not None:
            self._values["create_alarms"] = create_alarms
        if create_empty_dashboard is not None:
            self._values["create_empty_dashboard"] = create_empty_dashboard
        if show_insights_metrics is not None:
            self._values["show_insights_metrics"] = show_insights_metrics

    @builtins.property
    def account(self) -> typing.Optional[builtins.str]:
        '''The AWS account ID this resource belongs to.

        :default: - the resource is in the same account as the stack it belongs to
        '''
        result = self._values.get("account")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def environment_from_arn(self) -> typing.Optional[builtins.str]:
        '''ARN to deduce region and account from.

        The ARN is parsed and the account and region are taken from the ARN.
        This should be used for imported resources.

        Cannot be supplied together with either ``account`` or ``region``.

        :default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        '''
        result = self._values.get("environment_from_arn")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def physical_name(self) -> typing.Optional[builtins.str]:
        '''The value passed in by users to the physical name prop of the resource.

        - ``undefined`` implies that a physical name will be allocated by
          CloudFormation during deployment.
        - a concrete value implies a specific physical name
        - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated
          by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation.

        :default: - The physical name will be allocated by CloudFormation at deployment time
        '''
        result = self._values.get("physical_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def region(self) -> typing.Optional[builtins.str]:
        '''The AWS region this resource belongs to.

        :default: - the resource is in the same region as the stack it belongs to
        '''
        result = self._values.get("region")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dashboard_name(self) -> builtins.str:
        '''
        :stability: experimental
        '''
        result = self._values.get("dashboard_name")
        assert result is not None, "Required property 'dashboard_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def resource_dimensions(self) -> typing.List[CdkGSDashboardResourceProps]:
        '''
        :stability: experimental
        '''
        result = self._values.get("resource_dimensions")
        assert result is not None, "Required property 'resource_dimensions' is missing"
        return typing.cast(typing.List[CdkGSDashboardResourceProps], result)

    @builtins.property
    def resource_type(self) -> builtins.str:
        '''
        :stability: experimental
        '''
        result = self._values.get("resource_type")
        assert result is not None, "Required property 'resource_type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def create_alarms(self) -> typing.Optional[builtins.bool]:
        '''(experimental) If you want to create reasonable CloudWatch Alarms for the resources.

        :default: false

        :stability: experimental
        '''
        result = self._values.get("create_alarms")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def create_empty_dashboard(self) -> typing.Optional[builtins.bool]:
        '''(experimental) If you want to create dashboards with no live AWS resources.

        :default: false

        :stability: experimental
        '''
        result = self._values.get("create_empty_dashboard")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def show_insights_metrics(self) -> typing.Optional[builtins.bool]:
        '''(experimental) If you want to see insights metrics for the resources on dashboard.

        Currently only lambda insights metrices are supported.

        :default: true

        :stability: experimental
        '''
        result = self._values.get("show_insights_metrics")
        return typing.cast(typing.Optional[builtins.bool], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CdkGoldenSignalDashboardProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class GoldenSignalDashboard(
    _constructs_77d1e7e8.Construct,
    metaclass=jsii.JSIIMeta,
    jsii_type="cdk-golden-signals-dashboard.GoldenSignalDashboard",
):
    '''
    :stability: experimental
    '''

    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        dashboard_name: builtins.str,
        resource_dimensions: typing.Sequence[typing.Union[CdkGSDashboardResourceProps, typing.Dict[builtins.str, typing.Any]]],
        resource_type: builtins.str,
        create_alarms: typing.Optional[builtins.bool] = None,
        create_empty_dashboard: typing.Optional[builtins.bool] = None,
        show_insights_metrics: typing.Optional[builtins.bool] = None,
        account: typing.Optional[builtins.str] = None,
        environment_from_arn: typing.Optional[builtins.str] = None,
        physical_name: typing.Optional[builtins.str] = None,
        region: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param scope: -
        :param id: -
        :param dashboard_name: 
        :param resource_dimensions: 
        :param resource_type: 
        :param create_alarms: (experimental) If you want to create reasonable CloudWatch Alarms for the resources. Default: false
        :param create_empty_dashboard: (experimental) If you want to create dashboards with no live AWS resources. Default: false
        :param show_insights_metrics: (experimental) If you want to see insights metrics for the resources on dashboard. Currently only lambda insights metrices are supported. Default: true
        :param account: The AWS account ID this resource belongs to. Default: - the resource is in the same account as the stack it belongs to
        :param environment_from_arn: ARN to deduce region and account from. The ARN is parsed and the account and region are taken from the ARN. This should be used for imported resources. Cannot be supplied together with either ``account`` or ``region``. Default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        :param physical_name: The value passed in by users to the physical name prop of the resource. - ``undefined`` implies that a physical name will be allocated by CloudFormation during deployment. - a concrete value implies a specific physical name - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation. Default: - The physical name will be allocated by CloudFormation at deployment time
        :param region: The AWS region this resource belongs to. Default: - the resource is in the same region as the stack it belongs to

        :stability: experimental
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dbd316826dc316c2a0fce26a3c79f0f946754167375b2469b975d6d430724ace)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        props = CdkGoldenSignalDashboardProps(
            dashboard_name=dashboard_name,
            resource_dimensions=resource_dimensions,
            resource_type=resource_type,
            create_alarms=create_alarms,
            create_empty_dashboard=create_empty_dashboard,
            show_insights_metrics=show_insights_metrics,
            account=account,
            environment_from_arn=environment_from_arn,
            physical_name=physical_name,
            region=region,
        )

        jsii.create(self.__class__, self, [scope, id, props])

    @builtins.property
    @jsii.member(jsii_name="goldenSignalDashboardArn")
    def golden_signal_dashboard_arn(self) -> builtins.str:
        '''
        :stability: experimental
        '''
        return typing.cast(builtins.str, jsii.get(self, "goldenSignalDashboardArn"))


__all__ = [
    "CdkGSDashboardResourceProps",
    "CdkGoldenSignalDashboardProps",
    "GoldenSignalDashboard",
]

publication.publish()

def _typecheckingstub__41fbdb23cbc073abb58960738f81ac9566eca41a7fed8b2b85e352c1ddbacbd5(
    *,
    account: typing.Optional[builtins.str] = None,
    environment_from_arn: typing.Optional[builtins.str] = None,
    physical_name: typing.Optional[builtins.str] = None,
    region: typing.Optional[builtins.str] = None,
    resource_region: builtins.str,
    resources: typing.Sequence[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fff4acfd8c96d594a50ea266ece22d379ddc6fbcb3a2912e75600c93fdc0eb29(
    *,
    account: typing.Optional[builtins.str] = None,
    environment_from_arn: typing.Optional[builtins.str] = None,
    physical_name: typing.Optional[builtins.str] = None,
    region: typing.Optional[builtins.str] = None,
    dashboard_name: builtins.str,
    resource_dimensions: typing.Sequence[typing.Union[CdkGSDashboardResourceProps, typing.Dict[builtins.str, typing.Any]]],
    resource_type: builtins.str,
    create_alarms: typing.Optional[builtins.bool] = None,
    create_empty_dashboard: typing.Optional[builtins.bool] = None,
    show_insights_metrics: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dbd316826dc316c2a0fce26a3c79f0f946754167375b2469b975d6d430724ace(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    dashboard_name: builtins.str,
    resource_dimensions: typing.Sequence[typing.Union[CdkGSDashboardResourceProps, typing.Dict[builtins.str, typing.Any]]],
    resource_type: builtins.str,
    create_alarms: typing.Optional[builtins.bool] = None,
    create_empty_dashboard: typing.Optional[builtins.bool] = None,
    show_insights_metrics: typing.Optional[builtins.bool] = None,
    account: typing.Optional[builtins.str] = None,
    environment_from_arn: typing.Optional[builtins.str] = None,
    physical_name: typing.Optional[builtins.str] = None,
    region: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass
