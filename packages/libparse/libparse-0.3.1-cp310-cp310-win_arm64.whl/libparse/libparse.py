# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
import _libparse

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libparse.delete_SwigPyIterator

    def value(self):
        return _libparse.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libparse.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libparse.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libparse.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libparse.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libparse.SwigPyIterator_copy(self)

    def next(self):
        return _libparse.SwigPyIterator_next(self)

    def __next__(self):
        return _libparse.SwigPyIterator___next__(self)

    def previous(self):
        return _libparse.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libparse.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libparse.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libparse.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libparse.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libparse.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libparse.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libparse.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libparse:
_libparse.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _libparse.SHARED_PTR_DISOWN
class VectorLibertyAstSP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libparse.VectorLibertyAstSP_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libparse.VectorLibertyAstSP___nonzero__(self)

    def __bool__(self):
        return _libparse.VectorLibertyAstSP___bool__(self)

    def __len__(self):
        return _libparse.VectorLibertyAstSP___len__(self)

    def __getslice__(self, i, j):
        return _libparse.VectorLibertyAstSP___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libparse.VectorLibertyAstSP___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libparse.VectorLibertyAstSP___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libparse.VectorLibertyAstSP___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libparse.VectorLibertyAstSP___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libparse.VectorLibertyAstSP___setitem__(self, *args)

    def pop(self):
        return _libparse.VectorLibertyAstSP_pop(self)

    def append(self, x):
        return _libparse.VectorLibertyAstSP_append(self, x)

    def empty(self):
        return _libparse.VectorLibertyAstSP_empty(self)

    def size(self):
        return _libparse.VectorLibertyAstSP_size(self)

    def swap(self, v):
        return _libparse.VectorLibertyAstSP_swap(self, v)

    def begin(self):
        return _libparse.VectorLibertyAstSP_begin(self)

    def end(self):
        return _libparse.VectorLibertyAstSP_end(self)

    def rbegin(self):
        return _libparse.VectorLibertyAstSP_rbegin(self)

    def rend(self):
        return _libparse.VectorLibertyAstSP_rend(self)

    def clear(self):
        return _libparse.VectorLibertyAstSP_clear(self)

    def get_allocator(self):
        return _libparse.VectorLibertyAstSP_get_allocator(self)

    def pop_back(self):
        return _libparse.VectorLibertyAstSP_pop_back(self)

    def erase(self, *args):
        return _libparse.VectorLibertyAstSP_erase(self, *args)

    def __init__(self, *args):
        _libparse.VectorLibertyAstSP_swiginit(self, _libparse.new_VectorLibertyAstSP(*args))

    def push_back(self, x):
        return _libparse.VectorLibertyAstSP_push_back(self, x)

    def front(self):
        return _libparse.VectorLibertyAstSP_front(self)

    def back(self):
        return _libparse.VectorLibertyAstSP_back(self)

    def assign(self, n, x):
        return _libparse.VectorLibertyAstSP_assign(self, n, x)

    def resize(self, *args):
        return _libparse.VectorLibertyAstSP_resize(self, *args)

    def insert(self, *args):
        return _libparse.VectorLibertyAstSP_insert(self, *args)

    def reserve(self, n):
        return _libparse.VectorLibertyAstSP_reserve(self, n)

    def capacity(self):
        return _libparse.VectorLibertyAstSP_capacity(self)
    __swig_destroy__ = _libparse.delete_VectorLibertyAstSP

# Register VectorLibertyAstSP in _libparse:
_libparse.VectorLibertyAstSP_swigregister(VectorLibertyAstSP)
class VectorStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libparse.VectorStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libparse.VectorStr___nonzero__(self)

    def __bool__(self):
        return _libparse.VectorStr___bool__(self)

    def __len__(self):
        return _libparse.VectorStr___len__(self)

    def __getslice__(self, i, j):
        return _libparse.VectorStr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libparse.VectorStr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libparse.VectorStr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libparse.VectorStr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libparse.VectorStr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libparse.VectorStr___setitem__(self, *args)

    def pop(self):
        return _libparse.VectorStr_pop(self)

    def append(self, x):
        return _libparse.VectorStr_append(self, x)

    def empty(self):
        return _libparse.VectorStr_empty(self)

    def size(self):
        return _libparse.VectorStr_size(self)

    def swap(self, v):
        return _libparse.VectorStr_swap(self, v)

    def begin(self):
        return _libparse.VectorStr_begin(self)

    def end(self):
        return _libparse.VectorStr_end(self)

    def rbegin(self):
        return _libparse.VectorStr_rbegin(self)

    def rend(self):
        return _libparse.VectorStr_rend(self)

    def clear(self):
        return _libparse.VectorStr_clear(self)

    def get_allocator(self):
        return _libparse.VectorStr_get_allocator(self)

    def pop_back(self):
        return _libparse.VectorStr_pop_back(self)

    def erase(self, *args):
        return _libparse.VectorStr_erase(self, *args)

    def __init__(self, *args):
        _libparse.VectorStr_swiginit(self, _libparse.new_VectorStr(*args))

    def push_back(self, x):
        return _libparse.VectorStr_push_back(self, x)

    def front(self):
        return _libparse.VectorStr_front(self)

    def back(self):
        return _libparse.VectorStr_back(self)

    def assign(self, n, x):
        return _libparse.VectorStr_assign(self, n, x)

    def resize(self, *args):
        return _libparse.VectorStr_resize(self, *args)

    def insert(self, *args):
        return _libparse.VectorStr_insert(self, *args)

    def reserve(self, n):
        return _libparse.VectorStr_reserve(self, n)

    def capacity(self):
        return _libparse.VectorStr_capacity(self)
    __swig_destroy__ = _libparse.delete_VectorStr

# Register VectorStr in _libparse:
_libparse.VectorStr_swigregister(VectorStr)
class LibertyAst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_libparse.LibertyAst_id_get, _libparse.LibertyAst_id_set)
    value = property(_libparse.LibertyAst_value_get, _libparse.LibertyAst_value_set)
    args = property(_libparse.LibertyAst_args_get, _libparse.LibertyAst_args_set)
    children = property(_libparse.LibertyAst_children_get, _libparse.LibertyAst_children_set)
    __swig_destroy__ = _libparse.delete_LibertyAst

    def find(self, name):
        return _libparse.LibertyAst_find(self, name)

    def dump(self, *args):
        return _libparse.LibertyAst_dump(self, *args)
    blacklist = property(_libparse.LibertyAst_blacklist_get, _libparse.LibertyAst_blacklist_set)
    whitelist = property(_libparse.LibertyAst_whitelist_get, _libparse.LibertyAst_whitelist_set)

    def __init__(self):
        _libparse.LibertyAst_swiginit(self, _libparse.new_LibertyAst())

# Register LibertyAst in _libparse:
_libparse.LibertyAst_swigregister(LibertyAst)
cvar = _libparse.cvar

class LibertyParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_libparse.LibertyParser_f_get)
    line = property(_libparse.LibertyParser_line_get, _libparse.LibertyParser_line_set)
    ast = property(_libparse.LibertyParser_ast_get, _libparse.LibertyParser_ast_set)

    def __init__(self, f):
        _libparse.LibertyParser_swiginit(self, _libparse.new_LibertyParser(f))

    def lexer(self, str):
        return _libparse.LibertyParser_lexer(self, str)

    def parse(self):
        return _libparse.LibertyParser_parse(self)

    def error(self, *args):
        return _libparse.LibertyParser_error(self, *args)
    __swig_destroy__ = _libparse.delete_LibertyParser

# Register LibertyParser in _libparse:
_libparse.LibertyParser_swigregister(LibertyParser)

