# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from datetime import datetime
from inspect import getfullargspec
from typing import List, Optional

from pydantic import BaseModel, conlist, Field, StrictStr, validator

from gretel_client.rest_v1.models.model_run_artifact import ModelRunArtifact
from gretel_client.rest_v1.models.model_run_config import ModelRunConfig


class ModelRun(BaseModel):
    """
    Container message for a model config
    """

    id: Optional[StrictStr] = Field(
        None, description="ModelRun Id. These Ids are prefixed with an `mr` identifier."
    )
    model_id: StrictStr = Field(..., description="Parent model id.")
    project_id: StrictStr = ...
    config: Optional[ModelRunConfig] = None
    artifacts: Optional[conlist(ModelRunArtifact)] = Field(
        None, description="Inputs artifacts."
    )
    status: Optional[StrictStr] = Field(
        None,
        description="Status of the ModelRun. When the ModelRun is first created, the status is set to CREATED",
    )
    created_by: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    pending_at: Optional[datetime] = None
    active_at: Optional[datetime] = None
    error_at: Optional[datetime] = None
    lost_at: Optional[datetime] = None
    __properties = [
        "id",
        "model_id",
        "project_id",
        "config",
        "artifacts",
        "status",
        "created_by",
        "created_at",
        "updated_at",
        "pending_at",
        "active_at",
        "error_at",
        "lost_at",
    ]

    @validator("status")
    def status_validate_enum(cls, v):
        if v is None:
            return v
        if v not in (
            "RUN_STATUS_UNKNOWN",
            "RUN_STATUS_CREATED",
            "RUN_STATUS_PENDING",
            "RUN_STATUS_ACTIVE",
            "RUN_STATUS_ERROR",
            "RUN_STATUS_LOST",
            "RUN_STATUS_COMPLETED",
            "RUN_STATUS_CANCELLING",
            "RUN_STATUS_CANCELLED",
        ):
            raise ValueError(
                "must be one of enum values ('RUN_STATUS_UNKNOWN', 'RUN_STATUS_CREATED', 'RUN_STATUS_PENDING', 'RUN_STATUS_ACTIVE', 'RUN_STATUS_ERROR', 'RUN_STATUS_LOST', 'RUN_STATUS_COMPLETED', 'RUN_STATUS_CANCELLING', 'RUN_STATUS_CANCELLED')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelRun:
        """Create an instance of ModelRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "id",
                "artifacts",
                "status",
                "created_by",
                "created_at",
                "updated_at",
                "pending_at",
                "active_at",
                "error_at",
                "lost_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict["config"] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["artifacts"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelRun:
        """Create an instance of ModelRun from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ModelRun.parse_obj(obj)

        _obj = ModelRun.parse_obj(
            {
                "id": obj.get("id"),
                "model_id": obj.get("model_id"),
                "project_id": obj.get("project_id"),
                "config": ModelRunConfig.from_dict(obj.get("config"))
                if obj.get("config") is not None
                else None,
                "artifacts": [
                    ModelRunArtifact.from_dict(_item) for _item in obj.get("artifacts")
                ]
                if obj.get("artifacts") is not None
                else None,
                "status": obj.get("status"),
                "created_by": obj.get("created_by"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "pending_at": obj.get("pending_at"),
                "active_at": obj.get("active_at"),
                "error_at": obj.get("error_at"),
                "lost_at": obj.get("lost_at"),
            }
        )
        return _obj
