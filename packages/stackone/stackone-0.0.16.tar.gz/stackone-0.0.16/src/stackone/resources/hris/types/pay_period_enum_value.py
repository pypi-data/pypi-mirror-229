# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PayPeriodEnumValue(str, enum.Enum):
    HOUR = "hour"
    DAY = "day"
    WEEK = "week"
    EVERY_TWO_WEEKS = "every_two_weeks"
    MONTH = "month"
    QUARTER = "quarter"
    EVERY_SIX_MONTHS = "every_six_months"
    YEAR = "year"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        hour: typing.Callable[[], T_Result],
        day: typing.Callable[[], T_Result],
        week: typing.Callable[[], T_Result],
        every_two_weeks: typing.Callable[[], T_Result],
        month: typing.Callable[[], T_Result],
        quarter: typing.Callable[[], T_Result],
        every_six_months: typing.Callable[[], T_Result],
        year: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PayPeriodEnumValue.HOUR:
            return hour()
        if self is PayPeriodEnumValue.DAY:
            return day()
        if self is PayPeriodEnumValue.WEEK:
            return week()
        if self is PayPeriodEnumValue.EVERY_TWO_WEEKS:
            return every_two_weeks()
        if self is PayPeriodEnumValue.MONTH:
            return month()
        if self is PayPeriodEnumValue.QUARTER:
            return quarter()
        if self is PayPeriodEnumValue.EVERY_SIX_MONTHS:
            return every_six_months()
        if self is PayPeriodEnumValue.YEAR:
            return year()
        if self is PayPeriodEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
