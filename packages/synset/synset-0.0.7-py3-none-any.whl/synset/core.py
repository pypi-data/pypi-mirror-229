# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['any2set', 'synset']

# %% ../nbs/00_core.ipynb 4
from typing import Iterable, Optional
from atyp import (
    AnyQ, BoolQ, FloatQ, StrLikeQ,    
    ClsStrQ, ClsBool, ClsFloat,
)

from indoc import indoc
from fuzstr import fuzstr
from nymstr import nymstr

# %% ../nbs/00_core.ipynb 6
def any2set(aset: AnyQ) -> set:
    '''Tries to convert any object to a set. If the object is a string, it will be converted to a set of length 1.'''
    if isinstance(aset, str):        
        aset = set((aset, ))

    elif not isinstance(aset, Iterable):
        # not a string and not iterable
        aset = set((aset, ))

    if not isinstance(aset, set):
        aset = set(aset)

    return aset

# %% ../nbs/00_core.ipynb 7
@indoc
class synset(nymstr):    
    '''synstr (Alias-able String Class) extends the nymstr type to handle synonyms.

    Parameters
    ----------
    canon : str
        The canonical name of the string.

    *synonyms : Iterable[str]
        The synonyms of the string. They will be added to the set alongside the canonical name.

    icase : bool, default: False
        Whether to ignore case when matching, by default False.

    ispace : bool, default: False
        Whether to ignore spaces when matching, by default False.

    iunder : bool, default: False
        Whether to ignore underscores when matching, by default False.
        
    cutoff : float, default: 1
        The cutoff for fuzzy matching, by default 1.

    itemattr : ClsStrQ, default: 'syns'
        The attribute which holds the item being named, by default 'syns'.

    fullrepr : ClsBool, default:  False
        Whether or not to show the full representation, by default False.

    Attributes
    ----------
    nalts: int
        The number of synonyms (canon excluded).

    raw : str
        The raw string.

    canon : str
        The canonical string (i.e. the raw string))
    
    known : set
        The set of known strings. Meant to be overridden by subclasses if needed.

    snake : str
        The snake-cased string.

    item : set
        The item which was named. In this case it is a set of synonyms (canon included).

    aspec : list | tuple | dict, default: ('icase', 'ispace', 'iunder', 'cutoff', 'itemattr', 'fullrepr', )
        The attribute specification. Must be either an iterable of strings 
        or a dictionary of `str: Any`. Defaults to an empty tuple.
    
    dspec : list | tuple | dict, default: ('itemattr', )
        The dynamic attribute specification. Must be either an iterable of strings 
        or a dictionary of `str: str`. Defaults to an empty tuple.

    specs: {('aspec', ), ('aspec', 'dspec', ), ('aspec', 'dspec), (), }, default: (Spec.aspec.value, Spec.dspec.value)
        The attribute specifications to use.
        
    __readonly__ : tuple, default: (Spec.aspec.value, Spec.dspec.value)
        Attributes that cannot be set.

    Methods
    -------
    iscanon(other: str) -> bool:
        Check if `other` is the instance's canonical name.
        
    isknown(other: str, extra: SetQ = None) -> bool:
        Check if the fuzzified `other` matches any of the known (and extra) strings.

    issyn(other: str, extra: Optional[set] = None) -> bool:
        Check if other is a synonym of the instance.

    isitem(other: AnyQ) -> bool:
        Check if `other` is the instance's item.

    tostr() -> str:
        Convert the instance to a string.

    prep(s: StrLikeQ = None) -> str:
        Prepare a string by applying case and space insensitivity rules.

    find(strseq: Iterable[StrLike], **kwargs) -> List[str]:
        Find the closest matches (same-ish) in the provided sequence using fuzzy matching.

    iseq(other: str) -> bool:
        Check if the provided string is an alias of this entity using fuzzy matching.

    __eq__(other):
        Check if the provided value is an alias of this entity using fuzzy matching.

    __str__():
        Return the raw string.

    __hash__():
        Return the hash of the raw string.

    __setattr__(name, value):
        Set the class attribute if it's not read-only.

    getattrkeys(spec: str, dyn: bool = False) -> tuple[str, ...]:
        Return attribute keys stored in `spec`.

    getattrvals(self, spec: str, dyn: bool = False) -> tuple[Any, ...]:
        Return default attribute values stored in `spec`.
    
    skeys() -> tuple[str, ...]:
        Return all attribute keys stored for each spec stored in `specs`.

    svals() -> tuple[str, ...]:
        Return default attribute values stored for each spec stored in `specs`.
    
    getattrs(**kwargs):
        Get instance parameters with optional overrides.
        
    makesame(*args, **kwargs):
        Call class constructor with the same attributes as the current instance.
    
    isinst(other):
        Check if the provided value is an instance of this class.
        
    sameattrs(other):
        Check if the provided value is an instance of this class with the same attributes.
        
    diffattrs(other):
        Check if the provided value is an instance of this class with different attributes.

    getattrname(dattr: str) -> str:
        Get the name of the dynamic attribute.
    
    getdattr(dattr: str, default: Any = None) -> Any:
        Get the value of the dynamic attribute.

    setdattr(dattr: str, value: Any = None):
        Set the value of the dynamic attribute.

    update_attrname(dattr: str, **kwargs):
        Update the name of the dynamic attribute.
    
    update_dattrval(aname: str, **kwargs):
        Update the value of the dynamic attribute.
    
    update_dattr(dattr: str, **kwargs):
        Update the name and value of the dynamic attribute.

    update_aspec(**kwargs):
        Update the attribute specification.

    update_dspec(**kwargs):
        Update the dynamic attribute specification.

    update_specs(**kwargs):
        Update the specifications in `specs` e.g. `aspec` and / or `dspec`.

    getclsattr(attr: str, default: Any = None) -> Any:
        Get the value of the class attribute.

    setclsattr(attr: str, val: Any = None):
        Set the value of the class attribute.

    copy():
        Return a shallow copy of the instance.
    
    deepcopy():
        Return a deep copy of the instance.

    __contains__(syn: str):
        Check if a synonym is in the set.
    
    __len__():
        Return the number of synonyms in the set (canon included).
    
    __str__():
        Return the string for the canonical name.

    __iter__():
        Return an iterator over the set.
    
    __repr__():
        Return a string representation of the object.

    __and__(other):
        Return the intersection of two sets.

    __ge__(other):
        Check if one set is a superset of another.
        
    __gt__(other):
        Check if one set is a proper superset of another.
        
    __iand__(other):
        Update a set with the intersection of itself and another.
        
    __ior__(other):
        Update a set with the union of itself and another.
        
    __isub__(other):
        Remove all elements of another set from this set.
        
    __ixor__(other):
        Update a set with the symmetric difference of itself and another.
        
    __le__(other):
        Check if one set is a subset of another.
        
    __lt__(other):
        Check if one set is a proper subset of another.
        
    __or__(other):
        Return the union of sets as a new set.
        
    __rand__(other):
        Return the intersection of two sets as a new set.
        
    __ror__(other):
        Return the union of sets as a new set.

    __xor__(other):
        Return the symmetric difference of two sets as a new set.

    __sub__(other):
        Return the difference of two sets as a new set.
        
    __rsub__(other):
        Return the difference of two or more sets as a new set.
        
    __rxor__(other):
        Return the symmetric difference of two sets as a new set.
        
    add(syn: str):
        Add a synonym to the set.
        
    remove(syn: str):
        Remove a synonym from the set.
        
    clear():
        Remove all synonyms from the set.
        
    difference(*others):
        Return the difference of two or more sets as a new set.
        
    difference_update(*others):
        Remove all elements of another set from this set.
        
    discard(syn: str):
        Remove a synonym from the set.
        
    intersection(*others):
        Return the intersection of two or more sets as a new set.
        
    intersection_update(*others):
        Update a set with the intersection of itself and another.
        
    isdisjoint(other):
        Return True if two sets have a null intersection.
        
    issubset(other):
        Report whether another set contains this set.
        
    issuperset(other):
        Report whether this set contains another set.
        
    pop():
        Remove and return an arbitrary set element.
        
    remove(syn: str):
        Remove a synonym from the set.
        
    symmetric_difference(other):
        Return the symmetric difference of two sets as a new set.
        
    symmetric_difference_update(other):
        Update a set with the symmetric difference of itself and another.
        
    union(*others):
        Return the union of sets as a new set.
        
    update(*others):
        Update a set with the union of itself and others.
        
    ''' 
    icase:  ClsBool  = True # Whether to ignore case when matching
    ispace: ClsBool  = True # Whether to ignore spaces when matching
    iunder: ClsBool  = True # Whether to ignore underscores when matching
    cutoff: ClsFloat = 0.8  # The cutoff for fuzzy matching
    
    itemattr: ClsStrQ = 'syns'
    fullrepr: ClsBool = False

    aspec = ('icase', 'ispace', 'iunder', 'cutoff', 'itemattr', 'fullrepr', )
    dspec = ('itemattr', )

    def __new__(
        cls, canon: str, *synonyms, 
        icase:  BoolQ  = True,       # Case insensitive
        ispace: BoolQ  = True,       # Space insensitive
        iunder: BoolQ  = True,       # Underscore insensitive
        cutoff: FloatQ = 0.8,        # Fuzzy cutoff
        itemattr: StrLikeQ = 'syns', # Dynamic item attribute
        fullrepr: BoolQ = True,      # Full representation
        **kwargs
    ):
        # Put all variables in a dictionary for easy access
        synonyms = {canon, *synonyms} if synonyms else {canon, }
        kwargs.update(
            icase=icase, ispace=ispace, iunder=iunder, cutoff=cutoff,
            itemattr=itemattr, fullrepr=fullrepr, syns=synonyms,
        )
        kwargs[itemattr] = synonyms
        obj = super().__new__(cls, canon, **kwargs)
        return obj
    
    def __init__(
        self, canon: str, *synonyms, 
        icase:  BoolQ   = True,      # Case insensitive
        ispace: BoolQ   = True,      # Space insensitive
        iunder: BoolQ   = True,      # Underscore insensitive
        cutoff: FloatQ  = 0.8,       # Fuzzy cutoff
        itemattr: StrLikeQ = 'syns', # Dynamic item attribute
        fullrepr: BoolQ = True,      # Full representation
        **kwargs
    ):
        # Put all variables in a dictionary for easy access
        synonyms = {canon, *synonyms} if synonyms else {canon, }
        kwargs.update(
            icase=icase, ispace=ispace, iunder=iunder, cutoff=cutoff,
            itemattr=itemattr, fullrepr=fullrepr, syns=synonyms,
        )
        kwargs[itemattr] = synonyms
        super().__init__(canon, **kwargs)

    def __hash__(self):
        return super().__hash__()
    
    @property
    def known(self) -> set: 
        return {self.canon, *(self.item or {})}
    
    @property
    def nalts(self):
        syns = (self.item or set()) ^ set((self.canon, ))
        return max(len(syns), 0)
    
    def issyn(self, other: str, extra: Optional[set] = None) -> bool:
        '''Check if other is a synonym of the instance.'''
        return self.isknown(other, extra)
    
    # NOTE: we override this from nymstr
    def isitem(self, other: AnyQ) -> bool:
        '''Check if `other` is the instance's item'''        
        if isinstance(other, type(self)) or hasattr(other, 'item'):
            return any(oitem in self.item for oitem in other.item)
        return other in self.item

    def __eq__(self, other):
        '''Check equality based on elements in the set.'''
        if isinstance(other, (type(self))):
            return self.iscanon(other.canon) and self.isitem(other)
        return other in self

    def __contains__(self, item):
        '''Check if a synonym is in the set'''
        return self.issyn(item) 
    
    def __len__(self):
        syns = (self.item or set())
        return len(syns)

    def __str__(self):
        '''Return the canonical name.'''
        return self.canon
    
    def __iter__(self):
        '''Iterate through the set'''
        return iter(self.item)
    
    def __repr__(self):
        '''Return a string representation of the object.'''
        sub = 'alias'  if self.nalts == 1 else 'aliases'
        if not self.fullrepr:
            return super().__str__()
        return f'{self.canon} ({self.nalts} {sub})'

    def __and__(self, other):
        '''Return the intersection of two sets.'''
        return self.item & other.item
    def __ge__(self, other):
        '''Check if one set is a superset of another.'''
        return self.item >= other.item
    def __gt__(self, other):
        '''Check if one set is a proper superset of another.'''
        return self.item > other.item
    def __iand__(self, other):
        '''Update a set with the intersection of itself and another.'''
        itms = self.getdattr('itemattr', set()) 
        itms &= other.item
        self.setdattr('itemattr', itms)
        return self    
    def __ior__(self, other):
        '''Update a set with the union of itself and another.'''
        itms = self.getdattr('itemattr', set()) 
        itms |= other.item
        self.setdattr('itemattr', itms)
        return self
    def __isub__(self, other):
        '''Remove all elements of another set from this set.'''
        itms = self.getdattr('itemattr', set()) 
        itms -= other.item
        self.setdattr('itemattr', itms)
        return self
    def __ixor__(self, other):
        '''Update a set with the symmetric difference of itself and another.'''
        itms = self.getdattr('itemattr', set()) 
        itms ^= other.item
        self.setdattr('itemattr', itms)
        return self
    def __le__(self, other):
        '''Check if one set is a subset of another.'''
        return self.item <= other.item
    def __lt__(self, other):
        '''Check if one set is a proper subset of another.'''
        return self.item < other.item
    def __or__(self, other):
        '''Return the union of sets as a new set.'''
        return self.item | other.item
    def __rand__(self, other):
        '''Return the intersection of two sets as a new set.'''
        return self.item & other.item
    def __ror__(self, other):
        '''Return the union of sets as a new set.'''
        return self.item | other.item
    def __xor__(self, other):
        '''Return the symmetric difference of two sets as a new set.'''
        return self.item ^ other.item
    def __sub__(self, other):
        '''Return the difference of two sets as a new set.'''
        return self.item - other.item
    def __rsub__(self, other):
        '''Return the difference of two or more sets as a new set.'''
        return other.item - self.item
    def __rxor__(self, other):
        '''Return the symmetric difference of two sets as a new set.'''
        return other.item ^ self.item
    def add(self, syn: str):
        '''Add a synonym to the set'''
        self.item.add(syn)
    def remove(self, syn: str):
        '''Remove a synonym from the set'''
        self.item.remove(syn)
    def clear(self):
        '''Remove all synonyms from the set'''
        self.item.clear()
    def difference(self, *others):
        '''Return the difference of two or more sets as a new set.'''
        return self.item.difference(*others)
    def difference_update(self, *others):
        '''Remove all elements of another set from this set.'''
        self.item.difference_update(*others)
    def discard(self, syn: str):
        '''Remove a synonym from the set'''
        self.item.discard(syn)
    def intersection(self, *others):
        '''Return the intersection of two or more sets as a new set.'''
        return self.item.intersection(*others)
    def intersection_update(self, *others):
        '''Update a set with the intersection of itself and another.'''
        self.item.intersection_update(*others)
    def isdisjoint(self, other):
        '''Return True if two sets have a null intersection.'''
        return self.item.isdisjoint(other)
    def issubset(self, other):
        '''Report whether another set contains this set.'''
        return self.item.issubset(other)
    def issuperset(self, other):
        '''Report whether this set contains another set.'''
        return self.item.issuperset(other)
    def pop(self):
        '''Remove and return an arbitrary set element.'''
        return self.item.pop()
    def remove(self, syn: str):
        '''Remove a synonym from the set'''
        self.item.remove(syn)
    def symmetric_difference(self, other):
        '''Return the symmetric difference of two sets as a new set.'''
        return self.item.symmetric_difference(other)
    def symmetric_difference_update(self, other):
        '''Update a set with the symmetric difference of itself and another.'''
        self.item.symmetric_difference_update(other)
    def union(self, *others):
        '''Return the union of sets as a new set.'''
        return self.item.union(*others)
    def update(self, *others):
        '''Update a set with the union of itself and others.'''
        self.item.update(*others)
