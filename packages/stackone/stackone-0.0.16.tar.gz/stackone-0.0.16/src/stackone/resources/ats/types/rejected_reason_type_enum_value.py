# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class RejectedReasonTypeEnumValue(str, enum.Enum):
    REJECTED_BY_CANDIDATE = "rejected_by_candidate"
    REJECTED_BY_ORGANIZATION = "rejected_by_organization"
    OTHER = "other"
    UNKNOWN = "unknown"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        rejected_by_candidate: typing.Callable[[], T_Result],
        rejected_by_organization: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
        unknown: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is RejectedReasonTypeEnumValue.REJECTED_BY_CANDIDATE:
            return rejected_by_candidate()
        if self is RejectedReasonTypeEnumValue.REJECTED_BY_ORGANIZATION:
            return rejected_by_organization()
        if self is RejectedReasonTypeEnumValue.OTHER:
            return other()
        if self is RejectedReasonTypeEnumValue.UNKNOWN:
            return unknown()
        if self is RejectedReasonTypeEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
