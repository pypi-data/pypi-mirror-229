# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from inspect import getfullargspec
from typing import Dict, Optional

from pydantic import BaseModel, StrictStr, validator


class Artifact(BaseModel):
    """
    Artifact
    """

    id: Optional[StrictStr] = None
    owner: StrictStr = ...
    purpose: StrictStr = ...
    type: StrictStr = ...
    scope: StrictStr = ...
    metadata: Optional[Dict[str, StrictStr]] = None
    __properties = ["id", "owner", "purpose", "type", "scope", "metadata"]

    @validator("type")
    def type_validate_enum(cls, v):
        if v not in (
            "ARTIFACT_TYPE_UNKNOWN",
            "ARTIFACT_TYPE_DATA",
            "ARTIFACT_TYPE_MODEL_ARCHIVE",
            "ARTIFACT_TYPE_LOG",
        ):
            raise ValueError(
                "must be one of enum values ('ARTIFACT_TYPE_UNKNOWN', 'ARTIFACT_TYPE_DATA', 'ARTIFACT_TYPE_MODEL_ARCHIVE', 'ARTIFACT_TYPE_LOG')"
            )
        return v

    @validator("scope")
    def scope_validate_enum(cls, v):
        if v not in (
            "ARTIFACT_SCOPE_UNKNOWN",
            "ARTIFACT_SCOPE_PROJECT",
            "ARTIFACT_SCOPE_MODEL",
            "ARTIFACT_SCOPE_MODEL_RUN",
        ):
            raise ValueError(
                "must be one of enum values ('ARTIFACT_SCOPE_UNKNOWN', 'ARTIFACT_SCOPE_PROJECT', 'ARTIFACT_SCOPE_MODEL', 'ARTIFACT_SCOPE_MODEL_RUN')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Artifact:
        """Create an instance of Artifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "id",
                "metadata",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Artifact:
        """Create an instance of Artifact from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Artifact.parse_obj(obj)

        _obj = Artifact.parse_obj(
            {
                "id": obj.get("id"),
                "owner": obj.get("owner"),
                "purpose": obj.get("purpose"),
                "type": obj.get("type"),
                "scope": obj.get("scope"),
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
