import pandas as pd
import requests
from pandas import DataFrame
from typing import Union

from cmo_nnect.helpers import Parallelization


class BusinessCentral(Parallelization):
    def __init__(
        self, client_id: str, client_secret: str, tenant_id: str, environment_id: str
    ):
        self.tenant_id = tenant_id
        self.client_id = client_id
        self.client_secret = client_secret
        self.environment_id = environment_id

        auth_data = {
            "grant_type": "client_credentials",
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "scope": "https://api.businesscentral.dynamics.com/.default",
        }

        response = requests.post(
            f"https://login.microsoftonline.com/{self.tenant_id}/oauth2/v2.0/token",
            data=auth_data,
        )

        self.access_token = response.json()["access_token"]

        self.headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json",
        }

        self.companies = self._get_companies()
        df_companies = DataFrame(
            data=self.companies.items(), columns=["company_id", "company_name"]
        )
        print(f"Here are the companies within the selected BC environment:")
        print(df_companies)

    def _get_companies(self) -> dict:
        """Gets a list of all companies within the environment."""

        # Sends a request to the BC API for to get data for a specific entity
        test_response = requests.get(
            f"https://api.businesscentral.dynamics.com/v2.0/{self.environment_id}/"
            f"api/v2.0/companies",
            headers=self.headers,
        )

        company_dict = {d["id"]: d["name"] for d in test_response.json()["value"]}
        return company_dict

    def test_connection(self) -> str:
        """Function that tests the connection to the API using the status response of a get request
        using the access token generated by initializing the business central object."""

        # Sends a request to the BC API for to validate the connection based on the response.
        test_response = requests.get(
            f"https://api.businesscentral.dynamics.com/v2.0/{self.environment_id}/"
            f"api/v2.0/companies",
            headers=self.headers,
        )

        if test_response.status_code == 200:
            test_result = "Test connection Succeeded!"
        else:
            test_result = "Connection failed. Please check the client credentials."

        return test_result

    def _append_rows(self, response_object, company_objects: list, company_name: str):
        """Adds data for the selected entity in a Dataframe to an (empty) list for each company.
        Accounts for the BC pagination limit of 20.000 rows."""

        # creating an empty list and fill it with data first the api call of max 20.000 rows.
        response_rows = []
        response_rows += response_object.json()["value"]

        # Loop through additional pages of data if any, and append to 'rows'-list.
        while "@odata.nextLink" in response_object.json():
            new_url = response_object.json()["@odata.nextLink"]
            response_object = requests.get(url=new_url, headers=self.headers)
            entity_data = response_object.json()["value"]
            response_rows += entity_data

        # turn the rows-list into a Dataframe and add the company name form the company_dict.
        df_company_data = DataFrame(response_rows)
        df_company_data["company_name"] = company_name

        # Append the dataframe to the total_rows list.
        company_objects.append(df_company_data)

        return company_objects

    def get_data(self, entity: str = None, entities: list = None, odata: bool = False, company_id: str = None) -> Union[DataFrame, dict]:
        """Function that sends an API call to the BC API Endpoint to extract data and returns it in a Dataframe. The
        connection defaults to make use of the standard BC API (V2) endpoints and returns entities of all companies
        within the tenant unless the optional company_id argument is filled with a company_id to fetch data
        of a single company.

        Optional: When required to make use of Odata webservices, set the odata parameter to True.
        Optional: When required to fetch data from a single company_id in BC, set the parameter equal to the company_id.
        """
        if entity:
            # Verify the argument in the Odata parameter is in an accepted answer-list.
            valid = (False, True)
            if odata not in valid:
                raise ValueError(
                    "results: odata parameter must be set to True or False. If not entered as an argument"
                    " the default value wil be False"
                )

            # Get all companies within the environment and create a dict with id and name of the companies.
            company_dict = self._get_companies()

            # Verify that if the company_id argument is entered, the company exists within the environment.
            if company_id is not None:
                if company_id not in company_dict.keys():
                    raise ValueError(
                        "results: The entered company_id doesn't exist within the selected environment,"
                        " please check the parameters"
                    )
                else:
                    company_dict = dict(
                        {k: v for k, v in company_dict.items() if k == company_id}
                    )

            # Create an empty list to fill with dataframe objects for one or more company specific entity data.
            list_company_dataframes = []

            if not odata:
                for comp_id in company_dict:
                    print(comp_id)
                    print("test")
                    company_name = company_dict[comp_id]
                    # Sends a request to the standard BC API (V2) to get data for a specific entity.
                    response = requests.get(
                        f"https://api.businesscentral.dynamics.com/v2.0/{self.environment_id}/api/v2.0/companies({comp_id})/"
                        f"{entity}",
                        headers=self.headers,
                    )

                    if response.status_code != 200:
                        raise ValueError(
                            "results: The selected endpoint doesn't exist within the scope of the current"
                            " combination of parameters, please check the parameters"
                        )
                    else:
                        self._append_rows(response, list_company_dataframes, company_name)

                # Combine all dataframes to a single dataframe and return the single dataframe as a result.
                list_company_dataframes = pd.concat(list_company_dataframes)
                return list_company_dataframes

            else:
                for comp_id in company_dict:
                    company_name = company_dict[comp_id]
                    # Sends a request to the Odata webservice in BC to get data for a specific endpoint.
                    response = requests.get(
                        f"https://api.businesscentral.dynamics.com/v2.0/{self.tenant_id}/{self.environment_id}/ODataV4/"
                        f"Company('{company_name}')/{entity}",
                        headers=self.headers,
                    )

                    if response.status_code != 200:
                        raise ValueError(
                            "results: The selected endpoint doesn't exist within the scope of the current"
                            " combination of parameters, please check the parameters"
                        )
                    else:
                        self._append_rows(response, list_company_dataframes, company_name)

                # Combine all dataframes to a single dataframe and return the single dataframe as a result.
                list_company_dataframes = pd.concat(list_company_dataframes)
                return list_company_dataframes

        if entities:
            data = self.execute_parallel(
                get_data_function=self.get_data,
                entity_list=entities,
                odata=odata,
                company_id=company_id
            )
            return data
        
        else:
            raise "You need to provide either a endpoint or list of endpoints."