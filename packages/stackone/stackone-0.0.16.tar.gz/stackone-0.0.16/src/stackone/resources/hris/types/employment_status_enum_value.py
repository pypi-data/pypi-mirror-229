# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EmploymentStatusEnumValue(str, enum.Enum):
    ACTIVE = "active"
    PENDING = "pending"
    TERMINATED = "terminated"
    LEAVE = "leave"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        active: typing.Callable[[], T_Result],
        pending: typing.Callable[[], T_Result],
        terminated: typing.Callable[[], T_Result],
        leave: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EmploymentStatusEnumValue.ACTIVE:
            return active()
        if self is EmploymentStatusEnumValue.PENDING:
            return pending()
        if self is EmploymentStatusEnumValue.TERMINATED:
            return terminated()
        if self is EmploymentStatusEnumValue.LEAVE:
            return leave()
        if self is EmploymentStatusEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
