# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from t2iapi.combined import combined_requests_pb2 as t2iapi_dot_combined_dot_combined__requests__pb2
from t2iapi.context import context_responses_pb2 as t2iapi_dot_context_dot_context__responses__pb2


class CombinedServiceStub(object):
    """
    Service to handle combined manipulations which result from at least two different manipulations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateContextStateWithAssociationAndSetOperatingMode = channel.unary_unary(
                '/t2iapi.combined.CombinedService/CreateContextStateWithAssociationAndSetOperatingMode',
                request_serializer=t2iapi_dot_combined_dot_combined__requests__pb2.CreateContextStateWithAssociationAndSetOperatingModeRequest.SerializeToString,
                response_deserializer=t2iapi_dot_context_dot_context__responses__pb2.CreateContextStateWithAssociationResponse.FromString,
                )


class CombinedServiceServicer(object):
    """
    Service to handle combined manipulations which result from at least two different manipulations.
    """

    def CreateContextStateWithAssociationAndSetOperatingMode(self, request, context):
        """
        Create a new or adapt an existing context state with the requested @ContextAssociation and
        set the requested @OperatingMode for the referenced operation.
        The context state @Handle which was created or adapted shall be returned.
        The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
        If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CombinedServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateContextStateWithAssociationAndSetOperatingMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateContextStateWithAssociationAndSetOperatingMode,
                    request_deserializer=t2iapi_dot_combined_dot_combined__requests__pb2.CreateContextStateWithAssociationAndSetOperatingModeRequest.FromString,
                    response_serializer=t2iapi_dot_context_dot_context__responses__pb2.CreateContextStateWithAssociationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            't2iapi.combined.CombinedService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CombinedService(object):
    """
    Service to handle combined manipulations which result from at least two different manipulations.
    """

    @staticmethod
    def CreateContextStateWithAssociationAndSetOperatingMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/CreateContextStateWithAssociationAndSetOperatingMode',
            t2iapi_dot_combined_dot_combined__requests__pb2.CreateContextStateWithAssociationAndSetOperatingModeRequest.SerializeToString,
            t2iapi_dot_context_dot_context__responses__pb2.CreateContextStateWithAssociationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
