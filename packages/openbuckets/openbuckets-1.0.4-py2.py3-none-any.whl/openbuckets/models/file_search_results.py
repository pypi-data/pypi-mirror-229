# coding: utf-8

"""
    OpenBuckets API

    The OpenBuckets web-based tool is a powerful utility that allows users to quickly locate open buckets in cloud storage systems through a simple query. In addition, it provides a convenient way to search for various file types across these open buckets, making it an essential tool for security professionals, researchers, and anyone interested in discovering exposed data. This Postman collection aims to showcase the capabilities of OpenBuckets by providing a set of API requests that demonstrate how to leverage its features. By following this collection, you'll learn how to utilize OpenBuckets to identify open buckets and search for specific file types within them.

    The version of the OpenAPI document: 1.0.0
    Contact: support@openbuckets.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openbuckets.models.file_search_results_files_inner import FileSearchResultsFilesInner
from openbuckets.models.file_search_results_meta import FileSearchResultsMeta
from openbuckets.models.file_search_results_query import FileSearchResultsQuery

class FileSearchResults(BaseModel):
    """
    The search results for files.
    """
    files: Optional[conlist(FileSearchResultsFilesInner)] = Field(None, description="An array of files.")
    meta: Optional[FileSearchResultsMeta] = None
    query: Optional[FileSearchResultsQuery] = None
    __properties = ["files", "meta", "query"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FileSearchResults:
        """Create an instance of FileSearchResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FileSearchResults:
        """Create an instance of FileSearchResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileSearchResults.parse_obj(obj)

        _obj = FileSearchResults.parse_obj({
            "files": [FileSearchResultsFilesInner.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
            "meta": FileSearchResultsMeta.from_dict(obj.get("meta")) if obj.get("meta") is not None else None,
            "query": FileSearchResultsQuery.from_dict(obj.get("query")) if obj.get("query") is not None else None
        })
        return _obj


