# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.not_implemented_error import NotImplementedError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...types.connect_session import ConnectSession
from ...types.connect_session_create_categories_item import ConnectSessionCreateCategoriesItem
from ...types.connect_session_token import ConnectSessionToken

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ConnectSessionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        categories: typing.Optional[typing.List[ConnectSessionCreateCategoriesItem]] = OMIT,
        provider: typing.Optional[str] = OMIT,
        origin_owner_id: str,
        origin_owner_name: str,
        origin_username: typing.Optional[str] = OMIT,
        expires_in: typing.Optional[float] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> ConnectSessionToken:
        """
        Parameters:
            - categories: typing.Optional[typing.List[ConnectSessionCreateCategoriesItem]]. The categories of the provider to connect to

            - provider: typing.Optional[str]. The provider to connect to

            - origin_owner_id: str. The origin owner identifier

            - origin_owner_name: str. The origin owner name

            - origin_username: typing.Optional[str]. The origin username

            - expires_in: typing.Optional[float]. How long the session should be valid for in seconds

            - metadata: typing.Optional[typing.Dict[str, typing.Any]]. The metadata for the connection
        """
        _request: typing.Dict[str, typing.Any] = {
            "origin_owner_id": origin_owner_id,
            "origin_owner_name": origin_owner_name,
        }
        if categories is not OMIT:
            _request["categories"] = categories
        if provider is not OMIT:
            _request["provider"] = provider
        if origin_username is not OMIT:
            _request["origin_username"] = origin_username
        if expires_in is not OMIT:
            _request["expires_in"] = expires_in
        if metadata is not OMIT:
            _request["metadata"] = metadata
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "connect_sessions"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectSessionToken, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def authenticate(self, *, token: str) -> ConnectSession:
        """
        Parameters:
            - token: str. The token to authenticate with
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "connect_sessions/authenticate"),
            json=jsonable_encoder({"token": token}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectSession, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncConnectSessionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        categories: typing.Optional[typing.List[ConnectSessionCreateCategoriesItem]] = OMIT,
        provider: typing.Optional[str] = OMIT,
        origin_owner_id: str,
        origin_owner_name: str,
        origin_username: typing.Optional[str] = OMIT,
        expires_in: typing.Optional[float] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> ConnectSessionToken:
        """
        Parameters:
            - categories: typing.Optional[typing.List[ConnectSessionCreateCategoriesItem]]. The categories of the provider to connect to

            - provider: typing.Optional[str]. The provider to connect to

            - origin_owner_id: str. The origin owner identifier

            - origin_owner_name: str. The origin owner name

            - origin_username: typing.Optional[str]. The origin username

            - expires_in: typing.Optional[float]. How long the session should be valid for in seconds

            - metadata: typing.Optional[typing.Dict[str, typing.Any]]. The metadata for the connection
        """
        _request: typing.Dict[str, typing.Any] = {
            "origin_owner_id": origin_owner_id,
            "origin_owner_name": origin_owner_name,
        }
        if categories is not OMIT:
            _request["categories"] = categories
        if provider is not OMIT:
            _request["provider"] = provider
        if origin_username is not OMIT:
            _request["origin_username"] = origin_username
        if expires_in is not OMIT:
            _request["expires_in"] = expires_in
        if metadata is not OMIT:
            _request["metadata"] = metadata
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "connect_sessions"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectSessionToken, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def authenticate(self, *, token: str) -> ConnectSession:
        """
        Parameters:
            - token: str. The token to authenticate with
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "connect_sessions/authenticate"),
            json=jsonable_encoder({"token": token}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConnectSession, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
