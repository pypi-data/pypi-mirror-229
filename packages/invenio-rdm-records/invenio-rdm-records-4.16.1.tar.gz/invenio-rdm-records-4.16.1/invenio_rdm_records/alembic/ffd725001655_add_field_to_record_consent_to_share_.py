#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Add field to record consent to share personal data for access request."""

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ffd725001655"
down_revision = "a2a6819f14f1"
branch_labels = ()
depends_on = "cfcb8cb78708"


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "files_objecttags",
        "key",
        existing_type=sa.TEXT(),
        type_=sa.String(length=255),
        existing_nullable=False,
    )
    op.add_column(
        "rdm_records_access_request_tokens",
        sa.Column(
            "consent_to_share_personal_data", sa.String(length=255), nullable=False
        ),
    )
    op.alter_column(
        "rdm_records_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "record_id",
        existing_type=postgresql.UUID(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "record_id",
        existing_type=postgresql.UUID(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "records_metadata_version",
        "json",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=sa.JSON()
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
        .with_variant(
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
        )
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
        existing_nullable=True,
        autoincrement=False,
    )
    op.drop_index("ix_transaction_user_id", table_name="transaction")
    op.drop_constraint(
        "fk_transaction_user_id_accounts_user", "transaction", type_="foreignkey"
    )
    op.drop_column("transaction", "user_id")
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "transaction",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.create_foreign_key(
        "fk_transaction_user_id_accounts_user",
        "transaction",
        "accounts_user",
        ["user_id"],
        ["id"],
    )
    op.create_index("ix_transaction_user_id", "transaction", ["user_id"], unique=False)
    op.alter_column(
        "records_metadata_version",
        "json",
        existing_type=sa.JSON()
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
        .with_variant(
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
        )
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
        type_=postgresql.JSON(astext_type=sa.Text()),
        existing_nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "record_id",
        existing_type=postgresql.UUID(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "record_id",
        existing_type=postgresql.UUID(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.drop_column(
        "rdm_records_access_request_tokens", "consent_to_share_personal_data"
    )
    op.alter_column(
        "files_objecttags",
        "key",
        existing_type=sa.String(length=255),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
