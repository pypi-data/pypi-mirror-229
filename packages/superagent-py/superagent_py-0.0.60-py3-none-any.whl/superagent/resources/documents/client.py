# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.document_list_output import DocumentListOutput
from ...types.document_ouput import DocumentOuput
from ...types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DocumentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_documents(self) -> DocumentListOutput:
        """
        List all documents
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/documents"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentListOutput, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_document(
        self,
        *,
        type: str,
        url: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        content: typing.Optional[str] = OMIT,
        name: str,
        authorization: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        from_page: typing.Optional[int] = OMIT,
        to_page: typing.Optional[int] = OMIT,
        splitter: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> DocumentOuput:
        """
        Create a new document

        Parameters:
            - type: str.

            - url: typing.Optional[str].

            - description: typing.Optional[str].

            - content: typing.Optional[str].

            - name: str.

            - authorization: typing.Optional[typing.Dict[str, typing.Any]].

            - metadata: typing.Optional[typing.Dict[str, typing.Any]].

            - from_page: typing.Optional[int].

            - to_page: typing.Optional[int].

            - splitter: typing.Optional[typing.Dict[str, typing.Any]].
        """
        _request: typing.Dict[str, typing.Any] = {"type": type, "name": name}
        if url is not OMIT:
            _request["url"] = url
        if description is not OMIT:
            _request["description"] = description
        if content is not OMIT:
            _request["content"] = content
        if authorization is not OMIT:
            _request["authorization"] = authorization
        if metadata is not OMIT:
            _request["metadata"] = metadata
        if from_page is not OMIT:
            _request["from_page"] = from_page
        if to_page is not OMIT:
            _request["to_page"] = to_page
        if splitter is not OMIT:
            _request["splitter"] = splitter
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/documents"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_document(self, document_id: str) -> DocumentOuput:
        """
        Get a specific document

        Parameters:
            - document_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/documents/{document_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def patch_document(self, document_id: str, *, request: typing.Dict[str, typing.Any]) -> DocumentOuput:
        """
        Patch a specific document

        Parameters:
            - document_id: str.

            - request: typing.Dict[str, typing.Any].
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/documents/{document_id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_document(self, document_id: str) -> DocumentOuput:
        """
        Delete a specific document

        Parameters:
            - document_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/documents/{document_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDocumentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_documents(self) -> DocumentListOutput:
        """
        List all documents
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/documents"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentListOutput, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_document(
        self,
        *,
        type: str,
        url: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        content: typing.Optional[str] = OMIT,
        name: str,
        authorization: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        from_page: typing.Optional[int] = OMIT,
        to_page: typing.Optional[int] = OMIT,
        splitter: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> DocumentOuput:
        """
        Create a new document

        Parameters:
            - type: str.

            - url: typing.Optional[str].

            - description: typing.Optional[str].

            - content: typing.Optional[str].

            - name: str.

            - authorization: typing.Optional[typing.Dict[str, typing.Any]].

            - metadata: typing.Optional[typing.Dict[str, typing.Any]].

            - from_page: typing.Optional[int].

            - to_page: typing.Optional[int].

            - splitter: typing.Optional[typing.Dict[str, typing.Any]].
        """
        _request: typing.Dict[str, typing.Any] = {"type": type, "name": name}
        if url is not OMIT:
            _request["url"] = url
        if description is not OMIT:
            _request["description"] = description
        if content is not OMIT:
            _request["content"] = content
        if authorization is not OMIT:
            _request["authorization"] = authorization
        if metadata is not OMIT:
            _request["metadata"] = metadata
        if from_page is not OMIT:
            _request["from_page"] = from_page
        if to_page is not OMIT:
            _request["to_page"] = to_page
        if splitter is not OMIT:
            _request["splitter"] = splitter
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/documents"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_document(self, document_id: str) -> DocumentOuput:
        """
        Get a specific document

        Parameters:
            - document_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/documents/{document_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def patch_document(self, document_id: str, *, request: typing.Dict[str, typing.Any]) -> DocumentOuput:
        """
        Patch a specific document

        Parameters:
            - document_id: str.

            - request: typing.Dict[str, typing.Any].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/documents/{document_id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_document(self, document_id: str) -> DocumentOuput:
        """
        Delete a specific document

        Parameters:
            - document_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/documents/{document_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentOuput, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
