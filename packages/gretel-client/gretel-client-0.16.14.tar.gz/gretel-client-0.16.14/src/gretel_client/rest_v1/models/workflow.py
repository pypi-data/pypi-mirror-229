# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from datetime import datetime
from inspect import getfullargspec
from typing import Any, Dict, Optional

from pydantic import BaseModel, StrictStr, validator

from gretel_client.rest_v1.models.project import Project
from gretel_client.rest_v1.models.user_profile import UserProfile


class Workflow(BaseModel):
    """
    Next Tag: 12
    """

    id: StrictStr = ...
    name: StrictStr = ...
    project_id: StrictStr = ...
    project: Optional[Project] = None
    config: Optional[Dict[str, Any]] = None
    runner_mode: Optional[StrictStr] = None
    next_scheduled_run: Optional[datetime] = None
    created_by: StrictStr = ...
    created_at: datetime = ...
    updated_at: Optional[datetime] = None
    created_by_profile: Optional[UserProfile] = None
    __properties = [
        "id",
        "name",
        "project_id",
        "project",
        "config",
        "runner_mode",
        "next_scheduled_run",
        "created_by",
        "created_at",
        "updated_at",
        "created_by_profile",
    ]

    @validator("runner_mode")
    def runner_mode_validate_enum(cls, v):
        if v is None:
            return v
        if v not in ("RUNNER_MODE_UNSET", "RUNNER_MODE_CLOUD", "RUNNER_MODE_HYBRID"):
            raise ValueError(
                "must be one of enum values ('RUNNER_MODE_UNSET', 'RUNNER_MODE_CLOUD', 'RUNNER_MODE_HYBRID')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Workflow:
        """Create an instance of Workflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict["project"] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by_profile
        if self.created_by_profile:
            _dict["created_by_profile"] = self.created_by_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Workflow:
        """Create an instance of Workflow from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Workflow.parse_obj(obj)

        _obj = Workflow.parse_obj(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "project_id": obj.get("project_id"),
                "project": Project.from_dict(obj.get("project"))
                if obj.get("project") is not None
                else None,
                "config": obj.get("config"),
                "runner_mode": obj.get("runner_mode"),
                "next_scheduled_run": obj.get("next_scheduled_run"),
                "created_by": obj.get("created_by"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "created_by_profile": UserProfile.from_dict(
                    obj.get("created_by_profile")
                )
                if obj.get("created_by_profile") is not None
                else None,
            }
        )
        return _obj
