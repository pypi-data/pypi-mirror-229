{"version":3,"file":"c.3215b59d.js","sources":["../../../../src/util/line-break-transformer.ts","../../../../src/logs-webserial/ewt-console.ts","../../../../src/logs-webserial/logs-webserial-dialog.ts"],"sourcesContent":["export class LineBreakTransformer implements Transformer<string, string> {\n  private chunks = \"\";\n\n  transform(\n    chunk: string,\n    controller: TransformStreamDefaultController<string>\n  ) {\n    // Append new chunks to existing chunks.\n    this.chunks += chunk;\n    // For each line breaks in chunks, send the parsed lines out.\n    const lines = this.chunks.split(\"\\r\\n\");\n    this.chunks = lines.pop()!;\n    lines.forEach((line) => controller.enqueue(line + \"\\r\\n\"));\n  }\n\n  flush(controller: TransformStreamDefaultController<string>) {\n    // When the stream is closed, flush any remaining chunks out.\n    controller.enqueue(this.chunks);\n  }\n}\n","import { ColoredConsole, coloredConsoleStyles } from \"../util/console-color\";\nimport { sleep } from \"../util/sleep\";\nimport { LineBreakTransformer } from \"../util/line-break-transformer\";\nimport { Logger } from \"../const\";\n\nexport class EwtConsole extends HTMLElement {\n  public port!: SerialPort;\n  public logger!: Logger;\n  public allowInput = true;\n\n  private _console?: ColoredConsole;\n  private _cancelConnection?: () => Promise<void>;\n\n  public logs(): string {\n    return this._console?.logs() || \"\";\n  }\n\n  public connectedCallback() {\n    if (this._console) {\n      return;\n    }\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host, input {\n          background-color: #1c1c1c;\n          color: #ddd;\n          font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier,\n            monospace;\n          line-height: 1.45;\n          display: flex;\n          flex-direction: column;\n        }\n        form {\n          display: flex;\n          align-items: center;\n          padding: 0 8px 0 16px;\n        }\n        input {\n          flex: 1;\n          padding: 4px;\n          margin: 0 8px;\n          border: 0;\n          outline: none;\n        }\n        ${coloredConsoleStyles}\n      </style>\n      <div class=\"log\"></div>\n      ${\n        this.allowInput\n          ? `<form>\n                >\n                <input autofocus>\n              </form>\n            `\n          : \"\"\n      }\n    `;\n\n    this._console = new ColoredConsole(this.shadowRoot!.querySelector(\"div\")!);\n\n    if (this.allowInput) {\n      const input = this.shadowRoot!.querySelector(\"input\")!;\n\n      this.addEventListener(\"click\", () => {\n        // Only focus input if user didn't select some text\n        if (getSelection()?.toString() === \"\") {\n          input.focus();\n        }\n      });\n\n      input.addEventListener(\"keydown\", (ev) => {\n        if (ev.key === \"Enter\") {\n          ev.preventDefault();\n          ev.stopPropagation();\n          this._sendCommand();\n        }\n      });\n    }\n\n    const abortController = new AbortController();\n    const connection = this._connect(abortController.signal);\n    this._cancelConnection = () => {\n      abortController.abort();\n      return connection;\n    };\n  }\n\n  private async _connect(abortSignal: AbortSignal) {\n    this.logger.debug(\"Starting console read loop\");\n    try {\n      await this.port\n        .readable!.pipeThrough(new TextDecoderStream(), {\n          signal: abortSignal,\n        })\n        .pipeThrough(new TransformStream(new LineBreakTransformer()))\n        .pipeTo(\n          new WritableStream({\n            write: (chunk) => {\n              this._console!.addLine(chunk.replace(\"\\r\", \"\"));\n            },\n          })\n        );\n      if (!abortSignal.aborted) {\n        this._console!.addLine(\"\");\n        this._console!.addLine(\"\");\n        this._console!.addLine(\"Terminal disconnected\");\n      }\n    } catch (e) {\n      this._console!.addLine(\"\");\n      this._console!.addLine(\"\");\n      this._console!.addLine(`Terminal disconnected: ${e}`);\n    } finally {\n      await sleep(100);\n      this.logger.debug(\"Finished console read loop\");\n    }\n  }\n\n  private async _sendCommand() {\n    const input = this.shadowRoot!.querySelector(\"input\")!;\n    const command = input.value;\n    const encoder = new TextEncoder();\n    const writer = this.port.writable!.getWriter();\n    await writer.write(encoder.encode(command + \"\\r\\n\"));\n    this._console!.addLine(`> ${command}\\r\\n`);\n    input.value = \"\";\n    input.focus();\n    try {\n      writer.releaseLock();\n    } catch (err) {\n      console.error(\"Ignoring release lock error\", err);\n    }\n  }\n\n  public async disconnect() {\n    if (this._cancelConnection) {\n      await this._cancelConnection();\n      this._cancelConnection = undefined;\n    }\n  }\n\n  public async reset() {\n    this.logger.debug(\"Triggering reset.\");\n    await this.port.setSignals({\n      dataTerminalReady: false,\n      requestToSend: true,\n    });\n    await this.port.setSignals({\n      dataTerminalReady: false,\n      requestToSend: false,\n    });\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n  }\n}\n\ncustomElements.define(\"ewt-console\", EwtConsole);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ewt-console\": EwtConsole;\n  }\n}\n","import { LitElement, html, css, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-button\";\nimport \"./ewt-console\";\nimport { textDownload } from \"../util/file-download\";\nimport type { EwtConsole } from \"./ewt-console\";\nimport { basename } from \"../util/basename\";\nimport { openEditDialog } from \"../editor\";\nimport { getConfiguration } from \"../api/configuration\";\nimport { esphomeDialogStyles } from \"../styles\";\n\n@customElement(\"esphome-logs-webserial-dialog\")\nclass ESPHomeLogsWebSerialDialog extends LitElement {\n  @property() public configuration?: string;\n\n  @property() public port!: SerialPort;\n\n  @property() public closePortOnClose!: boolean;\n\n  @query(\"ewt-console\") private _console!: EwtConsole;\n\n  @state() private _isPico = false;\n\n  protected render() {\n    return html`\n      <mwc-dialog\n        open\n        .heading=${this.configuration ? `Logs ${this.configuration}` : \"Logs\"}\n        scrimClickAction\n        @closed=${this._handleClose}\n      >\n        <ewt-console\n          .port=${this.port}\n          .logger=${console}\n          .allowInput=${false}\n        ></ewt-console>\n        <mwc-button\n          slot=\"secondaryAction\"\n          label=\"Download Logs\"\n          @click=${this._downloadLogs}\n        ></mwc-button>\n        ${this.configuration\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                dialogAction=\"close\"\n                label=\"Edit\"\n                @click=${this._openEdit}\n              ></mwc-button>\n            `\n          : \"\"}\n        ${this._isPico\n          ? \"\"\n          : html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                label=\"Reset Device\"\n                @click=${this._resetDevice}\n              ></mwc-button>\n            `}\n        <mwc-button\n          slot=\"primaryAction\"\n          dialogAction=\"close\"\n          label=\"Close\"\n        ></mwc-button>\n      </mwc-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (this.configuration) {\n      getConfiguration(this.configuration).then((config) => {\n        this._isPico = config.esp_platform === \"RP2040\";\n      });\n    }\n  }\n\n  private async _openEdit() {\n    if (this.configuration) openEditDialog(this.configuration);\n  }\n\n  private async _handleClose() {\n    await this._console.disconnect();\n    if (this.closePortOnClose) {\n      await this.port.close();\n    }\n    this.parentNode!.removeChild(this);\n  }\n\n  private async _resetDevice() {\n    await this._console.reset();\n  }\n\n  private _downloadLogs() {\n    textDownload(\n      this._console.logs(),\n      `${\n        this.configuration ? `${basename(this.configuration)}_logs` : \"logs\"\n      }.txt`\n    );\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    css`\n      mwc-dialog {\n        --mdc-dialog-max-width: 90vw;\n      }\n      ewt-console {\n        width: calc(80vw - 48px);\n        height: calc(90vh - 128px);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-logs-webserial-dialog\": ESPHomeLogsWebSerialDialog;\n  }\n}\n"],"names":["LineBreakTransformer","constructor","this","chunks","transform","chunk","controller","lines","split","pop","forEach","line","enqueue","flush","EwtConsole","HTMLElement","allowInput","logs","_a","_console","connectedCallback","attachShadow","mode","innerHTML","coloredConsoleStyles","ColoredConsole","shadowRoot","querySelector","input","addEventListener","getSelection","toString","focus","ev","key","preventDefault","stopPropagation","_sendCommand","abortController","AbortController","connection","_connect","signal","_cancelConnection","abort","async","abortSignal","logger","debug","port","readable","pipeThrough","TextDecoderStream","TransformStream","pipeTo","WritableStream","write","addLine","replace","aborted","e","sleep","command","value","encoder","TextEncoder","writer","writable","getWriter","encode","releaseLock","err","console","error","undefined","setSignals","dataTerminalReady","requestToSend","Promise","resolve","setTimeout","customElements","define","ESPHomeLogsWebSerialDialog","LitElement","_isPico","render","html","configuration","_handleClose","_downloadLogs","_openEdit","_resetDevice","firstUpdated","changedProps","super","getConfiguration","then","config","esp_platform","openEditDialog","disconnect","closePortOnClose","close","parentNode","removeChild","reset","textDownload","basename","styles","esphomeDialogStyles","css","__decorate","property","prototype","query","state","customElement"],"mappings":"qOAAaA,EAAbC,cACUC,KAAMC,OAAG,EAkBlB,CAhBCC,UACEC,EACAC,GAGAJ,KAAKC,QAAUE,EAEf,MAAME,EAAQL,KAAKC,OAAOK,MAAM,QAChCN,KAAKC,OAASI,EAAME,MACpBF,EAAMG,SAASC,GAASL,EAAWM,QAAQD,EAAO,SACnD,CAEDE,MAAMP,GAEJA,EAAWM,QAAQV,KAAKC,OACzB,ECbG,MAAOW,UAAmBC,YAAhCd,kCAGSC,KAAUc,YAAG,CAkJrB,CA7IQC,aACL,eAAOC,EAAAhB,KAAKiB,+BAAUF,SAAU,EACjC,CAEMG,oBACL,GAAIlB,KAAKiB,SACP,OA2CF,GAzCmBjB,KAAKmB,aAAa,CAAEC,KAAM,SAElCC,UAAY,ilBAuBjBC,2DAIFtB,KAAKc,WACD,oGAKA,WAIRd,KAAKiB,SAAW,IAAIM,EAAevB,KAAKwB,WAAYC,cAAc,QAE9DzB,KAAKc,WAAY,CACnB,MAAMY,EAAQ1B,KAAKwB,WAAYC,cAAc,SAE7CzB,KAAK2B,iBAAiB,SAAS,WAEM,gBAA/BC,qCAAgBC,aAClBH,EAAMI,OACP,IAGHJ,EAAMC,iBAAiB,WAAYI,IAClB,UAAXA,EAAGC,MACLD,EAAGE,iBACHF,EAAGG,kBACHlC,KAAKmC,eACN,GAEJ,CAED,MAAMC,EAAkB,IAAIC,gBACtBC,EAAatC,KAAKuC,SAASH,EAAgBI,QACjDxC,KAAKyC,kBAAoB,KACvBL,EAAgBM,QACTJ,EAEV,CAEOK,eAAeC,GACrB5C,KAAK6C,OAAOC,MAAM,8BAClB,UACQ9C,KAAK+C,KACRC,SAAUC,YAAY,IAAIC,kBAAqB,CAC9CV,OAAQI,IAETK,YAAY,IAAIE,gBAAgB,IAAIrD,IACpCsD,OACC,IAAIC,eAAe,CACjBC,MAAQnD,IACNH,KAAKiB,SAAUsC,QAAQpD,EAAMqD,QAAQ,KAAM,IAAI,KAIlDZ,EAAYa,UACfzD,KAAKiB,SAAUsC,QAAQ,IACvBvD,KAAKiB,SAAUsC,QAAQ,IACvBvD,KAAKiB,SAAUsC,QAAQ,yBAS1B,CAPC,MAAOG,GACP1D,KAAKiB,SAAUsC,QAAQ,IACvBvD,KAAKiB,SAAUsC,QAAQ,IACvBvD,KAAKiB,SAAUsC,QAAQ,0BAA0BG,IAClD,CAAS,cACFC,EAAM,KACZ3D,KAAK6C,OAAOC,MAAM,6BACnB,CACF,CAEOH,qBACN,MAAMjB,EAAQ1B,KAAKwB,WAAYC,cAAc,SACvCmC,EAAUlC,EAAMmC,MAChBC,EAAU,IAAIC,YACdC,EAAShE,KAAK+C,KAAKkB,SAAUC,kBAC7BF,EAAOV,MAAMQ,EAAQK,OAAOP,EAAU,SAC5C5D,KAAKiB,SAAUsC,QAAQ,KAAKK,SAC5BlC,EAAMmC,MAAQ,GACdnC,EAAMI,QACN,IACEkC,EAAOI,aAGR,CAFC,MAAOC,GACPC,QAAQC,MAAM,8BAA+BF,EAC9C,CACF,CAEM1B,mBACD3C,KAAKyC,0BACDzC,KAAKyC,oBACXzC,KAAKyC,uBAAoB+B,EAE5B,CAEM7B,cACL3C,KAAK6C,OAAOC,MAAM,2BACZ9C,KAAK+C,KAAK0B,WAAW,CACzBC,mBAAmB,EACnBC,eAAe,UAEX3E,KAAK+C,KAAK0B,WAAW,CACzBC,mBAAmB,EACnBC,eAAe,UAEX,IAAIC,SAASC,GAAYC,WAAWD,EAAS,MACpD,EAGHE,eAAeC,OAAO,cAAepE,GC/IrC,IAAMqE,EAAN,cAAyCC,EAAzCnF,kCASmBC,KAAOmF,SAAG,CA8F5B,CA5FWC,SACR,OAAOC,CAAI;;;mBAGIrF,KAAKsF,cAAgB,QAAQtF,KAAKsF,gBAAkB;;kBAErDtF,KAAKuF;;;kBAGLvF,KAAK+C;oBACHuB;yBACI;;;;;mBAKLtE,KAAKwF;;UAEdxF,KAAKsF,cACHD,CAAI;;;;;yBAKSrF,KAAKyF;;cAGlB;UACFzF,KAAKmF,QACH,GACAE,CAAI;;;;yBAISrF,KAAK0F;;;;;;;;;KAU3B,CAESC,aAAaC,GACrBC,MAAMF,aAAaC,GACf5F,KAAKsF,eACPQ,EAAiB9F,KAAKsF,eAAeS,MAAMC,IACzChG,KAAKmF,QAAkC,WAAxBa,EAAOC,YAAyB,GAGpD,CAEOtD,kBACF3C,KAAKsF,eAAeY,EAAelG,KAAKsF,cAC7C,CAEO3C,2BACA3C,KAAKiB,SAASkF,aAChBnG,KAAKoG,wBACDpG,KAAK+C,KAAKsD,QAElBrG,KAAKsG,WAAYC,YAAYvG,KAC9B,CAEO2C,2BACA3C,KAAKiB,SAASuF,OACrB,CAEOhB,gBACNiB,EACEzG,KAAKiB,SAASF,QAEZf,KAAKsF,cAAgB,GAAGoB,EAAS1G,KAAKsF,sBAAwB,QADhE,OAIH,GAEML,EAAA0B,OAAS,CACdC,EACAC,CAAG;;;;;;;;OA5FcC,EAAA,CAAlBC,KAAyC9B,EAAA+B,UAAA,qBAAA,GAEvBF,EAAA,CAAlBC,KAAoC9B,EAAA+B,UAAA,YAAA,GAElBF,EAAA,CAAlBC,KAA6C9B,EAAA+B,UAAA,wBAAA,GAEhBF,EAAA,CAA7BG,EAAM,gBAA6ChC,EAAA+B,UAAA,gBAAA,GAEnCF,EAAA,CAAhBI,KAAgCjC,EAAA+B,UAAA,eAAA,GAT7B/B,EAA0B6B,EAAA,CAD/BK,EAAc,kCACTlC"}