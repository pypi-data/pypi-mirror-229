"use strict";(self.webpackChunk_axlair_jupyterlab_vim=self.webpackChunk_axlair_jupyterlab_vim||[]).push([[353],{353:(e,t,o)=>{o.r(t),o.d(t,{default:()=>p});var n=o(212),i=o(702),l=o(354),d=o(426),a=o(829),c=o(211),s=o(204);class r{constructor({enabled:e,userKeybindings:t}){this._lastActiveEditor=null,this.enabled=e,this.userKeybindings=null!=t?t:[]}async onActiveEditorChanged(e,t){t&&(await t.content.ready,this.modifyEditor(t.content.editor))}updateLastActive(){this._lastActiveEditor&&this.modifyEditor(this._lastActiveEditor)}modifyEditor(e){if(!e)throw Error("Editor not available");const t=e;this._lastActiveEditor=t;const o=t.editor;if(this.enabled){if(!t.getOption("vim")){t.setOption("vim",!0);const n=(0,a.getCM)(o);n.on("vim-mode-change",(()=>{e.host.dataset.jpVimModeName=n.state.vim.mode})),t.hasFocus=()=>!(!n.state.dialog||!n.state.dialog.contains(document.activeElement))||o.hasFocus}a.Vim.defineAction("undo",((t,o)=>{for(let t=0;t<o.repeat;t++)e.undo()})),a.Vim.defineAction("redo",((t,o)=>{for(let t=0;t<o.repeat;t++)e.redo()}));const n=(0,a.getCM)(o);return["normal","visual","insert"].forEach((e=>a.Vim.mapclear(e))),this.userKeybindings.forEach((({command:e,keys:t,context:o,mapfn:n,enabled:i})=>{i&&("map"===n?a.Vim.map(e,t,o):a.Vim.noremap(e,t,o))})),a.Vim.handleKey(n,"<Esc>"),!0}return!!t.getOption("vim")&&(t.setOption("vim",!1),!1)}}class m extends r{constructor({commands:e,enabled:t,userKeybindings:o}){super({userKeybindings:o,enabled:t}),this._lastActiveCell=null,this._commands=e}onActiveCellChanged(e,t){this.modifyCell(t).catch(console.error)}updateLastActive(){this._lastActiveCell&&this.modifyCell(this._lastActiveCell)}async modifyCell(e){e&&(this._lastActiveCell=e,await e.ready,e.isDisposed?console.warn("Cell was already disposed, cannot setup vim mode"):this.modifyEditor(e.editor)&&this._modifyEdgeNavigation(e))}_modifyEdgeNavigation(e){const t=(o,n,i,l)=>{const d=n;let c=d.ch;const s=e;switch(null==l?void 0:l.lastMotion){case o.moveByLines:case o.moveByDisplayLines:case o.moveByScroll:case o.moveToColumn:case o.moveToEol:case t:c=l.lastHPos;break;default:l.lastHPos=c}const r=i.repeat+(i.repeatOffset||0);let m=i.forward?d.line+r:d.line-r;const u=o.firstLine(),C=o.lastLine(),v=o.findPosV(d,i.forward?r:-r,"line",l.lastHSPos);if((i.forward?v.line>m:v.line<m)&&(m=v.line,c=v.ch),!(m<u||m>C))return i.toFirstChar&&(c=function(e){if(!e)return 0;const t=e.search(/\S/);return-1===t?e.length:t}(o.getLine(m)),l.lastHPos=c),l.lastHSPos=o.charCoords(new a.CodeMirror.Pos(m,c),"div").left,new a.CodeMirror.Pos(m,c);if(null!==s&&"markdown"===s.model.type&&(i.handleArrow||(s.rendered=!0)),i.forward)if(i.handleArrow){const e=o.getCursor(),t=o.cm6.state.doc.line(C+1).length;e.line===C&&e.ch===t||(o.setCursor(C,t),this._commands.execute("notebook:move-cursor-down"))}else this._commands.execute("notebook:move-cursor-down");else if(i.handleArrow){const e=o.getCursor();0===e.line&&0===e.ch||(o.setCursor(0,0),this._commands.execute("notebook:move-cursor-up"))}else this._commands.execute("notebook:move-cursor-up")};a.Vim.defineMotion("moveByLinesOrCell",t),a.Vim.mapCommand("<Up>","motion","moveByLinesOrCell",{forward:!1,linewise:!0,handleArrow:!0},{context:"normal"}),a.Vim.mapCommand("<Down>","motion","moveByLinesOrCell",{forward:!0,linewise:!0,handleArrow:!0},{context:"normal"}),a.Vim.mapCommand("k","motion","moveByLinesOrCell",{forward:!1,linewise:!0},{context:"normal"}),a.Vim.mapCommand("j","motion","moveByLinesOrCell",{forward:!0,linewise:!0},{context:"normal"}),a.Vim.defineAction("moveCellDown",((e,t)=>{this._commands.execute("notebook:move-cell-down")})),a.Vim.defineAction("moveCellUp",((e,t)=>{this._commands.execute("notebook:move-cell-up")})),a.Vim.mapCommand("<C-e>","action","moveCellDown",{},{extra:"normal"}),a.Vim.mapCommand("<C-y>","action","moveCellUp",{},{extra:"normal"}),a.Vim.defineAction("splitCell",((e,t)=>{this._commands.execute("notebook:split-cell-at-cursor")})),a.Vim.mapCommand("-","action","splitCell",{},{extra:"normal"})}}var u=o(593);const C="@axlair/jupyterlab_vim",v="jupyterlab-vim:toggle";let b=!1,f=!0;const p={id:C,autoStart:!0,activate:async function(e,t,o,i,d){const p=s.Prec.highest(c.EditorView.theme({".cm-fat-cursor":{position:"absolute",background:"var(--jp-vim-cursor-color)",border:"none",whiteSpace:"pre"},"&:not(.cm-focused) .cm-fat-cursor":{background:"none",outline:"solid 1px var(--jp-vim-cursor-color)",color:"transparent !important"}}));o.addExtension({name:"vim",factory:e=>l.EditorExtensionRegistry.createConditionalExtension([p,(0,a.vim)({status:!1})])}),e.commands.addCommand(v,{label:"Enable Vim Mode",execute:()=>{i&&i.set(`${C}:plugin`,"enabled",!b)},isToggled:()=>b}),e.commands.addCommand("vim:enter-normal-mode",{label:"Enter Normal Vim Mode",execute:()=>{const o=e.shell.currentWidget;o?d.currentWidget===o?E.modifyEditor(d.currentWidget.content.editor):t.currentWidget===o?h.modifyCell(t.currentWidget.content.activeCell):console.warn("Current widget is not vim-enabled"):console.warn("Current widget not found")},isEnabled:()=>b});const g=(await i.get(`${C}:plugin`,"extraKeybindings")).composite,h=new m({commands:e.commands,enabled:b,userKeybindings:g}),E=new r({enabled:b&&f,userKeybindings:g});let w=null,y=!1;a.Vim.defineEx("write","w",(()=>{e.commands.execute("docmanager:save")})),a.Vim.defineEx("quit","q",(()=>{setTimeout((()=>{e.commands.execute("notebook:enter-command-mode")}))})),t.activeCellChanged.connect(h.onActiveCellChanged,h),d.currentChanged.connect(E.onActiveEditorChanged,E);const x=e.shell;async function A(o){const n=(await i.get(`${C}:plugin`,"extraKeybindings")).composite;b=!0===o.get("enabled").composite,f=!0===o.get("enabledInEditors").composite,e.commands.notifyCommandChanged(v),h.enabled=b,h.userKeybindings=n,E.enabled=b&&f,E.userKeybindings=n,b?(null==w||w.dispose(),y||(y=!0,await e.restored)):w=e.commands.addKeyBinding({command:"notebook:enter-command-mode",keys:["Escape"],selector:".jp-Notebook.jp-mod-editMode"}),t.forEach((e=>{e.node.dataset.jpVimMode=`${b}`})),d.forEach((e=>{e.node.dataset.jpVimMode=`${b&&f}`})),null==E||E.updateLastActive(),null==h||h.updateLastActive(),t.widgetAdded.connect(((e,t)=>{t.node.dataset.jpVimMode=`${b}`})),d.widgetAdded.connect(((e,t)=>{t.node.dataset.jpVimMode=`${b&&f}`}))}return x.currentChanged.connect((()=>{const e=x.currentWidget;e&&(d.currentWidget===e?E.modifyEditor(d.currentWidget.content.editor):t.currentWidget===e&&h.modifyCell(t.currentWidget.content.activeCell))})),function(e,t){const{commands:o,shell:i}=e;function l(e){const o=t.currentWidget;return!1!==e.activate&&o&&i.currentWidget!==o&&i.activateById(o.id),o}function d(){return null!==t.currentWidget&&t.currentWidget===e.shell.currentWidget}o.addCommand("vim:run-select-next-edit",{label:"Run Cell and Edit Next Cell",execute:e=>{const t=l(e);if(t){const{context:e,content:o}=t;n.NotebookActions.runAndAdvance(o,e.sessionContext),t.content.mode="edit"}},isEnabled:d}),o.addCommand("vim:run-cell-and-edit",{label:"Run Cell and Edit Cell",execute:e=>{const t=l(e);if(t){const{context:e,content:o}=t;n.NotebookActions.run(o,e.sessionContext),t.content.mode="edit"}},isEnabled:d}),o.addCommand("vim:cut-cell-and-edit",{label:"Cut Cell(s) and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.cut(e),e.mode="edit"}},isEnabled:d}),o.addCommand("vim:copy-cell-and-edit",{label:"Copy Cell(s) and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.copy(e),e.mode="edit"}},isEnabled:d}),o.addCommand("vim:paste-cell-and-edit",{label:"Paste Cell(s) and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.paste(e,"below"),e.mode="edit"}},isEnabled:d}),o.addCommand("vim:merge-and-edit",{label:"Merge and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.mergeCells(e),t.content.mode="edit"}},isEnabled:d}),o.addCommand("vim:enter-insert-mode",{label:"Enter Insert Mode",execute:e=>{const t=l(e);if(t){const{content:e}=t;if(null!==e.activeCell){const o=e.activeCell.editor;t.content.mode="edit";const n=(0,a.getCM)(o.editor);if(!n)return void console.error("CodeMirror vim wrapper not found");a.Vim.handleKey(n,"i")}}},isEnabled:d}),o.addCommand("vim:leave-insert-mode",{label:"Leave Insert Mode",execute:e=>{const t=l(e);if(t){const{content:e}=t;if(null!==e.activeCell){const t=e.activeCell.editor,o=(0,a.getCM)(t.editor);if(!o)return void console.error("CodeMirror vim wrapper not found");a.Vim.handleKey(o,"<Esc>")}}},isEnabled:d}),o.addCommand("vim:leave-current-mode",{label:'Move Insert to Normal to Jupyter Command Mode"',execute:e=>{const t=l(e);if(t){const{content:e}=t;if(null!==e.activeCell){const t=e.activeCell.editor,n=(0,a.getCM)(t.editor);if(!n)return void console.error("CodeMirror vim wrapper not found");const i=n.state.vim;i.insertMode||i.visualMode||null!==i.inputState.operator||null!==i.inputState.motion||0!==i.inputState.keyBuffer.length?a.Vim.handleKey(n,"<Esc>"):o.execute("notebook:enter-command-mode")}}},isEnabled:d}),o.addCommand("vim:select-below-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=l(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectBelow(t.content)}},isEnabled:d}),o.addCommand("vim:select-above-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=l(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectAbove(t.content)}},isEnabled:d}),o.addCommand("vim:select-first-cell",{label:"Select First Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;e.activeCellIndex=0,e.deselectAll(),null!==e.activeCell&&u.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}},isEnabled:d}),o.addCommand("vim:select-last-cell",{label:"Select Last Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;e.activeCellIndex=t.content.widgets.length-1,e.deselectAll(),null!==e.activeCell&&u.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}},isEnabled:d}),o.addCommand("vim:center-cell",{label:"Center Cell",execute:e=>{const t=l(e);t&&null!==t.content.activeCell&&t.content.scrollToCell(t.content.activeCell,"center")},isEnabled:d})}(e,t),i.load(`${C}:plugin`).then((e=>{A(e),e.changed.connect(A)}),(e=>{console.error(`Could not load settings, so did not active ${C}: ${e}`)})),Promise.resolve()},requires:[n.INotebookTracker,l.IEditorExtensionRegistry,d.ISettingRegistry],optional:[i.IEditorTracker]}}}]);