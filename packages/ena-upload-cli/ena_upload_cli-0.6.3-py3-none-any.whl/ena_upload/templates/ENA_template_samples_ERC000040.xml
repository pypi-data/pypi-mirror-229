<?xml version="1.0" encoding="UTF-8"?>
<?python
import pandas as pd
def attributetest(row, column):
    if hasattr(row, column) and pd.notna(row[column]) and not str(row[column]).isspace() and str(row[column]).lower() not in ['nan', 'na']:
        return True 
    else:
        return False
?>
<SAMPLE_SET xmlns:py="http://genshi.edgewall.org/"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="ftp://ftp.sra.ebi.ac.uk/meta/xsd/sra_1_6/SRA.sample.xsd">
    <py:for each="index, row in df.iterrows()">
    <SAMPLE alias="${row.alias}" center_name="${center}">
        <TITLE>${row.title}</TITLE>
        <SAMPLE_NAME>
            <TAXON_ID>${row.taxon_id}</TAXON_ID>
            <SCIENTIFIC_NAME>${row.scientific_name}</SCIENTIFIC_NAME>
            <py:if test="attributetest(row, 'common_name')">
            <COMMON_NAME>${row.common_name}</COMMON_NAME>
            </py:if>
        </SAMPLE_NAME>
        <DESCRIPTION>${row.sample_description}</DESCRIPTION>
        <SAMPLE_ATTRIBUTES>
            <py:if test="attributetest(row, 'Size Fraction Lower Threshold')">
            <SAMPLE_ATTRIBUTE>
                <TAG>Size Fraction Lower Threshold</TAG>
                <VALUE>${row['Size Fraction Lower Threshold']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <py:if test="attributetest(row, 'Size Fraction Upper Threshold')">
            <SAMPLE_ATTRIBUTE>
                <TAG>Size Fraction Upper Threshold</TAG>
                <VALUE>${row['Size Fraction Upper Threshold']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <SAMPLE_ATTRIBUTE>
                <TAG>target gene</TAG>
                <VALUE>${row['target gene']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <SAMPLE_ATTRIBUTE>
                <TAG>target subfragment</TAG>
                <VALUE>${row['target subfragment']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <SAMPLE_ATTRIBUTE>
                <TAG>pcr primers</TAG>
                <VALUE>${row['pcr primers']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <py:if test="attributetest(row, 'isolation_source')">
            <SAMPLE_ATTRIBUTE>
                <TAG>isolation_source</TAG>
                <VALUE>${row['isolation_source']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <py:if test="attributetest(row, 'collected_by')">
            <SAMPLE_ATTRIBUTE>
                <TAG>collected_by</TAG>
                <VALUE>${row['collected_by']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <SAMPLE_ATTRIBUTE>
                <TAG>collection date</TAG>
                <VALUE>${row['collection date']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <py:if test="attributetest(row, 'altitude')">
            <SAMPLE_ATTRIBUTE>
                <TAG>altitude</TAG>
                <VALUE>${row['altitude']}</VALUE>
                <UNITS>m</UNITS>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <SAMPLE_ATTRIBUTE>
                <TAG>geographic location (country and/or sea)</TAG>
                <VALUE>${row['geographic location (country and/or sea)']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <SAMPLE_ATTRIBUTE>
                <TAG>geographic location (latitude)</TAG>
                <VALUE>${row['geographic location (latitude)']}</VALUE>
                <UNITS>DD</UNITS>
            </SAMPLE_ATTRIBUTE>
            <SAMPLE_ATTRIBUTE>
                <TAG>geographic location (longitude)</TAG>
                <VALUE>${row['geographic location (longitude)']}</VALUE>
                <UNITS>DD</UNITS>
            </SAMPLE_ATTRIBUTE>
            <py:if test="attributetest(row, 'geographic location (region and locality)')">
            <SAMPLE_ATTRIBUTE>
                <TAG>geographic location (region and locality)</TAG>
                <VALUE>${row['geographic location (region and locality)']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <py:if test="attributetest(row, 'depth')">
            <SAMPLE_ATTRIBUTE>
                <TAG>depth</TAG>
                <VALUE>${row['depth']}</VALUE>
                <UNITS>m</UNITS>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <SAMPLE_ATTRIBUTE>
                <TAG>broad-scale environmental context</TAG>
                <VALUE>${row['broad-scale environmental context']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <SAMPLE_ATTRIBUTE>
                <TAG>local environmental context</TAG>
                <VALUE>${row['local environmental context']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <SAMPLE_ATTRIBUTE>
                <TAG>environmental medium</TAG>
                <VALUE>${row['environmental medium']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <py:if test="attributetest(row, 'sample collection device or method')">
            <SAMPLE_ATTRIBUTE>
                <TAG>sample collection device or method</TAG>
                <VALUE>${row['sample collection device or method']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <SAMPLE_ATTRIBUTE>
                <TAG>environmental_sample</TAG>
                <VALUE>${row['environmental_sample']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <py:if test="attributetest(row, 'Salinity')">
            <SAMPLE_ATTRIBUTE>
                <TAG>Salinity</TAG>
                <VALUE>${row['Salinity']}</VALUE>
                <UNITS>psu</UNITS>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <py:if test="attributetest(row, 'Further Details')">
            <SAMPLE_ATTRIBUTE>
                <TAG>Further Details</TAG>
                <VALUE>${row['Further Details']}</VALUE>
            </SAMPLE_ATTRIBUTE>
            </py:if>
            <SAMPLE_ATTRIBUTE>
                <TAG>SUBMISSION_TOOL</TAG>
                <VALUE>${tool_name}</VALUE>
            </SAMPLE_ATTRIBUTE>
            <SAMPLE_ATTRIBUTE>
                <TAG>SUBMISSION_TOOL_VERSION</TAG>
                <VALUE>${tool_version}</VALUE>
            </SAMPLE_ATTRIBUTE>
        </SAMPLE_ATTRIBUTES>
    </SAMPLE>
    </py:for>
</SAMPLE_SET>