# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EmployeeCustomFieldTypeEnumValue(str, enum.Enum):
    DATE = "date"
    FLOAT = "float"
    INTEGER = "integer"
    LIST = "list"
    TEXT = "text"
    UNMAPPED_VALUE = "unmapped_value"

    def visit(
        self,
        date: typing.Callable[[], T_Result],
        float: typing.Callable[[], T_Result],
        integer: typing.Callable[[], T_Result],
        list: typing.Callable[[], T_Result],
        text: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EmployeeCustomFieldTypeEnumValue.DATE:
            return date()
        if self is EmployeeCustomFieldTypeEnumValue.FLOAT:
            return float()
        if self is EmployeeCustomFieldTypeEnumValue.INTEGER:
            return integer()
        if self is EmployeeCustomFieldTypeEnumValue.LIST:
            return list()
        if self is EmployeeCustomFieldTypeEnumValue.TEXT:
            return text()
        if self is EmployeeCustomFieldTypeEnumValue.UNMAPPED_VALUE:
            return unmapped_value()
