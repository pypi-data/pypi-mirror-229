# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .application_status_enum import ApplicationStatusEnum
from .interview_stage import InterviewStage
from .rejected_reason import RejectedReason


class Application(pydantic.BaseModel):
    id: str
    candidate_id: str
    job_id: str
    interview_stage: typing.Optional[typing.List[InterviewStage]]
    interview_stage_id: str
    rejected_reasons: typing.Optional[typing.List[RejectedReason]]
    rejected_reason_ids: typing.Optional[str]
    rejected_at: typing.Optional[str]
    location_id: str
    location_ids: typing.List[str]
    application_status: ApplicationStatusEnum
    created_at: str
    updated_at: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
