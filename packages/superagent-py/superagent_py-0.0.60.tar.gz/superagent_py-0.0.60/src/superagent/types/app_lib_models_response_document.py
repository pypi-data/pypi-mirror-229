# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .document_type import DocumentType


class AppLibModelsResponseDocument(pydantic.BaseModel):
    id: str
    description: typing.Optional[str]
    user_id: str = pydantic.Field(alias="userId")
    type: DocumentType
    url: typing.Optional[str]
    content: typing.Optional[str]
    content_hash: typing.Optional[str] = pydantic.Field(alias="contentHash")
    name: str
    splitter: typing.Optional[typing.Dict[str, typing.Any]]
    created_at: typing.Optional[dt.datetime] = pydantic.Field(alias="createdAt")
    updated_at: typing.Optional[dt.datetime] = pydantic.Field(alias="updatedAt")
    index: typing.Optional[typing.Dict[str, typing.Any]]
    authorization: typing.Optional[typing.Dict[str, typing.Any]]
    metadata: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
