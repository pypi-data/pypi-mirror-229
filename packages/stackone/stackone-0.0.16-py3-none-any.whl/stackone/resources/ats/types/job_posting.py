# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .compensation import Compensation
from .content import Content
from .job_posting_employment_contract_type import JobPostingEmploymentContractType
from .job_posting_employment_type import JobPostingEmploymentType
from .job_posting_internal import JobPostingInternal
from .job_posting_status import JobPostingStatus
from .location import Location


class JobPosting(pydantic.BaseModel):
    id: str
    title: typing.Optional[str]
    locations: typing.Optional[typing.List[Location]]
    internal: typing.Optional[JobPostingInternal]
    status: typing.Optional[JobPostingStatus]
    job_id: typing.Optional[str]
    content: typing.Optional[Content]
    compensation: typing.Optional[typing.List[Compensation]]
    employment_type: typing.Optional[JobPostingEmploymentType]
    employment_contract_type: typing.Optional[JobPostingEmploymentContractType]
    updated_at: typing.Optional[str]
    created_at: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
