# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['aprep']

# %% ../nbs/00_core.ipynb 4
from abc import ABC
from typing import Any, List, Union
from atyp import AnyQ, StrQ, ClsBool

# %% ../nbs/00_core.ipynb 5
from ispec.enums import AttrPrefQ
from ispec.utils import (getattrs, )
from ispec.kws import (newkws, inikws, annkws, supkws, nilkws, defkws, allkeys,)
from ispec.set import (setnil, setcur, setkws)
from ispec.rnk import (rankattr, rankattrs, )

# %% ../nbs/00_core.ipynb 7
class abase:    
    '''class for attribute preparation.'''
    # Whether or not to fail queitly
    failq: ClsBool = False
    attrs: Union[List[str], dict] = []

    @classmethod
    def akeys(cls) -> list:
        return cls.attrs if isinstance(cls.attrs, list) else list(cls.attrs.keys())

    @classmethod
    def avals(cls) -> list:
        if isinstance(cls.attrs, dict): return list(cls.attrs.values())
        return [None] * len(cls.akeys()) 
    
    @classmethod
    def prepattr(cls, attr: StrQ = None, obj: AnyQ = None, pref: AttrPrefQ = None, **kwargs) -> Any:        
        return rankattr(__o = obj, __a = attr, __c = cls, __p = pref, __h = cls.failq, **kwargs)
    
    @classmethod
    def prepall(cls, obj: AnyQ = None, pref: AttrPrefQ = None, **kwargs) -> Any:        
        return rankattrs(__o = obj, __c = cls, __p = pref, __h = cls.failq, __keys = cls.akeys(), **kwargs)

# %% ../nbs/00_core.ipynb 10
class kwsmix:
    @classmethod
    def newkws(cls, obj: AnyQ = None) -> dict: return newkws(obj or cls)
    @classmethod
    def inikws(cls, obj: AnyQ = None) -> dict: return inikws(obj or cls)
    @classmethod
    def annkws(cls, obj: AnyQ = None) -> dict: return annkws(obj or cls) 
    @classmethod
    def supkws(cls, obj: AnyQ = None) -> dict: return supkws(obj or cls)
    @classmethod
    def nilkws(cls, obj: AnyQ = None) -> dict: return nilkws(obj or cls)
    @classmethod
    def defkws(cls, obj: AnyQ = None, **kwargs) -> dict: return defkws(obj or cls, __keys=cls.allkeys(obj), **kwargs)
    
    @classmethod
    def clskws(cls, obj: AnyQ = None, pref: AttrPrefQ = None, **kwargs) -> dict:        
        '''Class's __new__ keyword parameters with values.'''
        kws = {}        
        for k in cls.newkeys(cls, obj):
            kws[k] = cls.aprep(k, obj, pref=pref, **kwargs)
        return kws

    @classmethod
    def allkws(cls, obj: AnyQ = None, pref: AttrPrefQ = None, **kwargs) -> dict:
        kws = {}
        for attr in cls.allkeys(cls, obj):
            kws[attr] = cls.aprep(attr, obj, pref=pref, **kwargs)
        return kws

# %% ../nbs/00_core.ipynb 12
class keymix:
    @classmethod
    def newkeys(cls, obj: AnyQ = None) -> list: return list(cls.newkws(obj).keys())
    @classmethod
    def inikeys(cls, obj: AnyQ = None) -> list: return list(cls.inikws(obj).keys())
    @classmethod
    def annkeys(cls, obj: AnyQ = None) -> list: return list(cls.annkws(obj).keys())
    @classmethod
    def allkeys(cls, obj: AnyQ = None) -> list: return allkeys(obj or cls, cls.akeys())

# %% ../nbs/00_core.ipynb 14
class getmix:
    def getvals(self) -> list: return list(getattrs(self, self.allkeys()).values())
    def getnewvals(self) -> list: return list(getattrs(self, self.newkeys()).values())
    def getinivals(self) -> list: return list(getattrs(self, self.inikeys()).values())
    def getannvals(self) -> list: return list(getattrs(self, self.annkeys()).values())
    def getclsvals(self) -> list: return list(getattrs(self, self.clskeys()).values())
    def getallvals(self) -> list: return list(getattrs(self, self.allkeys()).values())

    def getkws(self) -> dict: return list(getattrs(self, self.allkws()))
    def getnewkws(self) -> dict: return list(getattrs(self, self.newkws()))
    def getinikws(self) -> dict: return list(getattrs(self, self.inikws()))
    def getannkws(self) -> dict: return list(getattrs(self, self.annkws()))
    def getclskws(self) -> dict: return list(getattrs(self, self.clskws()))
    def getallkws(self) -> dict: return list(getattrs(self, self.allkws()))
    def optkws(self, **kwargs) -> dict: return {k: kwargs.get(k, v) for k, v in self.getkws().items()}

# %% ../nbs/00_core.ipynb 16
class setmix:
    @classmethod
    def setnil(cls, obj: AnyQ = None, **kwargs): return setnil(cls, obj, **kwargs)        
    @classmethod
    def setcur(cls, obj: AnyQ = None, **kwargs): return setcur(cls, obj, **kwargs)
    @classmethod
    def setkws(cls, obj: AnyQ = None, pref: AttrPrefQ = None, **kwargs):
        return setkws(cls, obj, pref, __keys=cls.akeys(), **kwargs)


# %% ../nbs/00_core.ipynb 18
class aprep(setmix, getmix, keymix, kwsmix, abase):
    pass
