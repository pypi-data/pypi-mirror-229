# coding: utf-8

"""
    OpenBuckets API

    The OpenBuckets web-based tool is a powerful utility that allows users to quickly locate open buckets in cloud storage systems through a simple query. In addition, it provides a convenient way to search for various file types across these open buckets, making it an essential tool for security professionals, researchers, and anyone interested in discovering exposed data. This Postman collection aims to showcase the capabilities of OpenBuckets by providing a set of API requests that demonstrate how to leverage its features. By following this collection, you'll learn how to utilize OpenBuckets to identify open buckets and search for specific file types within them.

    The version of the OpenAPI document: 1.0.0
    Contact: support@openbuckets.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from openbuckets.models.bucket_search_results import BucketSearchResults

from openbuckets.api_client import ApiClient
from openbuckets.api_response import ApiResponse
from openbuckets.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BucketsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def search_buckets(self, keywords : Annotated[Optional[StrictStr], Field(description="the search keywords to filter bucket names (e.g., \"abg\")")] = None, type : Annotated[Optional[StrictStr], Field(description="the type of bucket to filter (e.g., aws,dos,azure,gcp)")] = None, exact : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="whether to perform an exact match for the keywords (0 for false, 1 for true)")] = None, start : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="starting index for pagination")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="number of search results to return per page")] = None, order : Annotated[Optional[StrictStr], Field(description="the sorting field for the search results (e.g., \"fileCount\" for sorting by file count)")] = None, direction : Annotated[Optional[StrictStr], Field(description="the sorting direction for the search results (e.g., \"asc\" for ascending)")] = None, **kwargs) -> BucketSearchResults:  # noqa: E501
        """Search Buckets  # noqa: E501

        This request enables you to perform a targeted search for buckets within the OpenBuckets database using advanced filters. You can narrow down the search based on various criteria such as keywords, bucket type, exact match, sorting, and pagination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_buckets(keywords, type, exact, start, limit, order, direction, async_req=True)
        >>> result = thread.get()

        :param keywords: the search keywords to filter bucket names (e.g., \"abg\")
        :type keywords: str
        :param type: the type of bucket to filter (e.g., aws,dos,azure,gcp)
        :type type: str
        :param exact: whether to perform an exact match for the keywords (0 for false, 1 for true)
        :type exact: float
        :param start: starting index for pagination
        :type start: float
        :param limit: number of search results to return per page
        :type limit: float
        :param order: the sorting field for the search results (e.g., \"fileCount\" for sorting by file count)
        :type order: str
        :param direction: the sorting direction for the search results (e.g., \"asc\" for ascending)
        :type direction: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BucketSearchResults
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the search_buckets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.search_buckets_with_http_info(keywords, type, exact, start, limit, order, direction, **kwargs)  # noqa: E501

    @validate_arguments
    def search_buckets_with_http_info(self, keywords : Annotated[Optional[StrictStr], Field(description="the search keywords to filter bucket names (e.g., \"abg\")")] = None, type : Annotated[Optional[StrictStr], Field(description="the type of bucket to filter (e.g., aws,dos,azure,gcp)")] = None, exact : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="whether to perform an exact match for the keywords (0 for false, 1 for true)")] = None, start : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="starting index for pagination")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="number of search results to return per page")] = None, order : Annotated[Optional[StrictStr], Field(description="the sorting field for the search results (e.g., \"fileCount\" for sorting by file count)")] = None, direction : Annotated[Optional[StrictStr], Field(description="the sorting direction for the search results (e.g., \"asc\" for ascending)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search Buckets  # noqa: E501

        This request enables you to perform a targeted search for buckets within the OpenBuckets database using advanced filters. You can narrow down the search based on various criteria such as keywords, bucket type, exact match, sorting, and pagination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_buckets_with_http_info(keywords, type, exact, start, limit, order, direction, async_req=True)
        >>> result = thread.get()

        :param keywords: the search keywords to filter bucket names (e.g., \"abg\")
        :type keywords: str
        :param type: the type of bucket to filter (e.g., aws,dos,azure,gcp)
        :type type: str
        :param exact: whether to perform an exact match for the keywords (0 for false, 1 for true)
        :type exact: float
        :param start: starting index for pagination
        :type start: float
        :param limit: number of search results to return per page
        :type limit: float
        :param order: the sorting field for the search results (e.g., \"fileCount\" for sorting by file count)
        :type order: str
        :param direction: the sorting direction for the search results (e.g., \"asc\" for ascending)
        :type direction: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BucketSearchResults, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'keywords',
            'type',
            'exact',
            'start',
            'limit',
            'order',
            'direction'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_buckets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('keywords') is not None:  # noqa: E501
            _query_params.append(('keywords', _params['keywords']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('exact') is not None:  # noqa: E501
            _query_params.append(('exact', _params['exact']))

        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('direction') is not None:  # noqa: E501
            _query_params.append(('direction', _params['direction']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "BucketSearchResults",
        }

        return self.api_client.call_api(
            '/api/v2/buckets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
