Metadata-Version: 2.1
Name: template-data-project
Version: 0.0.4
Summary: data engineering package template involves setting up a directory structure and including essential files and documentation that data engineers can use as a starting point for their projects.
Author-email: ABOULOIFA Najib <najib.abouloifa@gmail.com>
Project-URL: Homepage, https://github.com/ABNajib/data_engineering_template
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# data_engineering_template

## Project Overview

This repository is a structured template for organizing a data engineering project. The project is divided into various folders to facilitate effective management of project assets, resources, and code. Below is an overview of the project's folder structure:
  - from template_data_project import project_structure
  - project_structure(root_dir)

## Folder Structure

- **Project Root Folder**: The top-level folder for the entire data engineering project.

- **Documentation**: Contains all project-related documentation, including design documents, project plans, and README files.

- **Source Code**: Houses all the code related to data extraction, transformation, loading (ETL), data processing, and data infrastructure.

  - **ETL Scripts**: Subfolder for ETL scripts and code.

  - **Data Processing**: Subfolder for data processing scripts and code.

  - **Infrastructure as Code (IaC)**: If using cloud services like AWS, Azure, or Google Cloud, store Infrastructure as Code templates (e.g., Terraform or CloudFormation) here.

- **Data**: Contains all the data used by the project.

  - **Raw Data**: Stores raw, unprocessed data from various sources.

  - **Processed Data**: Holds cleaned, transformed, and structured data ready for analysis.

- **Configurations**: Stores configuration files for various components of the project, such as database connection strings, ETL job parameters, and API keys.

- **Testing**: Includes test scripts and data used for testing ETL processes and data quality.

- **Logs**: Stores log files generated by ETL processes, data pipelines, and system components.

- **Reports and Visualizations**: Contains reports, dashboards, and visualizations created from the processed data.

- **Libraries and Dependencies**: Houses libraries and dependencies required for running the project's code.

- **Infrastructure**: If you're managing the infrastructure, include subfolders for cloud service configurations, server configurations, and networking configurations.

- **Environments**: Subfolders for different environments like "Development," "Staging," and "Production" if you have separate environments for your project.

- **Utilities**: Include any utility scripts or tools used for project management, data validation, or monitoring.

- **Archives**: Store backups, historical data, or archived project versions.

- **README Files**: Each subfolder may contain a README file explaining its contents and usage.

- **Tests and Test Data**: If you have specific folders for automated testing or test data, include them here.

- **Docker (Optional)**: If using Docker containers, you may have a folder for Dockerfiles and related configuration files.

- **CI/CD (Optional)**: If you have a continuous integration/continuous deployment pipeline, include relevant configuration and scripts here.

## Getting Started

To start using this project structure, follow these steps:

1. Clone or download this repository to your local machine.

2. Customize the folder structure and README files to match the specific needs of your data engineering project.

3. Place your data, code, and documentation in the appropriate folders.

4. Ensure that you have the necessary dependencies and libraries installed for your project.

5. Implement your data engineering processes and infrastructure within the provided structure.

6. Use the README files to provide detailed information about the contents and usage of each folder.

## License

This project is licensed under the [MIT License](LICENSE.md).

## Acknowledgments

- This project structure template is provided as a starting point for organizing data engineering projects effectively.
