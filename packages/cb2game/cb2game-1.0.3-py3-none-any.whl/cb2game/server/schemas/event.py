""" This file defines the Event schema, which is used to store game events in
    the database.

    It also serves as documentation of our data format. All JSON data files
    contain serialized Event objects generated via server/db_tools/db_to_json.py

    This file contains 3 class definitions:

    EventOrigin: Enum for indicating what entity caused an event.
    EventType: Enum for occurred in an event, and how to interpret it.
    Event: Main event schema definition. See below for more.
"""
import datetime
import uuid
from enum import IntEnum

from peewee import DateTimeField, ForeignKeyField, IntegerField, TextField, UUIDField

from cb2game.server.schemas.base import BaseModel
from cb2game.server.schemas.game import Game
from cb2game.server.schemas.util import HecsCoordField


class EventOrigin(IntEnum):
    """Enum to specify the origin of an event."""

    NONE = 0
    # Happened due to leader action.
    LEADER = 1
    # Happened due to follower action.
    FOLLOWER = 2
    # Triggered by game logic. This is used for set completions and other things
    # technically determined by the rules of the game, rather than player
    # actions.
    SERVER = 3


class EventType(IntEnum):
    """Each event is tagged with a type. The type determines what the event is trying to signal.

    In order to understand the data, shortcode, and other event fields, you
    need to first check the event type.

    Below, we include a brief description of each event type, and what the
    subsequent data & shortcode fields contain. We also mention if any
    additional fields are different for this event.

    If you are new to working with Peewee and want to see some examples, here are
    locations in the codebase where Events are used:

        server/game_recorder.py: Event records are created via
        EventFrom*()-style functions in server/game_recorder.py. Generally
        speaking, all events you'll work with are generated by this file, so
        this can be considered the authoritative source on the
        specification. If you have issues with the implementation, discover
        bugs, or want to contribute, please create an issue on github to let
        us know first.

        server/db_tools/instruction_vis.py: A script to visualize games as a
        series of images, printing a representation of the map for each
        instruction, along with the path taken by the follower and the
        instruction text.

        server/replay_state.py: The replay state machine. This generates
        network messages to stream to the client from Event records in the
        sqlite database. These messages are identical to in-game network
        messages. From the client's perspective, replays are nearly
        identical to being in a regular game.
    """

    NONE = 0
    # Information about game map tiles, assets, grid size, and grid boundaries.
    # Event fields:
    #   data: str | JSON of type MapUpdate in server/messages/map_update.py
    MAP_UPDATE = 1
    # Initial location & orientation of leader & follower.
    # Event fields:
    #   data: str | JSON of type InitialState in server/schemas/util.py
    INITIAL_STATE = 2
    # Who's turn it is, remaining time, remaining moves, current score, etc.
    # Can be published at any time, due to turn change, timeout, player turn,
    # etc.
    # Event fields:
    #   data: str | JSON of type TurnState in server/messages/turn_state.py
    TURN_STATE = 3
    # Indicates that a turn began at this moment. Published alongside a
    # TURN_STATE event.
    # Event fields:
    #   data: str | JSON of type TurnState in server/messages/turn_state.py
    #   short_code: str | optional human-readable description of why turn ended.
    START_OF_TURN = 4
    # Contains information about dynamic game props. Currently these are just
    # cards, however in the future there may be other kinds of game prop. This
    # enumerates all current props. Former props that are not included are to be
    # considered no longer in the game.
    # Event fields:
    #   data: str | JSON of type PropUpdate in server/messages/prop_update.py
    PROP_UPDATE = 5
    # In order to avoid resending card information rapidly, we allow for the
    # CARD_SPAWN type, to just add one card to the current list of props.
    # Event fields:
    #   data: str | JSON of type PropUpdate in server/messages/prop_update.py
    #   short_code: str | A brief human-readable description of the card.
    #   location: HecsCoord | Location of card. See hex.py for more.
    #   orientation: float | Orientation of the card.
    CARD_SPAWN = 6
    # Information about a card which was just selected or unselected.
    # Event fields:
    #   data: str | JSON of type Card in server/card.py
    #   short_code: str | Either the string "select" or "unselect".
    #   location: HecsCoord | Location of card. See hex.py for more.
    #   orientation: float | Orientation of the card.
    CARD_SELECT = 7
    # A card set was collected. This increases score by one.
    # Event fields:
    #   data: str | JSON of type Card in server/card.py
    #   short_code: str | Either the string "select" or "unselect".
    CARD_SET = 8
    # An instruction was just received from the leader. Note that it is not seen
    # by the follower until the subsequent INSTRUCTION_ACTIVATED message.
    # Event fields:
    #   data: str | JSON type ObjectiveMessage in server/messages/objective.py
    #   short_code: str | UUID unique to this string. Not same as event UUID.
    INSTRUCTION_SENT = 9
    # An instruction queued by the leader was just shown to the follower.
    # Event fields:
    #   parent_id: str | Event UUID of related INSTRUCTION_SENT event.
    #   short_code: str | UUID unique to this string. Not same as event UUID.
    INSTRUCTION_ACTIVATED = 10
    # An instruction was just marked done by the follower.
    # Event fields:
    #   parent_id: str | Event UUID of related INSTRUCTION_SENT event.
    #   short_code: str | UUID unique to this string. Not same as event UUID.
    INSTRUCTION_DONE = 11
    # An instruction was just cancelled by the leader.
    # Event fields:
    #   parent_id: str | Event UUID of related INSTRUCTION_SENT event.
    #   short_code: str | UUID unique to this string. Not same as event UUID.
    INSTRUCTION_CANCELLED = 12
    # An action just occurred on some prop or actor in the game world. This
    # usually changes the target's orientation, location, or some other state.
    # This can be triggered by the server (card border selection animation) or
    # players (player moves).
    # Event fields:
    #   parent_id: str | Related INSTRUCTION_SENT UUID, if instruction active.
    #   data: str | JSON type Action in server/messages/action.py
    #   short_code: str | Short description of action. MF = Move Forward, etc.
    ACTION = 13
    # The leader just gave the follower live feedback.
    # Event fields:
    #   parent_id: str | Related Action UUID, if feedback is for an action.
    #   data: str | JSON type LiveFeedback in server/messages/live_feedback.py
    #   short_code: str | Short description of Feedback. Positive/Negative.
    LIVE_FEEDBACK = 14
    # Used to ask the leader/follower a question.
    # Event fields:
    #   short_code: str | UUID unique to this question. Not same as event UUID.
    FEEDBACK_QUESTION = 15
    # Record of the leader/follower's question response.
    # Event fields:
    #   parent_id: str | Question UUID of related FEEDBACK_QUESTION event.
    #   short_code: str | UUID unique to this question. Not same as event UUID.
    FEEDBACK_RESPONSE = 16


class Event(BaseModel):
    """Game event record.

    In CB2, games are recorded as lists of events. Each event is a single
    atomic change to the game state. Events are stored in an sqlite database.

    This class is used to store events in the database. Events are generated by
    the game_recorder.py class. See server/game_recorder.py for that.

    """

    # A UUID unique identifying this event. Unique across database.
    id = UUIDField(primary_key=True, default=uuid.uuid4, unique=True)
    # Pointer to the game this event occurred in
    game = ForeignKeyField(Game, backref="events")
    # Event type. See EventType enum above for the meaning of each value.
    type = IntegerField(default=EventType.NONE)
    # The current turn number. Each turn consists of a leader portion and a follower portion.
    turn_number = IntegerField(null=True)
    # A monotonically increasing integer. Events which happen considered
    # simultaneous in-game are given the same tick. For example, a character
    # stepping on a card and the card set completion event occurring.
    tick = IntegerField()
    # Server time when the event was creating. UTC.
    server_time = DateTimeField(default=datetime.datetime.utcnow)
    # Not currently populated. Local clock of the client when event occurred.
    # Determined by packet transmissions time which is reported by the client.
    # Nullable.  UTC.
    client_time = DateTimeField(null=True)
    # Who triggered the event. See EventOrigin enum above.
    origin = IntegerField(default=EventOrigin.NONE)
    # Who's turn it is, currently.
    role = TextField(default="")  # 'Leader' or 'Follower'
    # If an event references a previous event, it is linked here.  The exact
    # meaning depends on the type of the event. See EventType documentation
    # above for more.
    parent_event = ForeignKeyField("self", backref="children", null=True)
    # A JSON-parseable string containing specific data about the event that
    # occurred. For format for each Event, see EventType documentation above.
    # For every event type with a data field, there's a python dataclass you can
    # import and use to parse data. We use mashumaro for parsing. Example for a
    # map update event:
    #
    #  from cb2game.server.schemas.event import Event, EventType
    #  from cb2game.server.messages.map_update import MapUpdate
    #  # Some peewee query.
    #  map_event = Event.select().where(type=EventType.MAP_UPDATE, ...).get()
    #  map_update = MapUpdate.from_json(map_event.data)
    #
    #  This gives you a CB2 MapUpdate object, defined in
    #  server/messages/map_update.py.
    data = TextField(null=True)
    # A brief/compressed or human readable representation of the event, if
    # possible.  Only defined for some event types, see EventType above for more
    # documentation.
    short_code = TextField(null=True)
    # If applicable, the "location" of an event. For moves, this is the location
    # *before* the action occurred.  For live feedback, this is the follower
    # location during the live feedback.
    location = HecsCoordField(null=True)
    # If applicable, the "orientation" of the agent. For moves, this is the
    # location *before* the action occurred.  For live feedback, this is the
    # follower orientation during the live feedback.
    orientation = IntegerField(null=True)
