# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CompensationPayFrequency(str, enum.Enum):
    HOURLY = "hourly"
    WEEKLY = "weekly"
    BI_WEEKLY = "bi_weekly"
    FOUR_WEEKLY = "four_weekly"
    SEMI_MONTHLY = "semi_monthly"
    MONTHLY = "monthly"
    BI_MONTHLY = "bi_monthly"
    QUARTERLY = "quarterly"
    SEMI_ANNUALLY = "semi_annually"
    YEARLY = "yearly"
    THIRTEEN_MONTHLY = "thirteen_monthly"
    PRO_RATA = "pro_rata"
    UNMAPPED_VALUE = "unmapped_value"
    HALF_YEARLY = "half_yearly"

    def visit(
        self,
        hourly: typing.Callable[[], T_Result],
        weekly: typing.Callable[[], T_Result],
        bi_weekly: typing.Callable[[], T_Result],
        four_weekly: typing.Callable[[], T_Result],
        semi_monthly: typing.Callable[[], T_Result],
        monthly: typing.Callable[[], T_Result],
        bi_monthly: typing.Callable[[], T_Result],
        quarterly: typing.Callable[[], T_Result],
        semi_annually: typing.Callable[[], T_Result],
        yearly: typing.Callable[[], T_Result],
        thirteen_monthly: typing.Callable[[], T_Result],
        pro_rata: typing.Callable[[], T_Result],
        unmapped_value: typing.Callable[[], T_Result],
        half_yearly: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CompensationPayFrequency.HOURLY:
            return hourly()
        if self is CompensationPayFrequency.WEEKLY:
            return weekly()
        if self is CompensationPayFrequency.BI_WEEKLY:
            return bi_weekly()
        if self is CompensationPayFrequency.FOUR_WEEKLY:
            return four_weekly()
        if self is CompensationPayFrequency.SEMI_MONTHLY:
            return semi_monthly()
        if self is CompensationPayFrequency.MONTHLY:
            return monthly()
        if self is CompensationPayFrequency.BI_MONTHLY:
            return bi_monthly()
        if self is CompensationPayFrequency.QUARTERLY:
            return quarterly()
        if self is CompensationPayFrequency.SEMI_ANNUALLY:
            return semi_annually()
        if self is CompensationPayFrequency.YEARLY:
            return yearly()
        if self is CompensationPayFrequency.THIRTEEN_MONTHLY:
            return thirteen_monthly()
        if self is CompensationPayFrequency.PRO_RATA:
            return pro_rata()
        if self is CompensationPayFrequency.UNMAPPED_VALUE:
            return unmapped_value()
        if self is CompensationPayFrequency.HALF_YEARLY:
            return half_yearly()
