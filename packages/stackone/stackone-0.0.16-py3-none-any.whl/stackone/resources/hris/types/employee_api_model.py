# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .employee_custom_fields import EmployeeCustomFields
from .employment import Employment
from .employment_schedule_type_enum import EmploymentScheduleTypeEnum
from .employment_status_enum import EmploymentStatusEnum
from .employment_type_enum import EmploymentTypeEnum
from .ethnicity_enum import EthnicityEnum
from .gender_enum import GenderEnum
from .image import Image
from .location import Location
from .marital_status_enum import MaritalStatusEnum


class EmployeeApiModel(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description="The employee ID")
    first_name: typing.Optional[str] = pydantic.Field(description="The employee first name")
    last_name: typing.Optional[str] = pydantic.Field(description="The employee last name")
    name: typing.Optional[str] = pydantic.Field(description="The employee name")
    display_name: typing.Optional[str] = pydantic.Field(description="The employee display name")
    avatar_url: typing.Optional[str] = pydantic.Field(description="The employee avatar Url")
    personal_email: typing.Optional[str] = pydantic.Field(description="The employee personal email")
    personal_phone_number: typing.Optional[str] = pydantic.Field(description="The employee personal phone number")
    work_email: typing.Optional[str] = pydantic.Field(description="The employee work email")
    work_phone_number: typing.Optional[str] = pydantic.Field(description="The employee work phone number")
    job_title: typing.Optional[str] = pydantic.Field(description="The employee job title")
    department: typing.Optional[str] = pydantic.Field(description="The employee department")
    manager_id: typing.Optional[str] = pydantic.Field(description="The employee manager ID")
    gender: typing.Optional[GenderEnum] = pydantic.Field(description="The employee gender")
    ethnicity: typing.Optional[EthnicityEnum] = pydantic.Field(description="The employee ethnicity")
    date_of_birth: typing.Optional[str] = pydantic.Field(description="The employee date_of_birth")
    birthday: typing.Optional[str] = pydantic.Field(description="The employee birthday")
    marital_status: typing.Optional[MaritalStatusEnum] = pydantic.Field(description="The employee marital status")
    avatar: typing.Optional[Image] = pydantic.Field(description="The employee avatar")
    hire_date: typing.Optional[str] = pydantic.Field(description="The employee hire date")
    start_date: typing.Optional[str] = pydantic.Field(description="The employee start date")
    tenure: typing.Optional[str] = pydantic.Field(description="The employee tenure")
    work_anniversary: typing.Optional[str] = pydantic.Field(description="The employee work anniversary")
    employment_type: typing.Optional[EmploymentTypeEnum] = pydantic.Field(description="The employee employment type")
    employment_contract_type: typing.Optional[EmploymentScheduleTypeEnum] = pydantic.Field(
        description="The employment work schedule type (e.g., full-time, part-time)"
    )
    employment_status: typing.Optional[EmploymentStatusEnum] = pydantic.Field(
        description="The employee employment status"
    )
    termination_date: typing.Optional[str] = pydantic.Field(description="The employee termination date")
    home_location: typing.Optional[Location] = pydantic.Field(description="The employee home location")
    work_location: typing.Optional[Location] = pydantic.Field(description="The employee work location")
    company_name: typing.Optional[str] = pydantic.Field(description="The employee company name")
    employments: typing.Optional[typing.List[Employment]] = pydantic.Field(description="The employee employments")
    custom_fields: typing.Optional[typing.List[EmployeeCustomFields]] = pydantic.Field(
        description="The employee custom fields"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
