from __future__ import annotations

import typing

import pyxmolpp2._core

__all__ = ['Align', 'WriteVectorsToCsv']
class Align:
    def __call__(self, frame: pyxmolpp2._core.Frame) -> pyxmolpp2._core.Frame:
        ...
    @typing.overload
    def __init__(self, by: pyxmolpp2._core.AtomPredicate, reference: pyxmolpp2._core.Frame | None = ..., move_only: pyxmolpp2._core.AtomPredicate | None = ...) -> None:
        ...
    @typing.overload
    def __init__(self, by: typing.Callable[[pyxmolpp2._core.Atom], bool], reference: pyxmolpp2._core.Frame | None = ..., move_only: typing.Callable[[pyxmolpp2._core.Atom], bool] | None = ...) -> None:
        ...
    def after_last_iteration(self, exc_type: typing.Any, exc_value: typing.Any, traceback: typing.Any) -> bool:
        ...
    def before_first_iteration(self, frame: pyxmolpp2._core.Frame) -> None:
        ...
    def copy(self) -> Align:
        ...
class WriteVectorsToCsv:
    def __call__(self, frame: pyxmolpp2._core.Frame) -> pyxmolpp2._core.Frame:
        ...
    def __init__(self, pair_selector: typing.Callable[[pyxmolpp2._core.Frame], list[tuple[pyxmolpp2._core.Atom, pyxmolpp2._core.Atom]]], filename_provider: typing.Callable[[pyxmolpp2._core.Atom, pyxmolpp2._core.Atom], str]) -> None:
        ...
    def after_last_iteration(self, exc_type: typing.Any, exc_value: typing.Any, traceback: typing.Any) -> bool:
        ...
    def before_first_iteration(self, frame: pyxmolpp2._core.Frame) -> None:
        ...
    def copy(self) -> None:
        ...
