{"version":3,"sources":["utils.react.js","buttons/Buttons.tsx","buttons/buttons.react.js","tabs/Tabs.tsx","tabs/tabs.react.js","menu/menu.react.js","menu/Menu.tsx","tree/tree.react.js","tree/Tree.tsx","cascader/cascader.react.js","cascader/Cascader.tsx","index.tsx"],"names":["deepCopy","obj","JSON","parse","stringify","AlphaColor","varColor","arguments","length","undefined","alpha","colorComponents","color","test","hex","substring","split","map","char","join","_hex$match$map","match","c","parseInt","_hex$match$map2","_slicedToArray","_match$map","Number","_match$map2","getColorComponents","getComputedStyle","document","documentElement","getPropertyValue","trim","_colorComponents","r","g","b","concat","getCollapseKeys","items","keys","getKey","Array","isArray","obj_","children","push","key","getParentKeys","parentKeys","k","allParentKeys","getParentKey","tree","parentKey","i","node","some","item","getParentKey_","getParent","element","j","reindex","index","asString","String","getHrefKeys","href","AntdButtons","props","shape","align","direction","compact","grow","Component","Space","Compact","getElementById","createElement","id","innerHTML","root","appendChild","growStyle","_useState","useState","_useState2","selected","setSelected","useEffect","Streamlit","setFrameHeight","_jsx","ConfigProvider","theme","components","Button","colorText","colorTextDisabled","colorPrimary","colorBgContainerDisabled","colorBgContainer","colorPrimaryHover","controlHeight","fontSize","colorBorder","className","idx","type_","type","onClick","indexOf","setComponentValue","disabled","target","icon","AntdTabs","position","centered","height","style","TabsStyle","tabsHeight","includes","Tabs","colorPrimaryActive","fontFamily","item_","_jsxs","marginRight","defaultActiveKey","onTabClick","tabPosition","strToNode","obj_copy","label","rel","menuHeight","open_keys","n_arr","h","showItem","showItem_","arr","s","sum","AntdMenu","dsk","dok","openAll","size","indent","selectKey","setSelectKey","_useState3","_useState4","setHeight","Menu","radiusItem","colorItemText","colorGroupTitle","colorItemTextDisabled","colorItemTextHover","colorItemTextSelected","colorItemBgHover","colorItemBgSelected","colorSubItemBg","colorItemBg","colorSplit","onSelect","e","onOpenChange","selectedKeys","borderRightWidth","defaultSelectedKeys","defaultOpenKeys","mode","inlineIndent","treeHeight","item_height","n","AntdTree","checkable","checkStrictly","multiple","showLine","value","setValue","autoHeight","setAutoHeight","Tree","controlItemBgHover","controlItemBgActive","selectedKeys_","info","console","log","onCheck","checkedKeys_","ck","onExpand","checkedKeys","defaultCheckedKeys","defaultExpandedKeys","treeData","selectable","switcherIcon","CaretDownFilled","showIcon","whiteSpace","overflowX","overflowY","AntdCascader","defaultValue","placeholder","showSearch","allowClear","strict","maxTagCount","CascaderStyle","Cascader","Select","colorBgElevated","colorFillSecondary","colorTextPlaceholder","colorIcon","colorIconHover","controlOutlineWidth","lineHeight","margin","options","onChange","dropdownMatchSelectWidth","width","suffixIcon","expandIcon","CaretRightFilled","maxTagTextLength","popupClassName","onDropdownVisibleChange","visible","notFoundContent","textAlign","showCheckedStrategy","SHOW_CHILD","SHOW_PARENT","StreamlitAntdComponent","withStreamlitConnection","args","kw","scrollBarColor","StreamlitLikeStyle","_Fragment","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.144c9c97.chunk.js","sourcesContent":["import \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\n//deep copy object func\r\nconst deepCopy = (obj) => {\r\n    return JSON.parse(JSON.stringify(obj))\r\n}\r\nconst StreamlitLikeStyle = () => {\r\n    //global streamlit like style\r\n    let scrollBarColor = AlphaColor('--text-color', 0.4);\r\n    let style = `\r\n        ::-webkit-scrollbar {\r\n        height: 6px;\r\n        width: 6px;\r\n        background-color: transparent;\r\n        }\r\n        ::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            background-color: ${scrollBarColor};\r\n        }`\r\n    //insert style\r\n    let element = document.getElementById('streamlit-like');\r\n    if (!element) {\r\n        element = document.createElement(\"style\");\r\n        element.id = 'streamlit-like';\r\n    }\r\n    element.innerHTML = style;\r\n    let root = document.getElementById(\"root\");\r\n    root && root.appendChild(element)\r\n}\r\n\r\nconst AlphaColor = (varColor = '--primary-color', alpha = 0.2) => {\r\n    const getColorComponents = (color) => {\r\n        // Handle hexadecimal color format\r\n        const hexMatch = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\r\n        if (hexMatch.test(color)) {\r\n            let hex = color.substring(1);\r\n            if (hex.length === 3) {\r\n                hex = hex.split('').map((char) => char + char).join('');\r\n            }\r\n            const [r, g, b] = hex.match(/.{2}/g).map((c) => parseInt(c, 16));\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle RGB and RGBA color formats\r\n        const rgbMatch = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)$/;\r\n        const match = color.match(rgbMatch);\r\n        if (match) {\r\n            const [_, r, g, b] = match.map(Number);\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle other color formats or invalid colors\r\n        return null;\r\n    };\r\n\r\n    const color = getComputedStyle(document.documentElement).getPropertyValue(varColor).trim();\r\n    const colorComponents = getColorComponents(color);\r\n\r\n    if (colorComponents) {\r\n        const [r, g, b] = colorComponents;\r\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    } else {\r\n        // Handle invalid colors\r\n        return 'defaultColor';\r\n    }\r\n};\r\nconst getCollapseKeys = (items) => {\r\n    let keys = []\r\n\r\n    const getKey = (obj) => {\r\n        if (Array.isArray(obj)) {\r\n            obj.map(obj_ => getKey(obj_))\r\n        } else {\r\n            if (obj.children) {\r\n                obj.children.map((obj_) => getKey(obj_))\r\n                keys.push(obj.key)\r\n            }\r\n        }\r\n    }\r\n    getKey(items)\r\n    return keys\r\n}\r\nconst getParentKeys = (keys, obj) => {\r\n    const getParent = (k, obj) => {\r\n        let allParentKeys = []\r\n        //get one parent key\r\n        const getParentKey = (key, tree) => {\r\n            let parentKey;\r\n            for (let i = 0; i < tree.length; i++) {\r\n                const node = tree[i];\r\n                if (node.children) {\r\n                    if (node.children.some((item) => item.key === key)) {\r\n                        parentKey = node.key;\r\n                    } else if (getParentKey(key, node.children)) {\r\n                        parentKey = getParentKey(key, node.children);\r\n                    }\r\n                }\r\n            }\r\n            return parentKey;\r\n        }\r\n        const getParentKey_ = (k, obj) => {\r\n            let key = getParentKey(k, obj)\r\n            if (key) {\r\n                allParentKeys.push(key)\r\n                getParentKey_(key, obj)\r\n            }\r\n        }\r\n        getParentKey_(k, obj)\r\n        return allParentKeys\r\n    }\r\n    let parentKeys = keys.map(k => getParent(k, obj))\r\n    let parentKey = []\r\n    for (let i = 0; i < parentKeys.length; i += 1) {\r\n        let element = parentKeys[i]\r\n        for (let j = 0; j < element.length; j += 1) {\r\n            parentKey.push(element[j])\r\n        }\r\n    }\r\n    return parentKey\r\n}\r\nconst reindex = (index, asString = true) => {\r\n    let r = index\r\n    if (typeof (index) == 'number') {\r\n        r = [asString ? String(index) : index]\r\n    }\r\n    if (Array.isArray(index) && asString) {\r\n        r = index.map(i => String(i))\r\n    }\r\n    return r\r\n}\r\n\r\nconst getHrefKeys = (items) => {\r\n    let keys = []\r\n\r\n    const getKey = (obj) => {\r\n        if (Array.isArray(obj)) {\r\n            obj.map(obj_ => getKey(obj_))\r\n        } else {\r\n            if (obj.children) {\r\n                obj.children.map((obj_) => getKey(obj_))\r\n            }\r\n            if (obj.href != null) {\r\n                keys.push(obj.key)\r\n            }\r\n        }\r\n    }\r\n    getKey(items)\r\n    return keys\r\n}\r\nexport {deepCopy, AlphaColor, StreamlitLikeStyle, getCollapseKeys, getHrefKeys, getParentKeys, reindex}","import {Streamlit} from \"streamlit-component-lib\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Button, Space, ConfigProvider,} from 'antd';\r\nimport {growStyle} from \"./buttons.react\";\r\nimport {AlphaColor,getHrefKeys} from \"../utils.react\"\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"./buttons.css\"\r\n\r\ninterface ButtonsProp {\r\n    items: any[];\r\n    index: number | null;\r\n    shape: \"circle\" | \"default\" | \"round\" | undefined;\r\n    align: string;\r\n    direction: \"horizontal\" | \"vertical\" | undefined;\r\n    compact: boolean;\r\n    grow: boolean;\r\n    key: string | undefined;\r\n}\r\n\r\nconst AntdButtons = (props: ButtonsProp) => {\r\n    //get data\r\n    const items = props['items']\r\n    const index = props['index']\r\n    const shape = props['shape']\r\n    const align = props['align']\r\n    const direction = props['direction']\r\n    const compact = props['compact']\r\n    const grow = props['grow']\r\n    const key = props['key']\r\n\r\n    //wrap component\r\n    const Component = compact ? Space.Compact : Space\r\n\r\n    //load style\r\n    grow && growStyle()\r\n\r\n    //state\r\n    const [selected, setSelected] = useState(index)\r\n\r\n    // component height\r\n    useEffect(() => Streamlit.setFrameHeight())\r\n\r\n    //callback\r\n    const onClick = (idx: number) => {\r\n        //not href index\r\n        if (getHrefKeys(items).indexOf(idx) === -1) {\r\n            setSelected(idx)\r\n            Streamlit.setComponentValue(idx)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    Button: {\r\n                        colorText: 'var(--text-color)',\r\n                        colorTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        colorPrimary: 'var(--primary-color)',\r\n                        colorBgContainerDisabled: 'transform',\r\n                        colorBgContainer: 'var(--background-color)',\r\n                        colorPrimaryHover: 'var(--primary-color)',\r\n                        controlHeight: 35.5,\r\n                        fontSize: 16,\r\n                        colorBorder: AlphaColor('--text-color', 0.2)\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <Component\r\n                id={key}\r\n                className={`${direction === 'horizontal' && 'd-flex'} justify-content-${align} flex-wrap`}\r\n                direction={direction}\r\n            >\r\n                {items.map((item: any, idx) => {\r\n                        let type_: any = index != null ? selected === idx ? \"primary\" : \"default\" : \"default\"\r\n                        return <Button\r\n                            key={idx}\r\n                            type={type_}\r\n                            shape={shape}\r\n                            onClick={() => onClick(idx)}\r\n                            disabled={item['disabled']}\r\n                            href={item['href'] ? item['href'] : undefined}\r\n                            target={'_blank'}\r\n                            icon={item['icon'] && <i className={`bi bi-${item['icon']}`}/>}\r\n                            className={grow ? 'flex-fill' : undefined}\r\n                        >\r\n                            {item['label']}\r\n                        </Button>\r\n                    }\r\n                )}\r\n            </Component>\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default AntdButtons\r\n","const growStyle = () => {\r\n    let style = `\r\n        div.ant-space-item{\r\n        display: flex;\r\n        flex-grow: 1;\r\n        }`\r\n    let element = document.getElementById('grow');\r\n    if (!element) {\r\n        element = document.createElement(\"style\");\r\n        element.id = 'grow';\r\n    }\r\n    element.innerHTML = style;\r\n    let root = document.getElementById(\"root\");\r\n    root && root.appendChild(element)\r\n}\r\n\r\n\r\nexport {growStyle}","import {Streamlit} from \"streamlit-component-lib\";\r\nimport React, {useEffect} from \"react\";\r\nimport {Tabs, ConfigProvider} from 'antd';\r\nimport {strToNode, TabsStyle} from \"./tabs.react\";\r\nimport {AlphaColor} from \"../utils.react\"\r\nimport './tabs.css'\r\n\r\ninterface TabsProp{\r\n    items: any[];\r\n    index: string;\r\n    align: string;\r\n    position: any;\r\n    shape: any;\r\n    centered: boolean;\r\n    height: number|null;\r\n    grow: boolean;\r\n    key: string | undefined;\r\n}\r\n\r\nconst AntdTabs = (props: TabsProp) => {\r\n    //get data\r\n    const items = props['items']\r\n    const index = props['index']\r\n    const align = props['align']\r\n    const position = props['position']\r\n    const shape = props['shape']\r\n    const centered = props['centered']\r\n    const height = props['height']\r\n    const grow = props['grow']\r\n    const key = props['key']\r\n\r\n    // load style\r\n    TabsStyle(align, grow)\r\n\r\n    //component height\r\n    let tabsHeight = ['left', 'right'].includes(position) && height != null ? height : undefined\r\n\r\n    // set component height\r\n    useEffect(() => Streamlit.setFrameHeight(tabsHeight))\r\n\r\n    //callback\r\n    const onClick = (key: string) => {\r\n        Streamlit.setComponentValue(key)\r\n    }\r\n\r\n    // antd menu component\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    //custom tree theme\r\n                    Tabs: {\r\n                        colorText: 'var(--text-color)',\r\n                        colorTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        colorPrimary: 'var(--primary-color)',\r\n                        colorBgContainerDisabled: 'transform',\r\n                        colorBgContainer: 'var(--background-color)',\r\n                        colorPrimaryHover: 'var(--primary-color)',\r\n                        colorPrimaryActive: 'var(--primary-color)',\r\n                        fontSize: 14,\r\n                        fontFamily: 'var(--font)',\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <Tabs\r\n                id={key}\r\n                items={strToNode(items)}\r\n                defaultActiveKey={index}\r\n                onTabClick={onClick}\r\n                type={shape === 'default' ? 'line' : shape}\r\n                tabPosition={position}\r\n                centered={centered}\r\n                style={{height: tabsHeight}}\r\n            />\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default AntdTabs\r\n","import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport {deepCopy, AlphaColor} from \"../utils.react\"\r\n\r\nconst TabsStyle = (align, grow) => {\r\n    let color = AlphaColor('--text-color', 0.1);\r\n    let style = `\r\n        .ant-tabs-nav-wrap{\r\n            justify-content: ${align};\r\n        }\r\n        .ant-tabs-nav:before {\r\n            border-bottom: 2px solid ${color} !important;\r\n        }\r\n        .ant-tabs-right > .ant-tabs-content-holder {\r\n            margin-right: -2px;\r\n            border-right: 2px solid ${color};\r\n        }\r\n        .ant-tabs-left > .ant-tabs-content-holder {\r\n            margin-left: -2px;\r\n            border-left: 2px solid ${color};\r\n        }\r\n        `\r\n    let growStyle = `\r\n        .ant-tabs-tab{\r\n            flex-grow: 1;\r\n        }\r\n        .ant-tabs-nav-list{\r\n            flex-grow: 1;\r\n        }\r\n    `\r\n    if (grow) {\r\n        style += growStyle\r\n    }\r\n    let element = document.getElementById('tabs-border');\r\n    if (!element) {\r\n        element = document.createElement(\"style\");\r\n        element.id = 'tabs-border';\r\n    }\r\n    element.innerHTML = style;\r\n    let root = document.getElementById(\"root\");\r\n    root && root.appendChild(element)\r\n}\r\n\r\n\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    return obj.map((item, idx) => {\r\n        let item_ = deepCopy(item)\r\n        item_['key'] = idx\r\n        if (item_['icon'] != null) {\r\n            item_['label'] = <span>\r\n                <span style={{marginRight: 8}}><i className={`bi bi-${item['icon']}`}/></span>\r\n                {item_['label']}\r\n            </span>\r\n        }\r\n        return item_\r\n    })\r\n}\r\n\r\nexport {strToNode, TabsStyle}","import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport {deepCopy} from \"../utils.react\";\r\n\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(obj_ => strToNode(obj_))\r\n    } else {\r\n        let obj_copy = deepCopy(obj);\r\n        const icon = obj_copy.icon;\r\n        const href = obj_copy.href;\r\n        const key = obj_copy.key;\r\n        obj_copy.key = String(key)\r\n        if (obj_copy.children) {\r\n            obj_copy.children = obj_copy.children.map(obj_ => strToNode(obj_))\r\n        }\r\n        if (icon) {\r\n            obj_copy.icon = <span><i className={`bi bi-${icon}`}/></span>\r\n        }\r\n        if (href) {\r\n            obj_copy.label = <a href={href} target='_blank' rel='noreferrer'>{obj_copy.label}</a>\r\n        }\r\n        return obj_copy\r\n    }\r\n}\r\n\r\n\r\nconst menuHeight = (open_keys, items) => {\r\n\r\n    const showItem_ = (open_keys, item) => {\r\n        let h = 52\r\n        const showItem = (open_keys, item) => {\r\n            if (open_keys && item.children) {\r\n                if (open_keys.includes(item['key']) || item.type === 'group') {\r\n                    h += item['children'].length * 45\r\n                    item['children'].map(item_ => showItem(open_keys, item_))\r\n                }\r\n            }\r\n            if (item.type === 'divider') {\r\n                h = 2\r\n            }\r\n        }\r\n        showItem(open_keys, item)\r\n        return h\r\n    }\r\n\r\n    function sum(arr) {\r\n        let s = 0;\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            s += arr[i];\r\n        }\r\n        return s;\r\n    }\r\n\r\n    let n_arr = items.map(item => showItem_(open_keys, item))\r\n    return sum(n_arr)\r\n}\r\n\r\n\r\nexport {strToNode, menuHeight}","import {Streamlit} from \"streamlit-component-lib\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport type {MenuProps} from 'antd';\r\nimport {Menu, ConfigProvider} from 'antd';\r\nimport {strToNode, menuHeight} from \"./menu.react\";\r\nimport {AlphaColor, getParentKeys, getCollapseKeys, getHrefKeys, reindex} from \"../utils.react\"\r\nimport './menu.css'\r\n\r\ninterface MenuProp {\r\n    items: any[];\r\n    index: any;\r\n    open_index: any;\r\n    open_all: boolean;\r\n    size: any;\r\n    indent: any;\r\n    key: string | undefined;\r\n}\r\n\r\nconst AntdMenu = (props: MenuProp) => {\r\n    //get data\r\n    const items = strToNode(props['items'])\r\n    const dsk = reindex(props['index'])\r\n    let dok = reindex(props['open_index'])\r\n    const openAll = props['open_all']\r\n    const size = props['size']\r\n    const indent = props['indent']\r\n    const key = props['key']\r\n    dok = openAll ? getCollapseKeys(items) : dok ? dok : dsk && getParentKeys(dsk, items)\r\n\r\n    //state\r\n    const [selectKey, setSelectKey] = useState(dsk)\r\n    const [height, setHeight] = useState(menuHeight(dok, items))\r\n\r\n    //component height\r\n    useEffect(() => Streamlit.setFrameHeight(height))\r\n\r\n    //callback\r\n    const onSelect: MenuProps['onSelect'] = (e) => {\r\n        //only not href item will fire\r\n        let hrefKeys = getHrefKeys(items)\r\n        if (hrefKeys.indexOf(e.key) === -1) {\r\n            setSelectKey([e.key]);\r\n            Streamlit.setComponentValue(Number(e.key));\r\n        }\r\n    }\r\n    const onOpenChange: MenuProps['onOpenChange'] = (e) => {\r\n        //update component height\r\n        setHeight(menuHeight(e, items))\r\n    }\r\n\r\n    // antd menu component\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    //custom menu theme\r\n                    Menu: {\r\n                        radiusItem: 10,\r\n                        colorItemText: 'var(--text-color)',\r\n                        colorGroupTitle: AlphaColor('--text-color', 0.5),\r\n                        colorItemTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        colorItemTextHover: 'var(--text-color)',\r\n                        colorItemTextSelected: 'var(--primary-color)',\r\n                        colorItemBgHover: AlphaColor('--text-color', 0.2),\r\n                        colorItemBgSelected: AlphaColor(),\r\n                        colorSubItemBg: 'var(--background-color)',\r\n                        colorItemBg: 'var(--background-color)',\r\n                        colorSplit: AlphaColor('--text-color', 0.2),\r\n                        fontSize: size,\r\n                        fontFamily: 'var(--font)'\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <Menu\r\n                id={key}\r\n                onSelect={onSelect}\r\n                onOpenChange={onOpenChange}\r\n                selectedKeys={selectKey}\r\n                style={{borderRightWidth: 0}}\r\n                defaultSelectedKeys={dsk}\r\n                defaultOpenKeys={dok}\r\n                mode={'inline'}\r\n                items={items}\r\n                inlineIndent={indent}\r\n            />\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default AntdMenu\r\n","import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport {deepCopy} from \"../utils.react\";\r\n\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(obj_ => strToNode(obj_))\r\n    } else {\r\n        let obj_copy = deepCopy(obj);\r\n        const icon = obj_copy.icon;\r\n        if (obj_copy.children) {\r\n            obj_copy.children = obj_copy.children.map(obj_ => strToNode(obj_))\r\n        }\r\n        if (icon) {\r\n            obj_copy.icon = <i className={`bi bi-${icon}`}/>\r\n        }\r\n        obj_copy['title'] = obj_copy.label\r\n        delete obj_copy.label\r\n        return obj_copy\r\n    }\r\n}\r\n\r\n\r\nconst treeHeight = (open_keys, items, item_height = 30) => {\r\n\r\n    const showItem_ = (open_keys, item) => {\r\n        let n = 1\r\n        const showItem = (open_keys, item) => {\r\n            if (open_keys && item.children) {\r\n                if (open_keys.includes(item['key'])) {\r\n                    n += item['children'].length\r\n                    item['children'].map(item_ => showItem(open_keys, item_))\r\n                }\r\n            }\r\n        }\r\n        showItem(open_keys, item)\r\n        return n\r\n    }\r\n\r\n    function sum(arr) {\r\n        let s = 0;\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            s += arr[i];\r\n        }\r\n        return s;\r\n    }\r\n\r\n    let n_arr = items.map(item => showItem_(open_keys, item))\r\n    let n = sum(n_arr)\r\n    return n * item_height\r\n}\r\n\r\nexport {strToNode, treeHeight}","import {Streamlit} from \"streamlit-component-lib\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport type {TreeProps} from 'antd/es/tree';\r\nimport {Tree, ConfigProvider} from 'antd';\r\nimport {CaretDownFilled} from '@ant-design/icons';\r\nimport {strToNode, treeHeight} from \"./tree.react\";\r\nimport {AlphaColor, reindex,getCollapseKeys,getParentKeys} from \"../utils.react\"\r\nimport './tree.css'\r\n\r\ninterface TreeProp {\r\n    items: any[]\r\n    index: any\r\n    icon: any\r\n    height: any\r\n    open_index: any\r\n    open_all: boolean\r\n    checkbox: boolean\r\n    checkbox_strict: boolean\r\n    multiple: boolean\r\n    show_line: boolean\r\n    key: string | undefined\r\n}\r\n\r\nconst AntdTree = (props: TreeProp) => {\r\n    //get data\r\n    const items = strToNode(props['items']);\r\n    const dsk = reindex(props['index'], false)\r\n    let dok = reindex(props['open_index'], false)\r\n    const openAll = props['open_all']\r\n    const icon = props['icon']\r\n    const height = props['height']\r\n    const checkable = props['checkbox']\r\n    const checkStrictly = props['checkbox_strict']\r\n    const multiple = props['multiple']\r\n    const showLine = props['show_line']\r\n    dok = openAll ? getCollapseKeys(items) : dok ? dok : dsk && getParentKeys(dsk, items)\r\n\r\n    //state\r\n    const [value, setValue] = useState(dsk)\r\n    const [autoHeight, setAutoHeight] = useState(treeHeight(dok, items))\r\n\r\n    // component height\r\n    useEffect(() => Streamlit.setFrameHeight(height != null ? height : autoHeight))\r\n\r\n    //callback\r\n    const onExpand: TreeProps['onExpand'] = (e) => {\r\n        //update component height\r\n        setAutoHeight(treeHeight(e, items))\r\n    };\r\n    const onSelect: TreeProps['onSelect'] = (selectedKeys_, info) => {\r\n        setValue(selectedKeys_)\r\n        console.log(selectedKeys_)\r\n        Streamlit.setComponentValue(selectedKeys_);\r\n    };\r\n    const onCheck: TreeProps['onCheck'] = (checkedKeys_, info) => {\r\n        let ck = (Array.isArray(checkedKeys_)) ? checkedKeys_ : checkedKeys_['checked']\r\n        setValue(ck)\r\n        console.log(ck)\r\n        Streamlit.setComponentValue(ck)\r\n    }\r\n\r\n    // antd menu component\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    //custom tree theme\r\n                    Tree: {\r\n                        colorPrimary: 'var(--primary-color)',\r\n                        colorPrimaryHover: 'var(--primary-color)',\r\n                        colorBgContainer: 'var(--background-color)',\r\n                        colorText: 'var(--text-color)',\r\n                        colorTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        controlItemBgHover: AlphaColor('--text-color', 0.2),\r\n                        controlItemBgActive: AlphaColor(),\r\n                        fontSize: 14,\r\n                        fontFamily: 'var(--font)',\r\n                        colorBorder: AlphaColor('--text-color', 0.2),\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <div>\r\n                <Tree\r\n                    onSelect={onSelect}\r\n                    onCheck={onCheck}\r\n                    onExpand={onExpand}\r\n                    selectedKeys={value}\r\n                    checkedKeys={value}\r\n                    defaultSelectedKeys={dsk}\r\n                    defaultCheckedKeys={dsk}\r\n                    defaultExpandedKeys={dok}\r\n                    treeData={items}\r\n                    showLine={showLine}\r\n                    multiple={multiple}\r\n                    checkable={checkable}\r\n                    selectable={!checkable}\r\n                    height={height}\r\n                    checkStrictly={checkStrictly}\r\n                    switcherIcon={<CaretDownFilled/>}\r\n                    showIcon={true}\r\n                    icon={icon && <i className={`bi bi-${icon}`}/>}\r\n                    style={{whiteSpace: 'nowrap', overflowX: 'auto', overflowY: 'hidden'}}\r\n                />\r\n            </div>\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default AntdTree\r\n","import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport {deepCopy} from \"../utils.react\";\r\n\r\nconst CascaderStyle = (multiple) => {\r\n    let style = `\r\n        .ant-select-selection-item{\r\n            color: rgb(255, 255, 255);\r\n        }\r\n        `\r\n    if (multiple) {\r\n        let element = document.getElementById('tabs-border');\r\n        if (!element) {\r\n            element = document.createElement(\"style\");\r\n            element.id = 'tabs-border';\r\n        }\r\n        element.innerHTML = style;\r\n        let root = document.getElementById(\"root\");\r\n        root && root.appendChild(element)\r\n    }\r\n}\r\n\r\n\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(obj_ => strToNode(obj_))\r\n    } else {\r\n        let obj_copy = deepCopy(obj);\r\n        const icon = obj_copy.icon;\r\n        const label = obj_copy.label;\r\n        if (obj_copy.children != null) {\r\n            obj_copy.children = obj_copy.children.map(obj_ => strToNode(obj_))\r\n        }\r\n        if (icon) {\r\n            obj_copy.label = <span><i className={`bi bi-${icon} m-1`}/>{label}</span>\r\n        } else {\r\n            obj_copy.label = <span>{label}</span>\r\n        }\r\n        return obj_copy\r\n    }\r\n}\r\n\r\nexport {strToNode, CascaderStyle}","import {Streamlit} from \"streamlit-component-lib\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Cascader, ConfigProvider} from 'antd';\r\nimport {CaretDownFilled, CaretRightFilled} from '@ant-design/icons';\r\nimport {strToNode, CascaderStyle} from \"./cascader.react\";\r\nimport {AlphaColor} from \"../utils.react\"\r\nimport './cascader.css'\r\n\r\n\r\ninterface CascaderProp{\r\n    label:string\r\n    items: any[]\r\n    default: any\r\n    max_selections: any\r\n    placeholder: any\r\n    disabled: boolean\r\n    clear: boolean\r\n    search: boolean\r\n    multiple: boolean\r\n    strict: boolean\r\n    key: string | undefined\r\n}\r\n\r\nconst AntdCascader = (props: CascaderProp) => {\r\n    //get data\r\n    const label = props['label']\r\n    const items = strToNode(props['items'])\r\n    const defaultValue = props['default']\r\n    const placeholder = props['placeholder']\r\n    const multiple = props['multiple']\r\n    const disabled = props['disabled']\r\n    const showSearch = props['search']\r\n    const allowClear = props['clear']\r\n    const strict = props['strict']\r\n    const maxTagCount = props['max_selections']\r\n    const key = props['key']\r\n\r\n    // load css\r\n    CascaderStyle(multiple)\r\n\r\n    //state\r\n    const [height, setHeight] = useState(undefined)\r\n\r\n    // component height\r\n    useEffect(() => Streamlit.setFrameHeight(height))\r\n\r\n    //callback\r\n    const onChange = (value: any) => {\r\n        // setValue(selectedKeys_)\r\n        console.log(value);\r\n        Streamlit.setComponentValue(value);\r\n    }\r\n\r\n    const dropdownVisible = (visible: boolean) => {\r\n        // setHeight(visible ? rootHeight + 180 : undefined)\r\n    }\r\n\r\n\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    Cascader: {\r\n                        colorBgContainer: 'var(--background-color)',\r\n                        colorBorder: AlphaColor('--text-color', 0.5),\r\n                        controlItemBgHover: 'var(--secondary-background-color)',\r\n                        controlItemBgActive: AlphaColor(),\r\n                        colorPrimary: 'var(--primary-color)',\r\n                        colorPrimaryHover: 'var(--primary-color)',\r\n                        colorTextDisabled: AlphaColor('--text-color', 0.5),\r\n                    },\r\n                    Select: {\r\n                        colorBgContainer: 'var(--secondary-background-color)',\r\n                        colorBgElevated: 'var(--background-color)',\r\n                        colorBorder: 'var(--background-color) !important',\r\n                        colorFillSecondary: 'var(--primary-color)',\r\n                        colorText: 'var(--text-color)',\r\n                        colorTextPlaceholder: AlphaColor('--text-color', 0.5),\r\n                        colorIcon: '#fff',\r\n                        colorIconHover: '#fff',\r\n                        controlHeight: 40,\r\n                        controlOutlineWidth: 0,\r\n                        lineHeight: 1.6,\r\n                        fontFamily: 'var(--font)',\r\n                    }\r\n                },\r\n            }}\r\n        >\r\n            <div className={'d-flex'} style={{margin: `0 0 ${label === '' ? 0 : 8}px`, fontSize: 14}}>{label}</div>\r\n            <Cascader\r\n                id={key}\r\n                options={items}\r\n                onChange={onChange}\r\n                placeholder={placeholder}\r\n                multiple={multiple}\r\n                disabled={disabled}\r\n                allowClear={allowClear}\r\n                showSearch={showSearch}\r\n                dropdownMatchSelectWidth={true}\r\n                style={{width: '100%'}}\r\n                suffixIcon={<CaretDownFilled/>}\r\n                expandIcon={<CaretRightFilled/>}\r\n                maxTagCount={maxTagCount}\r\n                maxTagTextLength={13}\r\n                defaultValue={defaultValue}\r\n                popupClassName={'shadow-none'}\r\n                onDropdownVisibleChange={dropdownVisible}\r\n                notFoundContent={<div style={{textAlign: 'center', color: 'rgb(163, 168, 184)'}}>No results</div>}\r\n                showCheckedStrategy={strict ? Cascader.SHOW_CHILD : Cascader.SHOW_PARENT}\r\n\r\n            />\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default AntdCascader\r\n","import {ComponentProps, withStreamlitConnection} from \"streamlit-component-lib\";\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AntdButtons from \"./buttons/Buttons\";\nimport AntdTabs from \"./tabs/Tabs\";\nimport AntdMenu from \"./menu/Menu\";\nimport AntdTree from \"./tree/Tree\";\nimport AntdCascader from \"./cascader/Cascader\";\nimport {StreamlitLikeStyle} from \"./utils.react\"\n\n//switch component\nconst AntdComponent = (props: ComponentProps) => {\n    //get data\n    const id = props.args['id']\n    const kw = props.args['kw']\n    //load global streamlit-like style\n    StreamlitLikeStyle()\n    //return component base on component id\n    switch (id) {\n        case 'buttons':return AntdButtons(kw);\n        case 'tabs':return AntdTabs(kw);\n        case 'menu':return AntdMenu(kw);\n        case 'tree':return AntdTree(kw);\n        case 'cascader':return AntdCascader(kw);\n        default:return <></>\n    }\n};\n\n//wrap component\nconst StreamlitAntdComponent = withStreamlitConnection(AntdComponent)\n\n//render component\nReactDOM.render(\n    <React.StrictMode>\n        <StreamlitAntdComponent/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}