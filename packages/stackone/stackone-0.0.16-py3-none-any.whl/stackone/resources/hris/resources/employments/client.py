# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.not_implemented_error import NotImplementedError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...types.employment_result import EmploymentResult
from ...types.employments_paginated import EmploymentsPaginated


class EmploymentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def hris_employments_list(
        self,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
        account_id: str,
    ) -> EmploymentsPaginated:
        """
        Parameters:
            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date

            - account_id: str. The account identifier
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "unified/hris/employments"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "x-account-id": account_id}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmploymentsPaginated, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def hris_employments_get(
        self,
        id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
        account_id: str,
    ) -> EmploymentResult:
        """
        Parameters:
            - id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date

            - account_id: str. The account identifier
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/hris/employments/{id}"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "x-account-id": account_id}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmploymentResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEmploymentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def hris_employments_list(
        self,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
        account_id: str,
    ) -> EmploymentsPaginated:
        """
        Parameters:
            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date

            - account_id: str. The account identifier
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "unified/hris/employments"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "x-account-id": account_id}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmploymentsPaginated, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def hris_employments_get(
        self,
        id: str,
        *,
        page: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        raw: typing.Optional[bool] = None,
        fields: typing.Optional[str] = None,
        sync_token: typing.Optional[str] = None,
        updated_after: typing.Optional[str] = None,
        account_id: str,
    ) -> EmploymentResult:
        """
        Parameters:
            - id: str.

            - page: typing.Optional[str]. The page number of the results to fetch

            - page_size: typing.Optional[str]. The number of results per page

            - raw: typing.Optional[bool]. Indicates that the raw request result is returned

            - fields: typing.Optional[str]. The comma separated list of fields to return in the response (if empty, all fields are returned)

            - sync_token: typing.Optional[str]. The sync token to select the only updated results

            - updated_after: typing.Optional[str]. Use a string with a date to only select results updated after that given date

            - account_id: str. The account identifier
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"unified/hris/employments/{id}"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "raw": raw,
                    "fields": fields,
                    "sync_token": sync_token,
                    "updated_after": updated_after,
                }
            ),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "x-account-id": account_id}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmploymentResult, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 501:
            raise NotImplementedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
